using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using iTextSharp.text.pdf;
using iTextSharp.text;
using System.Data.SqlClient;
using System.Diagnostics;

using Image = iTextSharp.text.Image;
//using iText.Layout.Properties;
//using iText.Layout.Element;
using Paragraph = iTextSharp.text.Paragraph;
using Font = iTextSharp.text.Font;
using System.Text.RegularExpressions;

namespace HematoxinandEosin
{
    public partial class Form_engReports : Form
    {
        string Constr = "";//"Data Source=SYSPSENG006;User ID=sa;Password=sree@pns2013;Initial Catalog=PNSHE;Pooling=false;Max Pool Size=400;workstation id =SYSPSENG006";
        SqlConnection con = new SqlConnection();
        SqlCommand cmd = new SqlCommand();
        // DataTable table = new DataTable("table");
        SqlDataAdapter sda = new SqlDataAdapter();
        DataTable table = new DataTable("table");
        string sqlstr;
        iTextSharp.text.pdf.PdfContentByte cb;
        PdfTemplate footerTemplate;
        BaseFont bf = null;


        //List list = new List();
        string IMG1 = "Images/logos.png";
        string FilePath = Path.Combine(Application.StartupPath + "\\Lab.txt");
        public Form_engReports()
        {
            InitializeComponent();
        }

        private void btn_close_Click(object sender, EventArgs e)
        {
            this.Close();
            RequiredVariables.btnReports = true;
        }



        private void btn_ExportPdf_Click(object sender, EventArgs e)
        {



            if (dg_Eng.Rows.Count > 0)
            {
                SaveFileDialog sfd = new SaveFileDialog();
                sfd.Filter = "PDF (*.pdf)|*.pdf";
                sfd.FileName = "output.pdf";
                bool fileError = false;
                if (sfd.ShowDialog() == DialogResult.OK)
                {
                    if (File.Exists(sfd.FileName))
                    {
                        try
                        {
                            File.Delete(sfd.FileName);
                        }
                        catch (IOException ex)
                        {
                            fileError = true;
                            MessageBox.Show("It wasn't possible to write the data to the disk." + ex.Message);
                        }
                    }
                    if (!fileError)
                    {
                        try
                        {
                            PdfPTable pdfTable = new PdfPTable(dg_Eng.Columns.Count);
                            pdfTable.DefaultCell.Padding = 3;
                            pdfTable.WidthPercentage = 100;
                            pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
                            pdfTable.HeaderRows = 4;
                            PdfPCell cell1 = new PdfPCell();

                            Image img1 = Image.GetInstance(IMG1);
                            cell1.AddElement(img1);
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 1;

                            pdfTable.AddCell(cell1);

                            StreamReader file = new System.IO.StreamReader(FilePath);


                            string result = file.ReadToEnd();
                            result = result.Replace('$', '\n');

                            cell1 = new PdfPCell(new Phrase(result));


                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 3;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("For Date :" + listBox_eng.SelectedItem.ToString(), FontFactory.GetFont("Arial", 15, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 4;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Generated By :" + RequiredVariables.UserName, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 2;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Date & Time : " + DateTime.Now.ToString(), FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 2;
                            pdfTable.AddCell(cell1);

                            foreach (DataGridViewColumn column in dg_Eng.Columns)
                            {
                                PdfPCell cell = new PdfPCell(new Phrase(column.HeaderText, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                                pdfTable.AddCell(cell);
                            }


                            foreach (DataGridViewRow row in dg_Eng.Rows)
                            {
                                // PdfPCell cell = new PdfPCell(new Phrase(row.HeaderText));
                                foreach (DataGridViewCell cell in row.Cells)
                                {
                                    try
                                    {
                                        cell1 = new PdfPCell(new Phrase(cell.Value.ToString(), FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK)));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        pdfTable.AddCell(cell1);
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show("Error :" + ex.Message);
                                    }
                                }
                            }

                            using (FileStream stream = new FileStream(sfd.FileName, FileMode.Create))
                            {
                                Document pdfDoc = new Document(PageSize.A4, 55f, 20f, 20f, 10f);
                                PdfWriter.GetInstance(pdfDoc, stream);
                                pdfDoc.Open();
                                pdfDoc.Add(pdfTable);
                                pdfDoc.Close();
                                stream.Close();
                            }
                            

                            
                            MessageBox.Show("Data Exported Successfully !!!", "Info");
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error :" + ex.Message);
                        }

                    }
                }
                //else
                //{
                //    MessageBox.Show("No Record To Export !!!", "Info");
                //}
            }
            else
            {
                MessageBox.Show("No Record To Export !!!", "Info");
            }




        }

        private void retrieveData()
        {
            sqlstr = "";
            sqlstr = "Select EngModeParameterName,CalibratedBy,Status,ChangedTime from EngineeringMode";
            sda = new SqlDataAdapter(sqlstr, con);
            table = new DataTable();
            sda.Fill(table);
            cmd = new SqlCommand(sqlstr, con);
            if (con.State == ConnectionState.Closed)
                con.Open();
            cmd.ExecuteNonQuery();
            dg_Eng.DataSource = table;
        }

        private void retrieveDate()
        {
            sqlstr = "";
            sqlstr = "Select DISTINCT TestedOn from EngineeringMode";

            //sda = new SqlDataAdapter(sqlstr, con);
            //list = new List();
            //sda.Fill(list);
            cmd = new SqlCommand(sqlstr, con);
            if (con.State == ConnectionState.Closed)
                con.Open();

            SqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                listBox_eng.Items.Add(reader["TestedOn"].ToString());
            }

            con.Close();
            //cmd.ExecuteNonQuery();
        }
        private void Form_engReports_Load(object sender, EventArgs e)
        {
            Constr = RequiredVariables.DBConnStr;
            con.ConnectionString = Constr;
            if (con.State == ConnectionState.Closed)
                con.Open();
            //ofd1();
            //retrieveDate();
            
        }



        private void ofd1()
        {
            listBox_eng.Items.Clear();

            DirectoryInfo di = new DirectoryInfo(@"G:\projects\mukesh\CalibLog\Eng\");

            FileInfo[] files = di.GetFiles("*.csv");



            foreach (FileInfo file in files)
            {

                string Pth = file.Name;
                Pth = Pth.Replace(".csv", "");
                listBox_eng.Items.Add(Pth);


            }



        }



        private void list_eng_SelectedIndexChanged(object sender, EventArgs e)

        {


            // list_eng.SelectedItems()
            //string click = list_eng.SelectedItems.ToString();
            // string FilePath = @"G:\projects\mukesh\CalibLog\Eng", list_eng.SelectedItems.ToString("dd/MM/yyyy" + ".csv");
            //string FilePath = Path.Combine(@"G:\projects\mukesh\CalibLog\Eng", DateTime.Today.ToString("dd/MM/yyyy") + ".csv");
            //System.IO.StreamReader file = new System.IO.StreamReader(FilePath);

            //string[] columnnames = file.ReadLine().Split(',');
            //DataTable dt = new DataTable();
            //foreach (string c in columnnames)
            //{
            //    dt.Columns.Add(c);
            //}
            //string newline;
            //while ((newline = file.ReadLine()) != null)
            //{
            //    DataRow dr = dt.NewRow();
            //    string[] values = newline.Split(',');
            //    for (int i = 0; i < values.Length; i++)
            //    {
            //        dr[i] = values[i];
            //    }
            //    dt.Rows.Add(dr);
            //  }
            //file.Close();
            //dg_Eng.DataSource = dt;
        }

        private void listBox_eng_SelectedIndexChanged(object sender, EventArgs e)
        {
            String s1 = listBox_eng.SelectedItem.ToString();
            sqlstr = "";
            sqlstr = "Select EngModeParameterName,Status,CalibratedBy,ChangedTime from EngineeringMode Where TestedOn= '" + s1 + "'";
            sda = new SqlDataAdapter(sqlstr, con);
            table = new DataTable();
            sda.Fill(table);
            cmd = new SqlCommand(sqlstr, con);
            if (con.State == ConnectionState.Closed)
                con.Open();
            cmd.ExecuteNonQuery();
            if (dg_Eng.Rows.Count > 0) dg_Eng.Rows.Clear();
            //dg_Eng.DataSource = table;
            for (int i = 0; i < table.Rows.Count; i++)
            {
                //if (table.Rows[i]["Status"].ToString() == "sign in")
                //{

                dg_Eng.Rows.Add();
                //dg_UserIndetailed.Rows.Add();
                dg_Eng.Rows[dg_Eng.Rows.Count - 1].Cells["eng"].Value = table.Rows[i]["EngModeParameterName"].ToString();

                dg_Eng.Rows[dg_Eng.Rows.Count - 1].Cells["status"].Value = table.Rows[i]["Status"].ToString();
                dg_Eng.Rows[dg_Eng.Rows.Count - 1].Cells["calibBy"].Value = table.Rows[i]["CalibratedBy"].ToString(); ;
                dg_Eng.Rows[dg_Eng.Rows.Count - 1].Cells["time"].Value = table.Rows[i]["ChangedTime"].ToString();
            }
            //pages();
            
        }

        private void btn_selectAll_Click(object sender, EventArgs e)
        {
            //CreatePDF();
        }
        //private void CreatePDF()
        //{
        //    string fileName = string.Empty;
        //    DateTime fileCreationDatetime = DateTime.Now;
        //    fileName = string.Format("{0}.pdf", fileCreationDatetime.ToString(@"yyyyMMdd") + "_" + fileCreationDatetime.ToString(@"HHmmss"));
        //    string pdfPath =  @"G:/projects/mukesh/HematoxinandEosin/HematoxinandEosin/bin/Debug/Engpar.pdf"; ;

        //    using (FileStream msReport = new FileStream(pdfPath, FileMode.Create))
        //    {
        //        //step 1
        //        using (Document pdfDoc = new Document(PageSize.A4, 10f, 10f, 140f, 10f))
        //        {
        //            try
        //            {
        //                // step 2
        //                PdfWriter pdfWriter = PdfWriter.GetInstance(pdfDoc, msReport);
        //                //pdfWriter.PageEvent = new Common.ITextEvents();

        //                //open the stream 
        //                pdfDoc.Open();

        //                for (int i = 0; i<10; i++)
        //                {
        //                    Paragraph para = new Paragraph("Hello world. Checking Header Footer", FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK));
        //                para.Alignment = Element.ALIGN_CENTER;
        //                    pdfDoc.Add(para);
        //                    pdfDoc.NewPage();
        //                }

        //                pdfDoc.Close();
        //            }
        //            catch (Exception ex)
        //            {
        //                //handle exception
        //            }
        //            finally
        //            {
        //            }
        //        }
        //    }
        //}


        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            txtList.Text = String.Empty;
            // txtList.Text = listBox_eng.SelectedItem.ToString();
            //txtList.Text = listBox1.SelectedItem.ToString();
            //for (int a = 0; a <= listBox1.Items.Count; a++)
            //{
            //string FilePath = Path.Combine(@"G:\projects\mukesh\CalibLog\Eng\" + txtList.Text + ".csv");
            string FilePath = Application.StartupPath + "\\" + txtList.Text + ".csv";
            System.IO.StreamReader file = new System.IO.StreamReader(FilePath);

            string[] columnnames = file.ReadLine().Split(',');
            DataTable dt = new DataTable();
            foreach (string c in columnnames)
            {
                dt.Columns.Add(c);
            }
            string newline;
            while ((newline = file.ReadLine()) != null)
            {
                DataRow dr = dt.NewRow();
                string[] values = newline.Split(',');
                for (int i = 0; i < values.Length; i++)
                {
                    dr[i] = values[i];
                }
                dt.Rows.Add(dr);
            }
            file.Close();
            dg_Eng.DataSource = dt;
            // }
        }
        //private void AddFooter(Document doc)
        //{
        //    if (doc is null)
        //        return;

        //    Table table = new Table(UnitValue.CreatePercentArray(60)).UseAllAvailableWidth();

        //    int numberOfPages = doc.GetPdfDocument().GetNumberOfPages();
        //    for (int i = 1; i <= numberOfPages; i++)
        //    {
        //        PdfPage page = doc.GetPdfDocument().GetPage(i);
        //        PdfCanvas pdfCanvas = new PdfCanvas(page);
        //        Rectangle rectangle = new Rectangle(
        //            0,
        //            0,
        //            page.GetPageSize().GetWidth(),
        //            15);

        //        Canvas canvas = new Canvas(pdfCanvas, doc.GetPdfDocument(), rectangle);

        //        var cell = new Cell(1, 20).SetFontSize(smallFontSize);
        //        cell.SetBorder(Border.NO_BORDER);
        //        cell.SetPadding(0);
        //        table.AddCell(cell);

        //        cell = new Cell(1, 20).Add(new Paragraph("This document is an invoice")
        //            .SetTextAlignment(TextAlignment.CENTER)).SetFontSize(smallFontSize);
        //        cell.SetBorder(Border.NO_BORDER);
        //        cell.SetPadding(0);
        //        table.AddCell(cell);

        //        cell = new Cell(1, 10).SetFontSize(smallFontSize);
        //        cell.SetBorder(Border.NO_BORDER);
        //        cell.SetPadding(0);
        //        table.AddCell(cell);

        //        cell = new Cell(1, 7)
        //            .Add(new Paragraph($"Page {string.Format(CultureInfo.InvariantCulture, "{0:#,0}", i)} of {string.Format(CultureInfo.InvariantCulture, "{0:#,0}", numberOfPages)}   ")
        //            .SetTextAlignment(TextAlignment.RIGHT)).SetFontSize(smallFontSize);
        //        cell.SetBorder(Border.NO_BORDER);
        //        cell.SetPadding(0);
        //        table.AddCell(cell);

        //        cell = new Cell(1, 3).SetFontSize(smallFontSize);
        //        cell.SetBorder(Border.NO_BORDER);
        //        cell.SetPadding(0);
        //        table.AddCell(cell);

        //        canvas.Add(table).SetFontSize(smallFontSize);
        //        canvas.Close();
        //    }

        //}
        private void btn_Read_Click(object sender, EventArgs e)
        {
            if (dg_Eng.Rows.Count > 0)
            {
                SaveFileDialog sfd = new SaveFileDialog();
                sfd.Filter = "PDF (*.pdf)|*.pdf";
                sfd.FileName = "Engpar.pdf";
                bool fileError = false;
                sfd.InitialDirectory = new DirectoryInfo(Application.StartupPath + "\\HematoxinandEosin\\HematoxinandEosin\\bin\\Debug").FullName;
                //if (sfd.ShowDialog() == DialogResult.OK)
                //{
                if (File.Exists(sfd.FileName))
                {
                    try
                    {
                        File.Delete(sfd.FileName);
                    }
                    catch (IOException ex)
                    {
                        fileError = true;
                        MessageBox.Show("It wasn't possible to write the data to the disk." + ex.Message);
                    }
                }
                if (!fileError)
                {
                    try
                    {
                        //    PdfPTable pdfTable = new PdfPTable(dg_Eng.Columns.Count);
                        //pdfTable.HeaderRows = 1;
                        //pdfTable.DefaultCell.Padding = 3;
                        //    pdfTable.WidthPercentage = 100;
                        //    pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
                        PdfPTable pdfTable = new PdfPTable(4);
                        pdfTable.HorizontalAlignment = 0;
                        pdfTable.TotalWidth = 500f;
                        pdfTable.LockedWidth = true;
                        float[] widths = new float[] { 60f, 30f, 60f, 30f };
                        pdfTable.SetWidths(widths);
                        pdfTable.HeaderRows = 4;
                        
                        PdfPCell cell1 = new PdfPCell();

                        Image img1 = Image.GetInstance(IMG1);
                        cell1.AddElement(img1);
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.BackgroundColor = BaseColor.GRAY;
                        cell1.Colspan = 1;

                        pdfTable.AddCell(cell1);

                        StreamReader file = new System.IO.StreamReader(FilePath);


                        string result = file.ReadToEnd();
                        result = result.Replace('$', '\n');

                        cell1 = new PdfPCell(new Phrase(result));


                        cell1.VerticalAlignment = Element.ALIGN_CENTER;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.BackgroundColor = BaseColor.GRAY;
                        cell1.Colspan = 3;
                        pdfTable.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("For Date :" + listBox_eng.SelectedItem.ToString(), FontFactory.GetFont("Arial", 15, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                        cell1.VerticalAlignment = Element.ALIGN_CENTER;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.BackgroundColor = BaseColor.GRAY;
                        cell1.Colspan = 4;
                        pdfTable.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Generated By :" + RequiredVariables.UserName, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.BackgroundColor = BaseColor.GRAY;
                        cell1.Colspan = 2;
                        pdfTable.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Date & Time : " + DateTime.Now.ToString(), FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.BackgroundColor = BaseColor.GRAY;
                        cell1.Colspan = 2;
                        pdfTable.AddCell(cell1);

                        foreach (DataGridViewColumn column in dg_Eng.Columns)
                        {
                            PdfPCell cell = new PdfPCell(new Phrase(column.HeaderText, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = Element.ALIGN_CENTER;
                            pdfTable.AddCell(cell);
                        }


                        foreach (DataGridViewRow row in dg_Eng.Rows)
                        {
                            // PdfPCell cell = new PdfPCell(new Phrase(row.HeaderText));
                            foreach (DataGridViewCell cell in row.Cells)
                            {
                                try
                                {

                                    cell1 = new PdfPCell(new Phrase(cell.Value.ToString(), FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK)));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    pdfTable.AddCell(cell1);

                                }
                                catch (Exception ex)
                                {
                                    MessageBox.Show("Error :" + ex.Message);
                                }
                            }
                        }
                        
                        
                        using (FileStream stream = new FileStream(sfd.FileName, FileMode.Create))
                        {
                            Document pdfDoc = new Document(PageSize.A4, 55f, 20f, 20f, 10f);
                           
                            // RequiredVariables.filename = @"G:/projects/mukesh/HematoxinandEosin/HematoxinandEosin/bin/Debug/Engpar.pdf";
                            //pdfDoc.NewPage();

                            PdfWriter writer = PdfWriter.GetInstance(pdfDoc, stream);
                            //string FilePath2 = @"G:/projects/mukesh/HematoxinandEosin/HematoxinandEosin/bin/Debug/Engpar.pdf";
                            //int k = getNumberOfPdfPages(FilePath2);
                            pdfDoc.Open();
                            //PdfReader reader = PdfReader.GetPageContent(pdfDoc, stream);

                            
                           
                           // writer.PageEvent = new HeaderFooter();
                            pdfDoc.Add(pdfTable);

                            pdfDoc.Close();

                            //txtList.Text = getNumberOfPdfPages(sfd.FileName).ToString();
                            stream.Close();
                            
                        }
                        string FilePath1 = @"G:/projects/mukesh/HematoxinandEosin/HematoxinandEosin/bin/Debug/Engpar.pdf";
                        
                        AddPageNumber(FilePath1);
                        Process p = new Process();
                        p.StartInfo = new ProcessStartInfo()
                        {
                            CreateNoWindow = true,
                            Verb = "print",
                            FileName = FilePath1  //put the correct path here
                        };
                        p.StartInfo.ErrorDialog = true;
                        p.Start();
                        MessageBox.Show("Data Printed Successfully !!!", "Info");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error :" + ex.Message);
                    }

                }

                //else
                //{
                //    MessageBox.Show("No Record To Export !!!", "Info");
                //}
            }
            else
            {
                MessageBox.Show("No Record To Export !!!", "Info");
            }


        }
        //public ActionResult pdf()
        //{

        //}



        private void btn_Show_Click(object sender, EventArgs e)
        {
            string s2 = "";
            s2 = cmb_Month.SelectedItem.ToString();
            listBox_eng.Items.Clear();

            if (dg_Eng.Rows.Count > 0) dg_Eng.Rows.Clear();

            sqlstr = "";
            sqlstr = "Select DISTINCT TestedOn from EngineeringMode Where Month= '" + s2 + "'";

            DataTable t1 = new DataTable();
            sda = new SqlDataAdapter(sqlstr, con);
            sda.Fill(t1);

            if (t1.Rows.Count > 0)
            {
                sda.Dispose();
                for (int j = 0; j < t1.Rows.Count; j++)
                {
                    listBox_eng.Items.Add(t1.Rows[j]["TestedOn"].ToString());
                }
            }
            else
            {
                MessageBox.Show("No Data was recorded for the Selected month", RequiredVariables.Msgtext, MessageBoxButtons.OK, MessageBoxIcon.Information);
                cmb_Month.Focus();
            }
            con.Close();
        }

        public void pages()
        {
            string ppath = "G:/projects/mukesh/HematoxinandEosin/HematoxinandEosin/bin/Debug/Engpar.pdf";
            using (StreamReader sr = new StreamReader(File.OpenRead(ppath)))
            {
                Regex regex = new Regex(@"/Type\s*/Page[^s]");
                MatchCollection matches = regex.Matches(sr.ReadToEnd());

                //return matches.Count;
            }
            //PdfReader pdfReader = new PdfReader(ppath);
            //int numberOfPages = pdfReader.NumberOfPages;
            //txtList.Text = numberOfPages.ToString();

        }
        public int getNumberOfPdfPages(string    fileName)
        {

            using (StreamReader sr = new StreamReader(File.OpenRead(fileName)))
            {
                Regex regex = new Regex(@"/Type\s*/Page[^s]");
                MatchCollection matches = regex.Matches(sr.ReadToEnd());

                return matches.Count;
            }
        }
        public int getNumberOfPdfPages2(Document document)
        {
            string filename = RequiredVariables.filename + document;
            using (StreamReader sr = new StreamReader(File.OpenRead(filename)))
            {
                Regex regex = new Regex(@"/Type\s*/Page[^s]");
                MatchCollection matches = regex.Matches(sr.ReadToEnd());

                return matches.Count;
            }
        }
        protected void AddPageNumber(string filename)
        {
            string pdffilename = null, mainpdf = null;
            pdffilename = filename ;
            mainpdf = filename;
            //byte[] bytes = File.ReadAllBytes(@"D:\PDFs\Test.pdf");
            byte[] bytes = File.ReadAllBytes(pdffilename);

            string WatermarkLocation = IMG1;
            iTextSharp.text.Image img = iTextSharp.text.Image.GetInstance(WatermarkLocation);
            img.SetAbsolutePosition(100, 100);

            //image.setAbsolutePosition(rect.Left, rect.Top - image.ScaledHeight);
            //PdfDocument doc;

            iTextSharp.text.Font blackFont = FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
            using (MemoryStream stream = new MemoryStream())
            {
                PdfReader reader = new PdfReader(bytes);

                using (PdfStamper stamper = new PdfStamper(reader, stream))
                {
                    int pages = reader.NumberOfPages;
                    string pgcount = null, filename_pdf = null;

                    PdfLayer layer = new PdfLayer("WatermarkLayer", stamper.Writer);

                    filename_pdf = "File Name: " + mainpdf;
                    string s1 = null, s3 = null;
                    for (int i = 1; i <= pages; i++)
                    {
                        pgcount = null;
                        pgcount = "Page " + i.ToString() + " of " + pages;

                        float ph = reader.GetPageSize(i).Height;
                        float pw = reader.GetPageSize(i).Width;

                        s1 = "";
                        s1 = s1 + "Designed & Developed By Pathnsitu Biotechnologies";
                       // ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 50f, 5f, 0);
                        //s1 = "";
                        //s1 = s1 + "Date:";
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 250f, 15f, 0);


                        //s1 = "";
                        //s1 = s1 + "Date:";
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 725f, 15f, 0);
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT,new Phrase(pgcount, blackFont), 568f, 15f, 0);
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 50f, 60f, 0);
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase(s3, blackFont), 650f, 60f, 0);

                        //if (s1.Contains("&"))
                        //{
                        //    s1 = s1.Replace("&", "&&");
                        //}
                        //ColumnText.ShowTextAligned(stamper.GetOverContent(i), Element.ALIGN_CENTER, new Phrase(s1, blackFont), 400f, 580f, 0);
                        ColumnText.ShowTextAligned(stamper.GetOverContent(i), Element.ALIGN_RIGHT, new Phrase(pgcount, blackFont), 550f, 5f, 0);

                        //Water Mark On PDF Files
                        PdfContentByte cb = stamper.GetUnderContent(i);

                        cb.BeginLayer(layer);
                        //cb.SetFontAndSize(BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED), 85);                        
                        cb.SetFontAndSize(BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED), 85);
                        PdfGState gState = new PdfGState();
                        gState.FillOpacity = 0.25f;
                        //gState.FillOpacity = 0.40f;
                        cb.SetColorFill(BaseColor.BLACK);
                        cb.SetGState(gState);

                        cb.BeginText();
                        //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, " Pathnsitu ", ph / 2, pw / 2, 45f);
                        cb.EndText();
                        //"Close" the layer
                        cb.EndLayer();
                        //Water Mark On Pdf Files  
                    }
                }
                bytes = stream.ToArray();
            }
            //File.WriteAllBytes(@"D:\PDFs\Test_1.pdf", bytes);
            File.WriteAllBytes(mainpdf, bytes);

            //if (File.Exists(pdffilename))
            //{
            //    File.Delete(pdffilename);
            //}
        }

        





     
    }
    class HeaderFooter : PdfPageEventHelper
    {
        Font FONT = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL);
        string files;
        public override void OnEndPage(PdfWriter writer, Document document)
        {
            PdfContentByte canvas = writer.DirectContent;
            int pageCount = 0;

            //ColumnText.ShowTextAligned(
            //canvas, Element.ALIGN_LEFT,
            //new Phrase("Header", FONT), 10, 810, 0
            //); 
            int lstpg = writer.PageNumber;
            for (int i = writer.CurrentPageNumber; i <= writer.PageNumber; i++)
                {
                    ColumnText.ShowTextAligned(
                    canvas, Element.ALIGN_RIGHT,
                    //new Phrase("Page number " + i + " of "+ RequiredVariables.pages , FONT), 550, 6, 0
                    new Phrase("Page number " + i + " of " + lstpg.ToString(), FONT), 550, 6, 0
                  );
                }
           
        }
        public void pages()
        {
            string ppath = "G:/projects/mukesh/HematoxinandEosin/HematoxinandEosin/bin/Debug/Engpar.pdf";
            using (StreamReader sr = new StreamReader(File.OpenRead(ppath)))
            {
                Regex regex = new Regex(@"/Type\s*/Page[^s]");
                MatchCollection matches = regex.Matches(sr.ReadToEnd());
                int k = matches.Count;
                //return matches.Count;
            }
            //PdfReader pdfReader = new PdfReader(ppath);
            //int numberOfPages = pdfReader.NumberOfPages;
            //txtList.Text = numberOfPages.ToString();

        }
    }
}
