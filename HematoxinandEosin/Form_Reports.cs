using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using iTextSharp.text.pdf;
using iTextSharp.text;
using System.Data.SqlClient;
//using System.IO;
using System.Diagnostics;
using System.Drawing.Printing;

using Image = iTextSharp.text.Image;




namespace HematoxinandEosin
{
    public partial class Form_Reports : Form
    {
        string Constr = "";//"Data Source=SYSPSENG006;User ID=sa;Password=sree@pns2013;Initial Catalog=PNSHE;Pooling=false;Max Pool Size=400;workstation id =SYSPSENG006";
        SqlConnection con = new SqlConnection();
        SqlCommand cmd = new SqlCommand();
        // DataTable table = new DataTable("table");
        SqlDataAdapter sda = new SqlDataAdapter();
        DataTable table = new DataTable("table");
        DateTime d1;
        string sqlstr;
        string IMG1 = "Images/logos.png";
        //string FilePath = Path.Combine(@"G:\projects\mukesh\HematoxinandEosin\HematoxinandEosin\bin\Debug\Lab.txt");
        string FilePath = Application.StartupPath + "\\Lab.txt";
        string s1 = "";
        string s5 = "";
        public Form_Reports()
        {
            InitializeComponent();
        }

        private void btn_close_Click(object sender, EventArgs e)
        {
            this.Close();
            RequiredVariables.btnReports = true;
        }

        private void btn_ExportPdf_Click(object sender, EventArgs e)
        {

                if (dg_ProtoRun.Rows.Count > 0)
                {
                    SaveFileDialog sfd = new SaveFileDialog();
                    sfd.Filter = "PDF (*.pdf)|*.pdf";
                    sfd.FileName = "Output.pdf";
                    bool fileError = false;
                    if (sfd.ShowDialog() == DialogResult.OK)
                    {
                        if (File.Exists(sfd.FileName))
                        {
                            try
                            {
                                File.Delete(sfd.FileName);
                            }
                            catch (IOException ex)
                            {
                                fileError = true;
                                MessageBox.Show("It wasn't possible to write the data to the disk." + ex.Message);
                            }
                        }
                        if (!fileError)
                        {
                            try
                            {
                            PdfPTable pdfTable = new PdfPTable(9);
                            pdfTable.HorizontalAlignment = 0;
                            pdfTable.TotalWidth = 500f;
                            pdfTable.LockedWidth = true;
                            float[] widths = new float[] { 0f, 40f, 40f, 40f, 30f, 35f, 40f, 40f, 40f };
                            pdfTable.SetWidths(widths);
                            pdfTable.HeaderRows = 4;
                            PdfPCell cell1 = new PdfPCell();

                            Image img1 = Image.GetInstance(IMG1);
                            cell1.AddElement(img1);
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 3;

                            pdfTable.AddCell(cell1);

                            StreamReader file = new System.IO.StreamReader(FilePath);


                            string result = file.ReadToEnd();
                            result = result.Replace('$', '\n');

                            cell1 = new PdfPCell(new Phrase(result));


                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 6;
                            pdfTable.AddCell(cell1);
                            s1 = dateTimePicker1.Value.ToString().Substring(0, 10);
                            cell1 = new PdfPCell(new Phrase("Protocol List   " + " For Date :" + s1, FontFactory.GetFont("Arial", 15, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 9;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Generated By :" + RequiredVariables.UserName, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 4;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Date & Time : " + DateTime.Now.ToString(), FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 5;
                            pdfTable.AddCell(cell1);

                            //foreach (DataGridViewColumn column in dg_ProtoRun.Columns)
                            //{

                            //PdfPCell cell = new PdfPCell(new Phrase(column.HeaderText, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            //column.Width =cell.

                            //for (int i = 1; i < dg_ProtoRun.Columns.Count - 1; i++)
                            //{
                            foreach (DataGridViewColumn column in dg_ProtoRun.Columns)
                            {
                                PdfPCell cell = new PdfPCell(new Phrase(column.HeaderText, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                                pdfTable.AddCell(cell);
                            }
                            // }
                            //}


                            foreach (DataGridViewRow row in dg_ProtoRun.Rows)
                            {
                                //PdfPCell cell = new PdfPCell(new Phrase(row.HeaderText));
                                foreach (DataGridViewCell cell in row.Cells)
                                {
                                    try
                                    {
                                        cell1 = new PdfPCell(new Phrase(cell.Value.ToString(), FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK)));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        pdfTable.AddCell(cell1);
                                    }
                                    catch (Exception ex)
                                        {
                                            MessageBox.Show("Error :" + ex.Message);
                                        }
                                    }
                                }

                                using (FileStream stream = new FileStream(sfd.FileName, FileMode.Create))
                                {
                                    Document pdfDoc = new Document(PageSize.A4, 55f, 20f, 20f, 10f);
                                    PdfWriter.GetInstance(pdfDoc, stream);
                                    pdfDoc.Open();
                                    pdfDoc.Add(pdfTable);
                                    pdfDoc.Close();
                                    stream.Close();
                                }

                                MessageBox.Show("Data Exported Successfully !!!", "Info");
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show("Error :" + ex.Message);
                            }

                        }
                    }
                }
                else
                {
                    MessageBox.Show("No Record To Export !!!", "Info");
                }

                //PdfPTable pdfTable = new PdfPTable(dg_Users.ColumnCount);
                //pdfTable.DefaultCell.Padding = 3;
                //pdfTable.WidthPercentage = 30;
                //pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfTable.DefaultCell.BorderWidth = 1;

                ////Adding Header row
                //foreach (DataGridViewColumn column in dg_Users.Columns)
                //{
                //    PdfPCell cell = new PdfPCell(new Phrase(column.HeaderText));
                //    cell.BackgroundColor = new iTextSharp.text.BaseColor(240, 240, 240);
                //    pdfTable.AddCell(cell);
                //}

                ////Adding DataRow
                //foreach (DataGridViewRow row in dg_Users.Rows)
                //{
                //    foreach (DataGridViewCell cell in row.Cells)
                //    {
                //        try
                //        {
                //            pdfTable.AddCell(cell.Value.ToString());
                //        }
                //        catch { }
                //    }
                //}

                ////Exporting to PDF
                //string folderPath = "C:\\PDFs\\";
                //if (!Directory.Exists(folderPath))
                //{
                //    Directory.CreateDirectory(folderPath);
                //}
                //using (FileStream stream = new FileStream(folderPath + "DataGridViewExport.pdf", FileMode.Create))
                //{
                //    Document pdfDoc = new Document(PageSize.A2, 10f, 10f, 10f, 0f);
                //    PdfWriter.GetInstance(pdfDoc, stream);
                //    pdfDoc.Open();
                //    pdfDoc.Add(pdfTable);
                //    pdfDoc.Close();
                //    stream.Close();
                //}



                //public static string[] GetTableExcel(string strFileName)
                //{
                //    string[] strTables = new string[100];
                //    Catalog oCatlog = new Catalog();
                //    ADOX.Table oTable = new ADOX.Table();
                //    ADODB.Connection oConn = new ADODB.Connection();
                //    oConn.Open("Provider=Microsoft.Jet.OleDb.4.0; Data Source = " + strFileName + "; Extended Properties = \"Excel 8.0;HDR=Yes;IMEX=1\";", "", "", 0);
                //    oCatlog.ActiveConnection = oConn;
                //    if (oCatlog.Tables.Count > 0)
                //    {
                //        int item = 0;
                //        foreach (ADOX.Table tab in oCatlog.Tables)
                //        {
                //            if (tab.Type == "TABLE")
                //            {
                //                strTables[item] = tab.Name;
                //                item++;
                //            }
                //        }
                //    }
                //    return strTables;
                //}
                //public static DataTable GetDataTableExcel(string strFileName, string Table)
                //{
                //    System.Data.OleDb.OleDbConnection conn = new System.Data.OleDb.OleDbConnection("Provider=Microsoft.Jet.OleDb.4.0; Data Source = " + strFileName + "; Extended Properties = \"Excel 8.0;HDR=Yes;IMEX=1\";");
                //    conn.Open();
                //    string strQuery = "SELECT * FROM [" + Table + "]";
                //    System.Data.OleDb.OleDbDataAdapter adapter = new System.Data.OleDb.OleDbDataAdapter(strQuery, conn);
                //    System.Data.DataSet ds = new System.Data.DataSet();
                //    adapter.Fill(ds);
                //    return ds.Tables[0];
                //}
           
        }

        private void rdn_Weekly_CheckedChanged(object sender, EventArgs e)
        {
            lbl_toDate.Visible = true;
            dateTimePicker2.Visible = true;
            cmb_Month.Visible = false;
            dateTimePicker2.Value = DateTime.Today;
            AddDaysToDatePicker(-7, dateTimePicker2, dateTimePicker1);
            //AddDaysToDatePicker(7, dateTimePicker1, dateTimePicker2);
        }

        private void rdn_Daily_CheckedChanged(object sender, EventArgs e)
        {
            lbl_toDate.Visible = false;
            dateTimePicker2.Visible = false;
            dateTimePicker1.Value = DateTime.Today;
            cmb_Month.Visible = false;
          //dateTimePicker1.Value
          
        }

        private void rdn_Monthly_CheckedChanged(object sender, EventArgs e)
        {
            lbl_toDate.Visible = true;
            dateTimePicker2.Visible = true;
            cmb_Month.Visible = true;
            cmb_Month.Text = "Select Month";
          
        }

        private void AddDaysToDatePicker(int days, DateTimePicker startDTP, DateTimePicker endDTP)
        {
            endDTP.Value = startDTP.Value.AddDays(days);
        
        }
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

    
        private void Form_Reports_Load(object sender, EventArgs e)
        {
           
        }

        private void cmb_Month_SelectedIndexChanged(object sender, EventArgs e)
        {
             string s = "";
            string sjs = "";
            string sje = "";
            s = DateTime.Now.ToString("dd-MM-yyyy");

            sje = DateTime.Now.ToString("yyyy");
            int year = Int32.Parse(sje);

           
            
            //DateTime d3 = Convert.ToDateTime(sje);
            //if(DateTime.IsLeapYear(d3))
            //DateTime d1 = Convert.ToDateTime(s);

            //cmb_Month.Text= s;
            if (cmb_Month.SelectedItem.ToString() == "January")
            {
                sjs = "01-01-" + sje;
                DateTime d1 = Convert.ToDateTime(sjs);
               // sje = "31-01-2023";
                //DateTime d2 = Convert.ToDateTime(sje);
                dateTimePicker1.Value = d1;
                //dateTimePicker2.Value = d2;
                
                //dateTimePicker2.Value = d1 - d2;
                //dateTimePicker1.Value = "01-02-2023";
               
                AddDaysToDatePicker(30, dateTimePicker1, dateTimePicker2);
            }
            
            if (cmb_Month.SelectedItem.ToString() == "February")
            {
                if (DateTime.IsLeapYear(year))
                {
                    sjs = "01-02-" + sje;
                    DateTime d1 = Convert.ToDateTime(sjs);
                    dateTimePicker1.Value = d1;
                    AddDaysToDatePicker(28, dateTimePicker1, dateTimePicker2);
                }
                else
                {
                    sjs = "01-02-" + sje;
                    DateTime d1 = Convert.ToDateTime(sjs);
                    dateTimePicker1.Value = d1;
                    AddDaysToDatePicker(27, dateTimePicker1, dateTimePicker2);
                }
            }
            if (cmb_Month.SelectedItem.ToString() == "March")
            {
                sjs = "01-03-" + sje;
                DateTime d1 = Convert.ToDateTime(sjs);
                dateTimePicker1.Value = d1;
                AddDaysToDatePicker(30, dateTimePicker1, dateTimePicker2);
            }
            if (cmb_Month.SelectedItem.ToString() == "April" )
            {
                sjs = "01-04-" + sje;
                DateTime d1 = Convert.ToDateTime(sjs);
                dateTimePicker1.Value = d1;
                AddDaysToDatePicker(29, dateTimePicker1, dateTimePicker2);

            }
            if (cmb_Month.SelectedItem.ToString() == "May")
            {
                sjs = "01-05-" + sje;
                DateTime d1 = Convert.ToDateTime(sjs);
                dateTimePicker1.Value = d1;
                AddDaysToDatePicker(30, dateTimePicker1, dateTimePicker2);

            }
            if ( cmb_Month.SelectedItem.ToString() == "June" )
            {
                sjs = "01-06-" + sje;
                DateTime d1 = Convert.ToDateTime(sjs);
                dateTimePicker1.Value = d1;
                AddDaysToDatePicker(29, dateTimePicker1, dateTimePicker2);

            }
            if ( cmb_Month.SelectedItem.ToString() == "July" )
            {
                sjs = "01-07-" + sje;
                DateTime d1 = Convert.ToDateTime(sjs);
                dateTimePicker1.Value = d1;
                AddDaysToDatePicker(30, dateTimePicker1, dateTimePicker2);

            }
            if ( cmb_Month.SelectedItem.ToString() == "August" )
            {
                sjs = "01-08-" + sje;
                DateTime d1 = Convert.ToDateTime(sjs);
                dateTimePicker1.Value = d1;
                AddDaysToDatePicker(30, dateTimePicker1, dateTimePicker2);

            }
            if ( cmb_Month.SelectedItem.ToString() == "September" )
            {
                sjs = "01-09-" + sje;
                DateTime d1 = Convert.ToDateTime(sjs);
                dateTimePicker1.Value = d1;
                AddDaysToDatePicker(29, dateTimePicker1, dateTimePicker2);

            }
            if (cmb_Month.SelectedItem.ToString() == "October")
            {
                sjs = "01-10-" + sje;
                DateTime d1 = Convert.ToDateTime(sjs);
                dateTimePicker1.Value = d1;
                AddDaysToDatePicker(30, dateTimePicker1, dateTimePicker2);

            }
            if ( cmb_Month.SelectedItem.ToString() == "November")
            {
                sjs = "01-11-" + sje;
                DateTime d1 = Convert.ToDateTime(sjs);
                dateTimePicker1.Value = d1;
                AddDaysToDatePicker(29, dateTimePicker1, dateTimePicker2);

            }
            if (cmb_Month.SelectedItem.ToString() == "December")
            {
                sjs = "01-12-" + sje;
                DateTime d1 = Convert.ToDateTime(sjs);
                dateTimePicker1.Value = d1;
                AddDaysToDatePicker(30, dateTimePicker1, dateTimePicker2);

            }
         }

        //private void s(object sender, EventArgs e)
        //{

        //}

        private void cmb_Month_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }
       
        //public void retrievedaily()
        //{
        //    if (rdn_Daily.Checked == true)
        //    {

        //        dg_ProtoRun.Rows.Clear();
        //        s1 = dateTimePicker1.Value.ToString().Substring(0, 10);
        //        sqlstr = "Select COUNT(*) from ProtocolRun Where PerformedOn= '" + s1 + "'";
        //        cmd = new SqlCommand(sqlstr, con);
        //        int result = (int)cmd.ExecuteScalar();
        //        if (con.State == ConnectionState.Closed)
        //            con.Open();
        //        if (result == 0)
        //        {
        //            MessageBox.Show("No Data Available for this period", RequiredVariables.Msgtext, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        //            return;
        //        }
        //        if (result > 0)
        //        {
        //            s1 = dateTimePicker1.Value.ToString().Substring(0, 10);


        //            sqlstr = "";
        //            sqlstr = "Select ProtocolName,PerformedBy,JarName,Temp,RackNo,ArrivedTime,Exittime from ProtocolRun Where PerformedOn= '" + s1 + "' order by slno";
        //        }
        //        if (con.State == ConnectionState.Closed)
        //            con.Open();
        //        cmd = new SqlCommand(sqlstr, con);
        //        sda = new SqlDataAdapter(cmd);
        //        table = new DataTable();
        //        sda.Fill(table);
        //        //if(table.Rows.Count>)
        //        //DateTime d4 = Convert.ToDateTime(s1);
        //        //DateTime d5 = Convert.ToDateTime(s5);

        //        if (dg_ProtoRun.Rows.Count > 0) dg_ProtoRun.Rows.Clear();

        //        for (int i = 1; i < table.Rows.Count-1; i++)
        //        {

        //            dg_ProtoRun.Rows.Add();

        //            int j = 1;
        //            foreach (DataGridViewRow row in dg_ProtoRun.Rows)
        //            {
        //                // dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["sln"].Value = j; j++;
        //            }
        //            //dg_ProtoRun.Columns["Date"].Visible=false;
        //            //dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["dtime"].Value = table.Rows[i]["PerformedOn"].ToString();
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["protoName"].Value = table.Rows[i]["ProtocolName"].ToString();
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["performedBy"].Value = table.Rows[i]["PerformedBy"].ToString(); ;
        //            //dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["heater"].Value = table.Rows[i]["Heater"].ToString();

        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["jar"].Value = table.Rows[i]["JarName"].ToString(); ;
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["temp"].Value = table.Rows[i]["Temp"].ToString();
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["rack"].Value = table.Rows[i]["RackNo"].ToString();
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["arrivedTime"].Value = table.Rows[i]["ArrivedTime"].ToString().Substring(11, 8);
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["exit"].Value = table.Rows[i]["Exittime"].ToString().Substring(11, 8);
        //            DateTime d2;
        //            string s2 = "";
        //            s2 = table.Rows[i]["ArrivedTime"].ToString();
        //            d2 = Convert.ToDateTime(s2);

        //            DateTime d3;
        //            string s3 = "";
        //            s3 = table.Rows[i]["Exittime"].ToString();
        //            d3 = Convert.ToDateTime(s3);
        //            if (d2 != null && d3 != null)
        //            {
        //                TimeSpan ts = d3 - d2;
        //                // DateTime dt2 = Convert.ToDateTime(ts);

        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["duration"].Value = ts.ToString();
        //            }
        //        }
        //    }
        //}
        public void retrievedata()
        {
            if (rdn_Daily.Checked == true)
            {

                dg_ProtoRun.Rows.Clear();
                s1 = dateTimePicker1.Value.ToString().Substring(0, 10);
                sqlstr = "Select COUNT(*) from ProtocolRun Where PerformedOn= '" + s1 + "'";
                cmd = new SqlCommand(sqlstr, con);
                int result = (int)cmd.ExecuteScalar();
                if (con.State == ConnectionState.Closed)
                    con.Open();
                if (result == 0)
                {
                    MessageBox.Show("No Data Available for this period", RequiredVariables.Msgtext, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    return;
                }
                if (result > 0)
                {
                    s1 = dateTimePicker1.Value.ToString().Substring(0, 10);


                    sqlstr = "";
                    sqlstr = "Select PerformedOn,ProtocolName,PerformedBy,JarName,Temp,RackNo,ArrivedTime,Exittime from ProtocolRun Where PerformedOn= '" + s1 + "' order by slno";
                }
            }
            if (rdn_Weekly.Checked == true)
            {

                dg_ProtoRun.Rows.Clear();
                
                s1 = dateTimePicker1.Value.ToString().Substring(0, 10);
                s5 = dateTimePicker2.Value.ToString().Substring(0, 10);
                sqlstr = "";
                sqlstr = "Select COUNT(*) from ProtocolRun Where PerformedOn  >= '" + s1 + "' and  PerformedOn <='" + s5 + "'";
                cmd = new SqlCommand(sqlstr, con);
                int result = (int)cmd.ExecuteScalar();
                if (con.State == ConnectionState.Closed)
                    con.Open();
                if (result == 0)
                {
                    MessageBox.Show("No Data Available for this period", RequiredVariables.Msgtext, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    return;
                }
                if (result > 0)
                {

                    sqlstr = "Select PerformedOn,ProtocolName,PerformedBy,JarName,Temp,RackNo,ArrivedTime,Exittime from ProtocolRun Where PerformedOn  >= '" + s1 + "' and  PerformedOn <='" + s5 + "'  order by slno";
                }
            }
            if (rdn_Monthly.Checked == true)
            {

                dg_ProtoRun.Rows.Clear();
                if (cmb_Month.Text == "")
                {
                    MessageBox.Show("Please enter the month", RequiredVariables.Msgtext, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                }
                if (cmb_Month.Text != "")
                {
                    sqlstr = "";
                    //int result = 0;
                    sqlstr = "Select COUNT(*) from ProtocolRun Where Month='" + cmb_Month.Text + "'";
                    cmd = new SqlCommand(sqlstr, con);
                    int result1 = (int)cmd.ExecuteScalar();
                    if (con.State == ConnectionState.Closed)
                        con.Open();
                    if (result1 == 0)
                    {
                        MessageBox.Show("No Data Available for this period");
                        return;
                    }
                    if (result1 > 0)
                    {
                        s1 = dateTimePicker1.Value.ToString().Substring(0, 10);
                        s5 = dateTimePicker2.Value.ToString().Substring(0, 10);


                        sqlstr = "Select PerformedOn,ProtocolName,PerformedBy,JarName,Temp,RackNo,ArrivedTime,Exittime from ProtocolRun Where PerformedOn  BETWEEN '" + s1 + "' and '" + s5 + "'  order by slno";
                    }
                }
            }
            if (con.State == ConnectionState.Closed)
                con.Open();
            cmd = new SqlCommand(sqlstr, con);
            sda = new SqlDataAdapter(cmd);
            table = new DataTable();
            sda.Fill(table);
        //if(table.Rows.Count>)
            //DateTime d4 = Convert.ToDateTime(s1);
            //DateTime d5 = Convert.ToDateTime(s5);
                
            if (dg_ProtoRun.Rows.Count > 0) dg_ProtoRun.Rows.Clear();
               
            for (int i = 0; i < table.Rows.Count; i++)
            {

                dg_ProtoRun.Rows.Add();

                int j = 1;
                foreach (DataGridViewRow row in dg_ProtoRun.Rows)
                {
                    // dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["sln"].Value = j; j++;
                }

                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["dtime"].Value = table.Rows[i]["PerformedOn"].ToString();
                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["protoName"].Value = table.Rows[i]["ProtocolName"].ToString();
                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["performedBy"].Value = table.Rows[i]["PerformedBy"].ToString(); ;
                //dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["heater"].Value = table.Rows[i]["Heater"].ToString();
                    
                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["jar"].Value = table.Rows[i]["JarName"].ToString(); ;
                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["temp"].Value = table.Rows[i]["Temp"].ToString();
                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["rack"].Value = table.Rows[i]["RackNo"].ToString();
                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["arrivedTime"].Value = table.Rows[i]["ArrivedTime"].ToString().Substring(11, 8);
                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["exit"].Value = table.Rows[i]["ArrivedTime"].ToString().Substring(11, 8);  //Exittime
                DateTime d2; 
                string s2 = "";
                s2 = table.Rows[i]["ArrivedTime"].ToString();
                d2 = Convert.ToDateTime(s2);

                DateTime d3;
                string s3 = "";
                s3 = table.Rows[i]["ArrivedTime"].ToString();  //Exittime
                d3 = Convert.ToDateTime(s3);
                if (d2 != null && d3 != null)                    
                {
                    TimeSpan ts = d2-d3;
                    //DateTime dt2 = Convert.ToDateTime(ts);

                    dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["duration"].Value = ts.ToString();
                }             
            }
        }
        private void btn_Show_Click(object sender, EventArgs e)
        {
          //  retrievedaily();
            retrievedata();
        //    if (rdn_Daily.Checked == true)
        //    {

        //         dg_ProtoRun.Rows.Clear();
        //        s1 = dateTimePicker1.Value.ToString().Substring(0, 10);
              
        //        sqlstr = "";
        //        sqlstr = "Select ProtocolName,PerformedBy,Heater,Temp,JarName,RackNo,ArrivedTime,Exittime from ProtocolRun Where PerformedOn= '" + s1 + "' order by slno";
             
        //        sda = new SqlDataAdapter(sqlstr, con);
        //        cmd = new SqlCommand(sqlstr, con);
        //        table = new DataTable();
        //        sda.Fill(table);
        //        if (con.State == ConnectionState.Closed)
        //            con.Open();
        //        cmd.ExecuteNonQuery();
        //        if (dg_ProtoRun.Rows.Count > 0) dg_ProtoRun.Rows.Clear();
        //          for (int i = 0; i < table.Rows.Count; i++)
        //        {
                    
        //                dg_ProtoRun.Rows.Add();
                   
        //            int j = 1;
        //            foreach (DataGridViewRow row in dg_ProtoRun.Rows)
        //            {
        //               // dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["sln"].Value = j; j++;
        //            }
                  

        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["protoName"].Value = table.Rows[i]["ProtocolName"].ToString();
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["performedBy"].Value = table.Rows[i]["PerformedBy"].ToString(); ;
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["heater"].Value = table.Rows[i]["Heater"].ToString();
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["temp"].Value = table.Rows[i]["Temp"].ToString();
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["jar"].Value = table.Rows[i]["JarName"].ToString(); ;
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["rack"].Value = table.Rows[i]["RackNo"].ToString();
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["arrivedTime"].Value = table.Rows[i]["ArrivedTime"].ToString().Substring(11, 8);
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["exit"].Value = table.Rows[i]["Exittime"].ToString().Substring(11, 8);
        //                DateTime d2;
        //                string  s2 = "";
        //                s2 =  table.Rows[i]["ArrivedTime"].ToString();
        //                d2 = Convert.ToDateTime(s2);
                    
        //                DateTime d3;
        //                string s3 = "";
        //                s3 = table.Rows[i]["Exittime"].ToString();
        //                d3 = Convert.ToDateTime(s3);
        //            if (d2 != null && d3 != null)
        //            {
        //                TimeSpan ts = d3 - d2;
        //                // DateTime dt2 = Convert.ToDateTime(ts);

        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["duration"].Value =  ts.ToString();
        //            }
                    

        //        }
        //    }
        //    if (rdn_Weekly.Checked == true)
        //    {

        //       dg_ProtoRun.Rows.Clear();
        //        s1 = dateTimePicker1.Value.ToString().Substring(0, 10);
        //        s5 = dateTimePicker2.Value.ToString().Substring(0, 10);

        //        sqlstr = "";
        //        sqlstr = "Select ProtocolName,PerformedBy,Heater,Temp,JarName,RackNo,ArrivedTime,Exittime from ProtocolRun Where PerformedOn  BETWEEN '" + s1 + "' and '"+s5+"'  order by slno";

        //        sda = new SqlDataAdapter(sqlstr, con);
        //        cmd = new SqlCommand(sqlstr, con);
        //        table = new DataTable();
        //        sda.Fill(table);
        //        if (con.State == ConnectionState.Closed)
        //            con.Open();
        //        cmd.ExecuteNonQuery();
        //        if (dg_ProtoRun.Rows.Count > 0) dg_ProtoRun.Rows.Clear();
        //        for (int i = 0; i < table.Rows.Count; i++)
        //        {

        //            dg_ProtoRun.Rows.Add();

        //            int j = 1;
        //            foreach (DataGridViewRow row in dg_ProtoRun.Rows)
        //            {
        //                // dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["sln"].Value = j; j++;
        //            }


        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["protoName"].Value = table.Rows[i]["ProtocolName"].ToString();
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["performedBy"].Value = table.Rows[i]["PerformedBy"].ToString(); ;
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["heater"].Value = table.Rows[i]["Heater"].ToString();
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["temp"].Value = table.Rows[i]["Temp"].ToString();
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["jar"].Value = table.Rows[i]["JarName"].ToString(); ;
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["rack"].Value = table.Rows[i]["RackNo"].ToString();
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["arrivedTime"].Value = table.Rows[i]["ArrivedTime"].ToString();
        //            dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["exit"].Value = table.Rows[i]["Exittime"].ToString();
        //            DateTime d2;
        //            string s2 = "";
        //            s2 = table.Rows[i]["ArrivedTime"].ToString();
        //            d2 = Convert.ToDateTime(s2);

        //            DateTime d3;
        //            string s3 = "";
        //            s3 = table.Rows[i]["Exittime"].ToString();
        //            d3 = Convert.ToDateTime(s3);
        //            if (d2 != null && d3 != null)
        //            {
        //                TimeSpan ts = d3 - d2;
        //                // DateTime dt2 = Convert.ToDateTime(ts);

        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["duration"].Value = ts.ToString();
        //            }


        //        }
        //    }
        //    if (rdn_Monthly.Checked == true)
        //    {

        //        dg_ProtoRun.Rows.Clear();
        //        if (cmb_Month.Text == "")
        //        {
        //            MessageBox.Show("");
        //        }
        //        if (cmb_Month.Text != "")
        //        {
        //            s1 = dateTimePicker1.Value.ToString().Substring(0, 10);
        //        s5 = dateTimePicker2.Value.ToString().Substring(0, 10);

        //        sqlstr = "";
        //        sqlstr = "Select ProtocolName,PerformedBy,Heater,Temp,JarName,RackNo,ArrivedTime,Exittime from ProtocolRun Where PerformedOn  BETWEEN '" + s1 + "' and '" + s5 + "'  order by slno";

        //        sda = new SqlDataAdapter(sqlstr, con);
        //        cmd = new SqlCommand(sqlstr, con);
        //        table = new DataTable();
        //        sda.Fill(table);
        //        if (con.State == ConnectionState.Closed)
        //            con.Open();
        //        cmd.ExecuteNonQuery();
        //        if (dg_ProtoRun.Rows.Count > 0) dg_ProtoRun.Rows.Clear();
        //            for (int i = 0; i < table.Rows.Count; i++)
        //            {

        //                dg_ProtoRun.Rows.Add();

        //                int j = 1;
        //                foreach (DataGridViewRow row in dg_ProtoRun.Rows)
        //                {
        //                    // dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["sln"].Value = j; j++;
        //                }


        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["protoName"].Value = table.Rows[i]["ProtocolName"].ToString();
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["performedBy"].Value = table.Rows[i]["PerformedBy"].ToString(); ;
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["heater"].Value = table.Rows[i]["Heater"].ToString();
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["temp"].Value = table.Rows[i]["Temp"].ToString();
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["jar"].Value = table.Rows[i]["JarName"].ToString(); ;
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["rack"].Value = table.Rows[i]["RackNo"].ToString();
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["arrivedTime"].Value = table.Rows[i]["ArrivedTime"].ToString();
        //                dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["exit"].Value = table.Rows[i]["Exittime"].ToString();
        //                DateTime d2;
        //                string s2 = "";
        //                s2 = table.Rows[i]["ArrivedTime"].ToString();
        //                d2 = Convert.ToDateTime(s2);

        //                DateTime d3;
        //                string s3 = "";
        //                s3 = table.Rows[i]["Exittime"].ToString();
        //                d3 = Convert.ToDateTime(s3);
        //                if (d2 != null && d3 != null)
        //                {
        //                    TimeSpan ts = d3 - d2;
        //                    // DateTime dt2 = Convert.ToDateTime(ts);

        //                    dg_ProtoRun.Rows[dg_ProtoRun.Rows.Count - 1].Cells["duration"].Value = ts.ToString();
        //                }

        //            }
        //        }
        //    }
        }
        private void Form_Reports_Load_1(object sender, EventArgs e)
        {
             
        }

        private void textBox1_KeyPress(object sender, KeyPressEventArgs e)
        {
          
        }

        private void btn_Print_Click(object sender, EventArgs e)
        {
            if (rdn_Daily.Checked == true)
            {
                if (dg_ProtoRun.Rows.Count > 0)
                {
                    PrintDocument Pd = new PrintDocument();
                    SaveFileDialog sfd = new SaveFileDialog();
                    sfd.Filter = "PDF (*.pdf)|*.pdf";
                    sfd.FileName = "RunProtocol.pdf";
                    bool fileError = false;
                    sfd.InitialDirectory = new DirectoryInfo(Application.StartupPath + "\\HematoxinandEosin\\HematoxinandEosin\\bin\\Debug").FullName;
                    if (File.Exists(sfd.FileName))
                    {

                        try
                        {
                            File.Delete(sfd.FileName);
                        }
                        catch (IOException ex)
                        {
                            fileError = true;
                            MessageBox.Show("It wasn't possible to write the data to the disk." + ex.Message);
                        }
                    }
                    if (!fileError)
                    {
                        try
                        {
                            //PdfPTable pdfTable = new PdfPTable(dg_ProtoRun.Columns.Count);
                            //pdfTable.HeaderRows = 1;

                            //pdfTable.DefaultCell.Padding = 3;
                            //pdfTable.WidthPercentage = 100;
                            //pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
                            PdfPTable pdfTable = new PdfPTable(9);
                            pdfTable.HorizontalAlignment = 0;
                            pdfTable.TotalWidth = 500f;
                            pdfTable.LockedWidth = true;
                            float[] widths = new float[] { 0f, 40f, 40f, 40f, 30f, 35f,40f,40f,40f };
                            pdfTable.SetWidths(widths);
                            pdfTable.HeaderRows = 4;
                            PdfPCell cell1 = new PdfPCell();

                            Image img1 = Image.GetInstance(IMG1);
                            cell1.AddElement(img1);
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 3;

                            pdfTable.AddCell(cell1);

                            StreamReader file = new System.IO.StreamReader(FilePath);


                            string result = file.ReadToEnd();
                            result = result.Replace('$', '\n');

                            cell1 = new PdfPCell(new Phrase(result));


                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 6;
                            pdfTable.AddCell(cell1);
                            s1 = dateTimePicker1.Value.ToString().Substring(0, 10);
                            cell1 = new PdfPCell(new Phrase("Protocol List   " + " For Date :" + s1, FontFactory.GetFont("Arial", 15, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 9;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Generated By :" + RequiredVariables.UserName, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 4;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Date & Time : " + DateTime.Now.ToString(), FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 5;
                            pdfTable.AddCell(cell1);

                            //foreach (DataGridViewColumn column in dg_ProtoRun.Columns)
                            //{

                            //PdfPCell cell = new PdfPCell(new Phrase(column.HeaderText, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            //column.Width =cell.

                            //for (int i = 1; i < dg_ProtoRun.Columns.Count - 1; i++)
                            //{
                                foreach (DataGridViewColumn column in dg_ProtoRun.Columns)
                                {
                                    PdfPCell cell = new PdfPCell(new Phrase(column.HeaderText, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                                    pdfTable.AddCell(cell);
                                }
                           // }
                            //}


                            foreach (DataGridViewRow row in dg_ProtoRun.Rows)
                            {
                                //PdfPCell cell = new PdfPCell(new Phrase(row.HeaderText));
                                foreach (DataGridViewCell cell in row.Cells)
                                {
                                    try
                                    {
                                        cell1 = new PdfPCell(new Phrase(cell.Value.ToString(), FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK)));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        pdfTable.AddCell(cell1);
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show("Error :" + ex.Message);
                                    }
                                }
                            }

                            using (FileStream stream = new FileStream(sfd.FileName, FileMode.Create))
                            {
                                Document pdfDoc = new Document(PageSize.A4, 55f, 20f, 30f, 70f);
                                PdfWriter.GetInstance(pdfDoc, stream);
                                pdfDoc.Open();
                                pdfDoc.Add(pdfTable);
                                pdfDoc.Close();
                                stream.Close();
                            }


                            //For printing please enable this lines 
                            string FilePath1 = @"G:/projects/mukesh/HematoxinandEosin/HematoxinandEosin/bin/Debug/RunProtocol.pdf";
                            AddPageNumber(FilePath1);
                            Process p = new Process();
                            p.StartInfo = new ProcessStartInfo()
                            {
                                CreateNoWindow = true,
                                Verb = "print",
                                FileName = FilePath1  //put the correct path here
                            };
                            p.StartInfo.ErrorDialog = true;
                            p.Start();
                            MessageBox.Show("Data Printed Successfully !!!", "Info");
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error :" + ex.Message);
                        }

                    }
                }
                else
                {
                    MessageBox.Show("No Record To Print !!!", "Info");
                }
            }

            if (rdn_Weekly.Checked == true)
            {
                if (dg_ProtoRun.Rows.Count > 0)
                {
                    PrintDocument Pd = new PrintDocument();
                    SaveFileDialog sfd = new SaveFileDialog();
                    sfd.Filter = "PDF (*.pdf)|*.pdf";
                    sfd.FileName = "RunProtocol.pdf";
                    bool fileError = false;
                    sfd.InitialDirectory = new DirectoryInfo(Application.StartupPath + "\\HematoxinandEosin\\HematoxinandEosin\\bin\\Debug").FullName;
                    if (File.Exists(sfd.FileName))
                    {

                        try
                        {
                            File.Delete(sfd.FileName);
                        }
                        catch (IOException ex)
                        {
                            fileError = true;
                            MessageBox.Show("It wasn't possible to write the data to the disk." + ex.Message);
                        }
                    }
                    if (!fileError)
                    {
                        try
                        {
                            //PdfPTable pdfTable = new PdfPTable(dg_ProtoRun.Columns.Count);
                            //pdfTable.HeaderRows = 1;

                            //pdfTable.DefaultCell.Padding = 3;
                            //pdfTable.WidthPercentage = 100;
                            //pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
                            PdfPTable pdfTable = new PdfPTable(9);
                            pdfTable.HorizontalAlignment = 0;
                            pdfTable.TotalWidth = 500f;
                            pdfTable.LockedWidth = true;
                            float[] widths = new float[] { 30f, 40f, 45f, 35f, 30f, 35f, 40f, 42f, 40f };
                            pdfTable.SetWidths(widths);
                            PdfPCell cell1 = new PdfPCell();

                            Image img1 = Image.GetInstance(IMG1);
                            cell1.AddElement(img1);
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 3;

                            pdfTable.AddCell(cell1);

                            StreamReader file = new System.IO.StreamReader(FilePath);


                            string result = file.ReadToEnd();
                            result = result.Replace('$', '\n');

                            cell1 = new PdfPCell(new Phrase(result));


                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 6;
                            pdfTable.AddCell(cell1);
                            s1 = dateTimePicker1.Value.ToString().Substring(0, 10);
                            cell1 = new PdfPCell(new Phrase("Protocol List   " + "Between Dates : " + s1+ " and " +s5, FontFactory.GetFont("Arial", 15, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 9;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Generated By :" + RequiredVariables.UserName, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 4;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Date & Time : " + DateTime.Now.ToString(), FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 5;
                            pdfTable.AddCell(cell1);

                            foreach (DataGridViewColumn column in dg_ProtoRun.Columns)
                            {

                                PdfPCell cell = new PdfPCell(new Phrase(column.HeaderText, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                                //column.Width =cell.


                                pdfTable.AddCell(cell);
                            }


                            foreach (DataGridViewRow row in dg_ProtoRun.Rows)
                            {
                                //PdfPCell cell = new PdfPCell(new Phrase(row.HeaderText));
                                foreach (DataGridViewCell cell in row.Cells)
                                {
                                    try
                                    {
                                        cell1 = new PdfPCell(new Phrase(cell.Value.ToString(), FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK)));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        pdfTable.AddCell(cell1);
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show("Error :" + ex.Message);
                                    }
                                }
                            }

                            using (FileStream stream = new FileStream(sfd.FileName, FileMode.Create))
                            {
                                Document pdfDoc = new Document(PageSize.A4, 55f, 20f, 30f, 70f);
                                PdfWriter.GetInstance(pdfDoc, stream);
                                pdfDoc.Open();
                                pdfDoc.Add(pdfTable);
                                pdfDoc.Close();
                                stream.Close();
                            }


                            //For printing please enable this lines 
                            string FilePath1 = @"G:/projects/mukesh/HematoxinandEosin/HematoxinandEosin/bin/Debug/RunProtocol.pdf";
                            AddPageNumber(FilePath1);
                            Process p = new Process();
                            p.StartInfo = new ProcessStartInfo()
                            {
                                CreateNoWindow = true,
                                Verb = "print",
                                FileName = FilePath1  //put the correct path here
                            };
                            p.StartInfo.ErrorDialog = true;
                            p.Start();
                            MessageBox.Show("Data Printed Successfully !!!", "Info");
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error :" + ex.Message);
                        }

                    }
                }
                else
                {
                    MessageBox.Show("No Record To Print !!!", "Info");
                }
            }

            if (rdn_Monthly.Checked == true)
            {
                if (dg_ProtoRun.Rows.Count > 0)
                {
                    PrintDocument Pd = new PrintDocument();
                    SaveFileDialog sfd = new SaveFileDialog();
                    sfd.Filter = "PDF (*.pdf)|*.pdf";
                    sfd.FileName = "RunProtocol.pdf";
                    bool fileError = false;
                    sfd.InitialDirectory = new DirectoryInfo(Application.StartupPath + "\\HematoxinandEosin\\HematoxinandEosin\\bin\\Debug").FullName;
                    if (File.Exists(sfd.FileName))
                    {

                        try
                        {
                            File.Delete(sfd.FileName);
                        }
                        catch (IOException ex)
                        {
                            fileError = true;
                            MessageBox.Show("It wasn't possible to write the data to the disk." + ex.Message);
                        }
                    }
                    if (!fileError)
                    {
                        try
                        {
                            //PdfPTable pdfTable = new PdfPTable(dg_ProtoRun.Columns.Count);
                            //pdfTable.HeaderRows = 1;

                            //pdfTable.DefaultCell.Padding = 3;
                            //pdfTable.WidthPercentage = 100;
                            //pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
                            PdfPTable pdfTable = new PdfPTable(9);
                            pdfTable.HorizontalAlignment = 0;
                            pdfTable.TotalWidth = 500f;
                            pdfTable.LockedWidth = true;
                            float[] widths = new float[] { 30f, 40f, 45f, 35f, 30f, 35f, 40f, 42f, 40f };
                            pdfTable.SetWidths(widths);
                            PdfPCell cell1 = new PdfPCell();

                            Image img1 = Image.GetInstance(IMG1);
                            cell1.AddElement(img1);
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 3;

                            pdfTable.AddCell(cell1);

                            StreamReader file = new System.IO.StreamReader(FilePath);


                            string result = file.ReadToEnd();
                            result = result.Replace('$', '\n');

                            cell1 = new PdfPCell(new Phrase(result));


                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 6;
                            pdfTable.AddCell(cell1);
                            s1 = dateTimePicker1.Value.ToString().Substring(0, 10);
                            cell1 = new PdfPCell(new Phrase("Protocol List   " + "For Month : "+cmb_Month.Text, FontFactory.GetFont("Arial", 15, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 9;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Generated By :" + RequiredVariables.UserName, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 4;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Date & Time : " + DateTime.Now.ToString(), FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 5;
                            pdfTable.AddCell(cell1);

                            foreach (DataGridViewColumn column in dg_ProtoRun.Columns)
                            {

                                PdfPCell cell = new PdfPCell(new Phrase(column.HeaderText, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                                //column.Width =cell.


                                pdfTable.AddCell(cell);
                            }


                            foreach (DataGridViewRow row in dg_ProtoRun.Rows)
                            {
                                //PdfPCell cell = new PdfPCell(new Phrase(row.HeaderText));
                                foreach (DataGridViewCell cell in row.Cells)
                                {
                                    try
                                    {
                                        cell1 = new PdfPCell(new Phrase(cell.Value.ToString(), FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK)));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        pdfTable.AddCell(cell1);
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show("Error :" + ex.Message);
                                    }
                                }
                            }

                            using (FileStream stream = new FileStream(sfd.FileName, FileMode.Create))
                            {
                                Document pdfDoc = new Document(PageSize.A4, 55f, 20f, 30f, 70f);
                                PdfWriter.GetInstance(pdfDoc, stream);
                                pdfDoc.Open();
                                pdfDoc.Add(pdfTable);
                                pdfDoc.Close();
                                stream.Close();
                            }


                            //For printing please enable this lines
                            string FilePath1 = @"G:/projects/mukesh/HematoxinandEosin/HematoxinandEosin/bin/Debug/RunProtocol.pdf";
                            AddPageNumber(FilePath1);
                            Process p = new Process();
                            p.StartInfo = new ProcessStartInfo()
                            {
                                CreateNoWindow = true,
                                Verb = "print",
                                FileName = FilePath1  //put the correct path here
                            };
                            p.StartInfo.ErrorDialog = true;
                            p.Start();
                            MessageBox.Show("Data Printed Successfully !!!", "Info");
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error :" + ex.Message);
                        }

                    }
                }
                else
                {
                    MessageBox.Show("No Record To Print !!!", "Info");
                }
            }
        }
        protected void AddPageNumber(string filename)
        {
            string pdffilename = null, mainpdf = null;
            pdffilename = filename;
            mainpdf = filename;
            //byte[] bytes = File.ReadAllBytes(@"D:\PDFs\Test.pdf");
            byte[] bytes = File.ReadAllBytes(pdffilename);

            string WatermarkLocation = IMG1;
            iTextSharp.text.Image img = iTextSharp.text.Image.GetInstance(WatermarkLocation);
            img.SetAbsolutePosition(100, 100);

            //image.setAbsolutePosition(rect.Left, rect.Top - image.ScaledHeight);
            //PdfDocument doc;

            iTextSharp.text.Font blackFont = FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
            using (MemoryStream stream = new MemoryStream())
            {
                PdfReader reader = new PdfReader(bytes);

                using (PdfStamper stamper = new PdfStamper(reader, stream))
                {
                    int pages = reader.NumberOfPages;
                    string pgcount = null, filename_pdf = null;

                    PdfLayer layer = new PdfLayer("WatermarkLayer", stamper.Writer);

                    filename_pdf = "File Name: " + mainpdf;
                    string s1 = null, s3 = null;
                    for (int i = 1; i <= pages; i++)
                    {
                        pgcount = null;
                        pgcount = "Page " + i.ToString() + " of " + pages;

                        float ph = reader.GetPageSize(i).Height;
                        float pw = reader.GetPageSize(i).Width;

                        s1 = "";
                        s1 = s1 + "Designed & Developed By Pathnsitu Biotechnologies";
                        // ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 50f, 5f, 0);
                        //s1 = "";
                        //s1 = s1 + "Date:";
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 250f, 15f, 0);


                        //s1 = "";
                        //s1 = s1 + "Date:";
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 725f, 15f, 0);
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT,new Phrase(pgcount, blackFont), 568f, 15f, 0);
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 50f, 60f, 0);
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase(s3, blackFont), 650f, 60f, 0);

                        //if (s1.Contains("&"))
                        //{
                        //    s1 = s1.Replace("&", "&&");
                        //}
                        //ColumnText.ShowTextAligned(stamper.GetOverContent(i), Element.ALIGN_CENTER, new Phrase(s1, blackFont), 400f, 580f, 0);
                        ColumnText.ShowTextAligned(stamper.GetOverContent(i), Element.ALIGN_RIGHT, new Phrase(pgcount, blackFont), 550f, 5f, 0);

                        //Water Mark On PDF Files
                        PdfContentByte cb = stamper.GetUnderContent(i);

                        cb.BeginLayer(layer);
                        //cb.SetFontAndSize(BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED), 85);                        
                        cb.SetFontAndSize(BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED), 85);
                        PdfGState gState = new PdfGState();
                        gState.FillOpacity = 0.25f;
                        //gState.FillOpacity = 0.40f;
                        cb.SetColorFill(BaseColor.BLACK);
                        cb.SetGState(gState);

                        cb.BeginText();
                        //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, " Pathnsitu ", ph / 2, pw / 2, 45f);
                        cb.EndText();
                        //"Close" the layer
                        cb.EndLayer();
                        //Water Mark On Pdf Files  
                    }
                }
                bytes = stream.ToArray();
            }
            //File.WriteAllBytes(@"D:\PDFs\Test_1.pdf", bytes);
            File.WriteAllBytes(mainpdf, bytes);

            //if (File.Exists(pdffilename))
            //{
            //    File.Delete(pdffilename);
            //}
        }
        private void Form_Reports_Load_2(object sender, EventArgs e)
        {
            Constr = "";
            Constr = RequiredVariables.DBConnStr;
            con.ConnectionString = Constr;
            if (con.State == ConnectionState.Closed)
                con.Open();
        }

        private void dateTimePicker1_ValueChanged(object sender, EventArgs e)
        {
            if (rdn_Weekly.Checked == true)
            {
                AddDaysToDatePicker(7, dateTimePicker1, dateTimePicker2);
            }
        }

        private void dateTimePicker2_ValueChanged(object sender, EventArgs e)
        {
            if (rdn_Weekly.Checked == true)
            {
                AddDaysToDatePicker(-7, dateTimePicker2, dateTimePicker1);
            }
        }
    }
}
