using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using iTextSharp.text.pdf;
using iTextSharp.text;
using System.Data.SqlClient;
using System.Drawing.Printing;
using System.Diagnostics;

using System.Threading;


using Font = System.Drawing.Font;
using Image = iTextSharp.text.Image;

namespace HematoxinandEosin
{
    public partial class Form_UserInDetailedReports : Form
    {
        string Constr = "Data Source=SYSPSENG006;User ID=sa;Password=sree@pns2013;Initial Catalog=PNSHE;Pooling=false;Max Pool Size=400;workstation id =SYSPSENG006";
        SqlConnection con = new SqlConnection();
        SqlCommand cmd = new SqlCommand();
        // DataTable table = new DataTable("table");
        SqlDataAdapter sda = new SqlDataAdapter();
        DataTable table = new DataTable("table");
        string sqlstr;
        private Font verdana10Font;
        private StreamReader reader;
        string IMG1 = "Images/logos.png";
        string FilePath = Path.Combine(@"G:\projects\mukesh\HematoxinandEosin\HematoxinandEosin\bin\Debug\Lab.txt");
        public Form_UserInDetailedReports()
        {
            InitializeComponent();
        }


        private void btn_ExportPdf_Click(object sender, EventArgs e)
        {


            if (dg_UserIndetailed.Rows.Count > 0)
            {
                SaveFileDialog sfd = new SaveFileDialog();
                sfd.Filter = "PDF (*.pdf)|*.pdf";
                sfd.FileName = "output.pdf";
                bool fileError = false;
                if (sfd.ShowDialog() == DialogResult.OK)
                {
                    if (File.Exists(sfd.FileName))
                    {
                        try
                        {
                            File.Delete(sfd.FileName);
                        }
                        catch (IOException ex)
                        {
                            fileError = true;
                            MessageBox.Show("It wasn't possible to write the data to the disk." + ex.Message);
                        }
                    }
                    if (!fileError)
                    {
                        try
                        {
                            PdfPTable pdfTable = new PdfPTable(dg_UserIndetailed.Columns.Count);
                          
                            pdfTable.DefaultCell.Padding = 3;
                            pdfTable.WidthPercentage = 100;
                            pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
                            pdfTable.HeaderRows = 4;
                            PdfPCell cell1 = new PdfPCell();

                            Image img1 = Image.GetInstance(IMG1);
                            cell1.AddElement(img1);
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 2;

                            pdfTable.AddCell(cell1);

                            StreamReader file = new System.IO.StreamReader(FilePath);


                            string result = file.ReadToEnd();
                            result = result.Replace('$', '\n');

                            cell1 = new PdfPCell(new Phrase(result));


                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 4;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("For Date :" + listBox_user.SelectedItem.ToString(), FontFactory.GetFont("Arial", 15, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 6;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Generated By :" + RequiredVariables.UserName, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 3;
                            pdfTable.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Date & Time : " + DateTime.Now.ToString(), FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.BackgroundColor = BaseColor.GRAY;
                            cell1.Colspan = 3;
                            pdfTable.AddCell(cell1);
                            foreach (DataGridViewColumn column in dg_UserIndetailed.Columns)
                            {
                                PdfPCell cell = new PdfPCell(new Phrase(column.HeaderText, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                                pdfTable.AddCell(cell);
                            }


                            foreach (DataGridViewRow row in dg_UserIndetailed.Rows)
                            {
                                //PdfPCell cell = new PdfPCell(new Phrase(row.HeaderText));
                                foreach (DataGridViewCell cell in row.Cells)
                                {
                                    try
                                    {
                                        cell1 = new PdfPCell(new Phrase(cell.Value.ToString(), FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK)));
                                        cell1.BackgroundColor = BaseColor.GRAY;
                                        pdfTable.AddCell(cell1);
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show("Error :" + ex.Message);
                                    }
                                }
                            }

                            using (FileStream stream = new FileStream(sfd.FileName, FileMode.Create))
                            {
                                Document pdfDoc = new Document(PageSize.A4, 55f, 20f, 20f, 10f);
                                PdfWriter.GetInstance(pdfDoc, stream);
                                pdfDoc.Open();
                                pdfDoc.Add(pdfTable);
                                pdfDoc.Close();
                                stream.Close();
                            }

                            MessageBox.Show("Data Exported Successfully !!!", "Info");
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error :" + ex.Message);
                        }

                    }
                }
                //else
                //{
                //    MessageBox.Show("No Record To Export !!!", "Info");
                //}
            }
            else
            {
                MessageBox.Show("No Record To Export !!!", "Info");
            }


        }
        private void retrieveDate()
        {
            sqlstr = "";
            sqlstr = "Select DISTINCT LoggedOn from UserDetails";

            //sda = new SqlDataAdapter(sqlstr, con);
            //list = new List();
            //sda.Fill(list);
            cmd = new SqlCommand(sqlstr, con);
            if (con.State == ConnectionState.Closed)
                con.Open();

            SqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                listBox_user.Items.Add(reader["Loggedon"].ToString());
            }

            con.Close();
            //cmd.ExecuteNonQuery();
        }
        private void signin()
        {
            // string sin = "sign in";
            sqlstr = "Select UserName,Status,LoggedTime from UserDetails Where Status='sign in' or Status= 'sign out' ";
            //sqlstr = sqlstr + "sign in'";
            //sqlstr = "Select UserName,Status,LoggedTime from UserDetails Where Status= 'sign out'";

            sda = new SqlDataAdapter(sqlstr, con);
            table = new DataTable();
            sda.Fill(table);

            cmd = new SqlCommand(sqlstr, con);


            if (con.State == ConnectionState.Closed)
                con.Open();


            cmd.ExecuteNonQuery();


            if (dg_UserIndetailed.Rows.Count > 0) dg_UserIndetailed.Rows.Clear();
            //if(dg_UserIndetailed.Columns.Count > 0) dg_UserIndetailed.Columns.Clear();
            // dg_UserIndetailed.DataSource = table.DefaultView;

            for (int i = 0; i < table.Rows.Count; i++)
            {

                //DataGridViewRow row = (DataGridViewRow)dg_UserIndetailed.Rows[0].Clone();
                dg_UserIndetailed.Rows.Add();
                dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["user"].Value = table.Rows[i]["UserName"].ToString();
                dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["inStatus"].Value = table.Rows[i]["Status"].ToString(); ;
                dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["inTime"].Value = table.Rows[i]["LoggedTime"].ToString();
                dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["outStatus"].Value = table.Rows[i]["Status"].ToString(); ;
                dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["outTime"].Value = table.Rows[i]["LoggedTime"].ToString();

                //dg_UserIndetailed.Rows[i].Cells["RegName"].Value = table.Rows[i]["Temp_Reagent"].ToString();
                //dg_UserIndetailed.Rows.Add(row);

            }


        }
        private void signout()
        {

            string sout = "sign out";
            sqlstr = "Select UserName,Status,LoggedTime from UserDetails Where Status= '" + sout + "'";

            sda = new SqlDataAdapter(sqlstr, con);
            table = new DataTable();
            sda.Fill(table);

            //cmd = new SqlCommand(sqlstr, con);


            if (con.State == ConnectionState.Closed)
                con.Open();


            cmd.ExecuteNonQuery();



            for (int i = 0; i < table.Rows.Count; i++)
            {


               
                dg_UserIndetailed.Rows.Add();
                
                dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["outStatus"].Value = table.Rows[i]["Status"].ToString(); ;
                dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["outTime"].Value = table.Rows[i]["LoggedTime"].ToString();
               

            }
        }

        private void listBox_user_SelectedIndexChanged(object sender, EventArgs e)
        {
            string s1 = "";
            s1 = listBox_user.SelectedItem.ToString();
            string s2 = "";
            DateTime d1;
            DateTime d2;

            sqlstr = "";
            sqlstr = "Select UserName,Status,LoggedTime from UserDetails Where Loggedon= '" + s1 + "' order by slno";
            //sqlstr = "Select UserName,Status,LoggedTime from UserDetails Where Loggedon= '" + s1 + "' and Status='";
            /*if(sqlstr == sqlstr + "sign in'")*/
            // { 
            //sqlstr = sqlstr + "sign in'";
            sda = new SqlDataAdapter(sqlstr, con);
            cmd = new SqlCommand(sqlstr, con);
            table = new DataTable();
            sda.Fill(table);
            if (con.State == ConnectionState.Closed)
                con.Open();
            cmd.ExecuteNonQuery();
            if (dg_UserIndetailed.Rows.Count > 0) dg_UserIndetailed.Rows.Clear();
            for (int i = 0; i < table.Rows.Count; i++)
            {
                
                if (table.Rows[i]["Status"].ToString() == "sign in")
                {

                    dg_UserIndetailed.Rows.Add();
                    dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["users"].Value = table.Rows[i]["UserName"].ToString();
                    dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["inStatuss"].Value = table.Rows[i]["Status"].ToString(); ;
                    dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["inTimes"].Value = table.Rows[i]["LoggedTime"].ToString();
                    s2 = s1 + " " + table.Rows[i]["LoggedTime"].ToString();
                    d1 = Convert.ToDateTime(s2);
                    for (int j = i + 1; j < table.Rows.Count; j++)
                    {

                        if (table.Rows[i]["UserName"].ToString() == table.Rows[j]["UserName"].ToString())
                        {
                            if (table.Rows[j]["Status"].ToString() == "sign out")
                            {
                                s2 = "";
                                s2 = s1 + " " + table.Rows[j]["LoggedTime"].ToString();
                                d2 = Convert.ToDateTime(s2);
                                if (d2 > d1)
                                {
                                  dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["outStatus"].Value = table.Rows[j]["Status"].ToString() ;

                                    dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["outTime"].Value = table.Rows[j]["LoggedTime"].ToString();
                                    if (d1 != null && d2 != null)
                                    {
                                        TimeSpan ts = d2 - d1;
                                        dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["duration"].Value = ts.ToString().Substring(0, 8);
                                    }
                                   

                                    break;
                                }

                            }
                            else if (table.Rows[j]["Status"].ToString() == "sign in")
                            {
                                s2 = "";
                                s2 = s1 + " " + table.Rows[j]["LoggedTime"].ToString();
                                d2 = Convert.ToDateTime(s2);
                                if (d2 > d1)
                                {

                                    dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["outStatus"].Value = "---";
                                    dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["outTime"].Value = "---";
                                    dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["duration"].Value = "---";

                                    break;

                                }

                            }
                            if (dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["outStatus"].Value == null)
                            {
                                dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["outStatus"].Value = "---";
                                dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["outTime"].Value = "---";
                                dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["duration"].Value = "---";

                                break;
                            }


                        }
                    }
                }
            }
        }

        private void month()
        {
            sqlstr = "";
            sqlstr = "Select DISTINCT Month from UserDetails";

            //sda = new SqlDataAdapter(sqlstr, con);
            //list = new List();

            sda = new SqlDataAdapter(sqlstr, con);
            table = new DataTable();
            sda.Fill(table);
            cmd = new SqlCommand(sqlstr, con);
            if (con.State == ConnectionState.Closed)
                con.Open();
            cmd.ExecuteNonQuery();
            if (dg_UserIndetailed.Rows.Count > 0) dg_UserIndetailed.Rows.Clear();
            for (int i = 0; i < table.Rows.Count; i++)
            {

                //DataGridViewRow row = (DataGridViewRow)dg_UserIndetailed.Rows[0].Clone();
                //dg_UserIndetailed.Rows.Add();
                //dg_UserIndetailed.Rows.Add();
                //dg_UserIndetailed.Rows[dg_UserIndetailed.Rows.Count - 1].Cells["months"].Value = table.Rows[i]["Month"].ToString();
                //dg_UserIndetailed.DataSource = table;
            }
          
            con.Close();
        }
        private void Form_UserInDetailed_Load(object sender, EventArgs e)
        {
            cmb_Month.SelectedIndex = 0;
            Constr = "";
            Constr = RequiredVariables.DBConnStr;
            con.ConnectionString = Constr;
            if (con.State == ConnectionState.Closed)
                con.Open();
            // DirectoryInfo di = new DirectoryInfo(@"G:\projects\mukesh\HematoxinandEosin\HematoxinandEosin\bin\Debug");

            // FileInfo[] files = di.GetFiles("*.pdf");
            //// textBox1.Text = files;

            // foreach (FileInfo file in files)
            // {
            //     string Pth = file.Name;
            //     //Pth = Pth.Replace(".csv", "");
            //     textBox1.Text=Pth;
            //     //OpenFileDialog ofd = new OpenFileDialog();
            //     //ofd.InitialDirectory=new
            //     //Pd.DocumentName = Pth;
            // }
            //retrieveDate();
            //month();
        }

        private void btn_close_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btn_Load_Click(object sender, EventArgs e)
        {
            // signin();
            //signout();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            //if (cmb_Month.Text == "")
            //{
            //    MessageBox.Show("Please enter the required month", RequiredVariables.Msgtext, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //    cmb_Month.Focus();
            //    cmb_Month.SelectedIndex = 0;
            //}

            //if (s2 != cmb_Month.Text)
            //{
            //    MessageBox.Show("No Data was recorded for the Selected month", RequiredVariables.Msgtext, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //}

            //cmb_Month.Items.Add("Select");
            //if (cmb_Month.SelectedItem.ToString() == listBox1.Items.ToString())
            //{
            string s2 = "";
            s2 = cmb_Month.SelectedItem.ToString();
            listBox_user.Items.Clear();

            if (dg_UserIndetailed.Rows.Count > 0) dg_UserIndetailed.Rows.Clear();

            sqlstr = "";
            sqlstr = "Select DISTINCT LoggedOn from UserDetails Where Month= '" + s2 + "'";

            DataTable t1 = new DataTable();
            sda = new SqlDataAdapter(sqlstr, con);
            sda.Fill(t1);

            if (t1.Rows.Count > 0)
            {
                sda.Dispose();
                for (int j = 0; j < t1.Rows.Count; j++)
                {
                    listBox_user.Items.Add(t1.Rows[j]["LoggedOn"].ToString());
                }
            }
            else
            {
                MessageBox.Show("No Data was recorded for the Selected month", RequiredVariables.Msgtext, MessageBoxButtons.OK, MessageBoxIcon.Information);
                cmb_Month.Focus();
            }
            con.Close();

            // }}

            //if (  cmb_Month.SelectedItem.ToString() != listBox1.Items.ToString())
            // {
            //     MessageBox.Show("No Data was recorded for the Selected month", RequiredVariables.Msgtext, MessageBoxButtons.OK, MessageBoxIcon.Information);
            // }
        }

        private void cmb_Month_SelectedIndexChanged(object sender, EventArgs e)
        {

            //string s2 = cmb_Month.SelectedItem.ToString();

            //sqlstr = "";
            //sqlstr = "Select DISTINCT LoggedOn from UserDetails Where Month= '" + s2 + "'";

            ////sda = new SqlDataAdapter(sqlstr, con);
            ////list = new List();
            ////sda.Fill(list);
            //cmd = new SqlCommand(sqlstr, con);
            //if (con.State == ConnectionState.Closed)
            //    con.Open();

            //SqlDataReader reader = cmd.ExecuteReader();

            //while (reader.Read())
            //{
            //    listBox_user.Items.Add(reader["Loggedon"].ToString());

            //}
        }
        //string FilePath = @"G:\projects\mukesh\HematoxinandEosin\HematoxinandEosin\bin\Debug\output.pdf";
        //public static void PrintFileToDefaultPrinter(string FilePath)
        //{
        //    try
        //    {
        //        var file = File.ReadAllBytes(FilePath);
        //        var printQueue = LocalPrintServer.GetDefaultPrintQueue();

        //        using (var job = printQueue.AddJob())
        //        using (var stream = job.JobStream)
        //        {
        //            stream.Write(file, 0, file.Length);
        //        }
        //    }
        //    catch (Exception)
        //    {

        //        throw;
        //    }
        //}
        private void PrintTextFileHandler(object sender, PrintPageEventArgs ppeArgs)
        {
            //Get the Graphics object  
            Graphics g = ppeArgs.Graphics;
            float linesPerPage = 0;
            float yPos = 0;
            int count = 0;
            //Read margins from PrintPageEventArgs  
            float leftMargin = ppeArgs.MarginBounds.Left;
            float topMargin = ppeArgs.MarginBounds.Top;
            string line = null;
            //Calculate the lines per page on the basis of the height of the page and the height of the font  
            linesPerPage = ppeArgs.MarginBounds.Height / verdana10Font.GetHeight(g);
            //Now read lines one by one, using StreamReader  
            while (count < linesPerPage && ((line = reader.ReadLine()) != null))
            {
                //Calculate the starting position  
                yPos = topMargin + (count * verdana10Font.GetHeight(g));
                //Draw text  
                g.DrawString(line, verdana10Font, Brushes.Black, leftMargin, yPos, new StringFormat());
                //Move to next line  
                count++;
            }
            //If PrintPageEventArgs has more pages to print  
            if (line != null)
            {
                ppeArgs.HasMorePages = true;
            }
            else
            {
                ppeArgs.HasMorePages = false;
            }
        }
        private void btn_Print_Click(object sender, EventArgs e)
        {
            if (dg_UserIndetailed.Rows.Count > 0)
            {
                PrintDocument Pd = new PrintDocument();
                SaveFileDialog sfd = new SaveFileDialog();
                sfd.Filter = "PDF (*.pdf)|*.pdf";
                sfd.FileName = "Usrlog.pdf";
                bool fileError = false;
                sfd.InitialDirectory = new DirectoryInfo(Application.StartupPath + "\\HematoxinandEosin\\HematoxinandEosin\\bin\\Debug").FullName;
                if (File.Exists(sfd.FileName))
                {

                    try
                    {
                        File.Delete(sfd.FileName);
                    }
                    catch (IOException ex)
                    {
                        fileError = true;
                         MessageBox.Show("It wasn't possible to write the data to the disk." + ex.Message);
                    }
                }
                if (!fileError)
                {
                    try
                    {
                        PdfPTable pdfTable = new PdfPTable(dg_UserIndetailed.Columns.Count);
                        pdfTable.HeaderRows = 1;
                        
                        pdfTable.DefaultCell.Padding = 3;
                        pdfTable.WidthPercentage = 100;
                        pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdfTable.HeaderRows = 4;
                        /// PdfPCell cell1 = new PdfPCell(new Phrase("Pathnsitu Biotechnologies"));
                        PdfPCell cell1 = new PdfPCell();
                        
                        Image img1 = Image.GetInstance(IMG1);
                        cell1.AddElement(img1);
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.BackgroundColor = BaseColor.GRAY;
                        cell1.Colspan = 2;

                        pdfTable.AddCell(cell1);

                        StreamReader file = new System.IO.StreamReader(FilePath);
                       

                        string result = file.ReadToEnd();
                        result = result.Replace('$', '\n');

                         cell1 = new PdfPCell(new Phrase(result));


                        cell1.VerticalAlignment = Element.ALIGN_CENTER;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.BackgroundColor = BaseColor.GRAY;
                        cell1.Colspan = 4;
                        pdfTable.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("For Date :" + listBox_user.SelectedItem.ToString(), FontFactory.GetFont("Arial", 15, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                        cell1.VerticalAlignment = Element.ALIGN_CENTER;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.BackgroundColor = BaseColor.GRAY;
                        cell1.Colspan = 6;
                        pdfTable.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Generated By :" + RequiredVariables.UserName, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));

                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.BackgroundColor = BaseColor.GRAY;
                        cell1.Colspan =3;
                        pdfTable.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Date & Time : " + DateTime.Now.ToString(), FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.BackgroundColor = BaseColor.GRAY;
                        cell1.Colspan = 3;
                        pdfTable.AddCell(cell1);
                        foreach (DataGridViewColumn column in dg_UserIndetailed.Columns)
                        {
                            
                            PdfPCell cell = new PdfPCell(new Phrase(column.HeaderText, FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK)));
                            cell.BackgroundColor = BaseColor.GRAY;
                            pdfTable.AddCell(cell);
                        }


                        foreach (DataGridViewRow row in dg_UserIndetailed.Rows)
                        {
                             //PdfPCell cell = new PdfPCell(new Phrase(row.HeaderText));
                            foreach (DataGridViewCell cell in row.Cells)
                            {
                                try
                                {
                                    
                                    
                                    PdfPCell cell2 = new PdfPCell();
                                    if(cell.Value==null)
                                    {
                                        cell2 = new PdfPCell(new Phrase("---", FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK)));
                                    }
                                    else
                                    {
                                        cell2 = new PdfPCell(new Phrase(cell.Value.ToString(), FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK)));
                                    }
                                    
                                    pdfTable.AddCell(cell2);
                                    
                                }
                                catch (Exception ex)
                                {
                                    MessageBox.Show("Error :" + ex.Message);
                                }
                            }
                        }

                        using (FileStream stream = new FileStream(sfd.FileName, FileMode.Create))
                        {
                            Document pdfDoc = new Document(PageSize.A4, 55f, 20f, 30f, 70f);
                            PdfWriter.GetInstance(pdfDoc, stream);
                            pdfDoc.Open();
                            pdfDoc.Add(pdfTable);
                            pdfDoc.Close();
                            stream.Close();
                        }


                        //For prinnting please enable this lines 
                        string FilePath1 = @"G:/projects/mukesh/HematoxinandEosin/HematoxinandEosin/bin/Debug/Usrlog.pdf";
                        AddPageNumber(FilePath1);
                        Process p = new Process();
                        p.StartInfo = new ProcessStartInfo()
                        {
                            CreateNoWindow = true,
                            Verb = "print",
                            FileName = FilePath1  //put the correct path here
                        };
                        p.StartInfo.ErrorDialog = true;
                        p.Start();
                        MessageBox.Show("Data Printed Successfully !!!", "Info");
                    }
                    catch (Exception ex)
                    {
                          MessageBox.Show("Error :" + ex.Message);
                    }

                }
            }
            else
            {
                MessageBox.Show("No Record To Print !!!", "Info");
            }
                //    //dataGridPrinter1.PageNumber = 1;
                //    //dataGridPrinter1.RowCount = 0;

                //    //// Show the Print Dialog to set properties and print the document after ok is pressed.  
                //    //if (printDialog1.ShowDialog() == DialogResult.OK)
                //    //{
                //    //    PrintDocument1.Print();
                //    //}
                //}
                //void SetupGridPrinter()
                //{



                // DataGridPrinter dataGridPrinter1 = new DataGridPrinter();

                //DataGridPrinter dataGridPrinter1 = new DataGridPrinter(dataGrid1, printDocument1,
                //dataSet11.Customers);
                // }
                //private void printDocument1_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e)
                //{
                //    Graphics g = e.Graphics;
                //    // Draw a label title for the grid

                //   // DrawTopLabel(g);
                //    // draw the datagrid using the DrawDataGrid method passing the Graphics surface  
                //    bool more = dataGridPrinter1.DrawDataGrid(g);
                //    // if there are more pages, set the flag to cause the form to trigger another print page event  
                //    if (more == true)
                //    {
                //        e.HasMorePages = true;
                //        dataGridPrinter1.PageNumber++;
                //    }
                //}
                //private void printDocument1_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e)
                //{
                //    Bitmap dataGridViewImage = new Bitmap(this.tickGridBulkAssign.Width, this.tickGridBulkAssign.Height);

                //    tickGridBulkAssign.DrawToBitmap(dataGridViewImage, new Rectangle(0, 0, this.tickGridBulkAssign.Width, this.tickGridBulkAssign.Height));

                //    e.Graphics.DrawImage(dataGridViewImage, 0, 0);
                //}

          
        }
        protected void AddPageNumber(string filename)
        {
            string pdffilename = null, mainpdf = null;
            pdffilename = filename;
            mainpdf = filename;
            //byte[] bytes = File.ReadAllBytes(@"D:\PDFs\Test.pdf");
            byte[] bytes = File.ReadAllBytes(pdffilename);

            string WatermarkLocation = IMG1;
            iTextSharp.text.Image img = iTextSharp.text.Image.GetInstance(WatermarkLocation);
            img.SetAbsolutePosition(100, 100);

            //image.setAbsolutePosition(rect.Left, rect.Top - image.ScaledHeight);
            //PdfDocument doc;

            iTextSharp.text.Font blackFont = FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
            using (MemoryStream stream = new MemoryStream())
            {
                PdfReader reader = new PdfReader(bytes);

                using (PdfStamper stamper = new PdfStamper(reader, stream))
                {
                    int pages = reader.NumberOfPages;
                    string pgcount = null, filename_pdf = null;

                    PdfLayer layer = new PdfLayer("WatermarkLayer", stamper.Writer);

                    filename_pdf = "File Name: " + mainpdf;
                    string s1 = null, s3 = null;
                    for (int i = 1; i <= pages; i++)
                    {
                        pgcount = null;
                        pgcount = "Page " + i.ToString() + " of " + pages;

                        float ph = reader.GetPageSize(i).Height;
                        float pw = reader.GetPageSize(i).Width;

                        s1 = "";
                        s1 = s1 + "Designed & Developed By Pathnsitu Biotechnologies";
                        // ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 50f, 5f, 0);
                        //s1 = "";
                        //s1 = s1 + "Date:";
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 250f, 15f, 0);


                        //s1 = "";
                        //s1 = s1 + "Date:";
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 725f, 15f, 0);
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT,new Phrase(pgcount, blackFont), 568f, 15f, 0);
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase(s1, blackFont), 50f, 60f, 0);
                        //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase(s3, blackFont), 650f, 60f, 0);

                        //if (s1.Contains("&"))
                        //{
                        //    s1 = s1.Replace("&", "&&");
                        //}
                        //ColumnText.ShowTextAligned(stamper.GetOverContent(i), Element.ALIGN_CENTER, new Phrase(s1, blackFont), 400f, 580f, 0);
                        ColumnText.ShowTextAligned(stamper.GetOverContent(i), Element.ALIGN_RIGHT, new Phrase(pgcount, blackFont), 550f, 5f, 0);

                        //Water Mark On PDF Files
                        PdfContentByte cb = stamper.GetUnderContent(i);

                        cb.BeginLayer(layer);
                        //cb.SetFontAndSize(BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED), 85);                        
                        cb.SetFontAndSize(BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED), 85);
                        PdfGState gState = new PdfGState();
                        gState.FillOpacity = 0.25f;
                        //gState.FillOpacity = 0.40f;
                        cb.SetColorFill(BaseColor.BLACK);
                        cb.SetGState(gState);

                        cb.BeginText();
                        //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, " Pathnsitu ", ph / 2, pw / 2, 45f);
                        cb.EndText();
                        //"Close" the layer
                        cb.EndLayer();
                        //Water Mark On Pdf Files  
                    }
                }
                bytes = stream.ToArray();
            }
            //File.WriteAllBytes(@"D:\PDFs\Test_1.pdf", bytes);
            File.WriteAllBytes(mainpdf, bytes);

            //if (File.Exists(pdffilename))
            //{
            //    File.Delete(pdffilename);
            //}
        }

        private void cmb_Month_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }
    }
}
