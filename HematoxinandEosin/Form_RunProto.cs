using System;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.IO.Ports;
using System.Linq;
using System.Management;
using System.Runtime.InteropServices;
using System.Speech.Synthesis;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace HematoxinandEosin
{
    public partial class Form_RunProto : Form
    {
        string Constr = "";//"Data Source=SYSPSENG006;User ID=sa;Password=sree@pns2013;Initial Catalog=PNSHE;Pooling=false;Max Pool Size=400;workstation id =SYSPSENG006";
        SqlConnection con = new SqlConnection();
        SqlCommand cmd = new SqlCommand();
        // DataTable table = new DataTable("table");
        SqlDataAdapter sda = new SqlDataAdapter();
        string sqlstr;

        DataTable ProtoRunStatus = new DataTable("ProtoRunStatus");

        #region ZoomParameters
        //Zoom Panel Variables
        string processName = "";
        string elaspedtime = "";
        Color Rackcolor = Color.Transparent;
        string Racknumber = "";
        string ReagentName = "";
        bool JarRack = false;
        Color BckGroundColor = Color.White;
        Color BckColor = Color.White;
        Color TxtColor = Color.White;
        bool OnlyJar = true;
        bool OnlyRack = false;
        string TaskCompletionTime = "";
        string TaskProcess = "";
        Color BdrColor = Color.Navy;

        //Position and size details variables
        int PF_X = 0, PF_Y = 0, ZF_X = 0, ZF_Y = 0, CP_X = 0, CP_Y = 0;
        int ZF_W = 0, ZF_H = 0, PF_W = 0, PF_H = 0;
        #endregion

        #region Protocol Required Variables
        //Timers Declaration
        int maxevttime = 0, maxtimcnt = 0;
        int washtime = 0, minevttime = 0, agitatetime = 0, movementtime = 0;  //Declared after discussion with kamal sir as protocol run racks getting collosion declared on 04-07-2024 & 05-07-2024 
        string monVal = "";
        DateTime[] r1times_arr; DateTime[] r2times_arr; DateTime[] r3times_arr;
        DateTime[] r4times_arr; DateTime[] r5times_arr; DateTime[] r6times_arr;
        Decimal parttime = 0, totalprototime = 0;
        int[] r1tim_arr = new int[200];
        DateTime r1_incub, r2_incub, r3_incub, r4_incub, r5_incub, r6_incub, temp_incub, nxtrackloading, continuetest, temp_restartincub;
        DateTime r1_taskcomp, r2_taskcomp, r3_taskcomp, r4_taskcomp, r5_taskcomp, r6_taskcomp; //Added on 23-08-2023
        DateTime r1_incub_WOn, r2_incub_WOn, r3_incub_WOn, r4_incub_WOn, r5_incub_WOn, r6_incub_WOn;
        DateTime r1_incub_Woff, r2_incub_Woff, r3_incub_Woff, r4_incub_Woff, r5_incub_Woff, r6_incub_Woff;
        DateTime r1_priorChk, r2_priorChk, r3_priorChk, r4_priorChk, r5_priorChk, r6_priorChk;

        DateTime htr1_temp_incub, htr2_temp_incub, htr3_temp_incub;

        Boolean r1_incub_WOn_flg = false, r2_incub_WOn_flg = false, r3_incub_WOn_flg = false, r4_incub_WOn_flg = false, r5_incub_WOn_flg = false, r6_incub_WOn_flg = false;
        Boolean r1_incub_Woff_flg = false, r2_incub_Woff_flg = false, r3_incub_Woff_flg = false, r4_incub_Woff_flg = false, r5_incub_Woff_flg = false, r6_incub_Woff_flg = false;
        Boolean r1_priorChk_flg = false, r2_priorChk_flg = false, r3_priorChk_flg = false, r4_priorChk_flg = false, r5_priorChk_flg = false, r6_priorChk_flg = false;

        //Data Tabels Declaration
        DataTable JPos = new DataTable("JarPositions");
        DataTable ProtoRun = new DataTable("ProtocolRun");
        DataTable R1Protorun = new DataTable("R1ProtoRun");
        DataTable R2Protorun = new DataTable("R2ProtoRun");
        DataTable R3Protorun = new DataTable("R3ProtoRun");
        //For continous Mode
        DataTable R4Protorun = new DataTable("R4ProtoRun");
        DataTable R5Protorun = new DataTable("R5ProtoRun");
        DataTable R6Protorun = new DataTable("R6ProtoRun");

        DataTable R7Protorun = new DataTable("R7ProtoRun");
        DataTable R8Protorun = new DataTable("R8ProtoRun");
        DataTable R9Protorun = new DataTable("R9ProtoRun");

        DataTable R10Protorun = new DataTable("R10ProtoRun");
        DataTable R11Protorun = new DataTable("R11ProtoRun");
        DataTable R12Protorun = new DataTable("R12ProtoRun");

        string protoshortname = "", facusrprotocoltype = "";
        //Protorun status flags of each racks

        string x1Pos, y1Pos, z1Pos, z2Pos, Assigned_RANo;
        Boolean pickedflg = false, placedflg = false, topickupflg = false, toplaceflg = false, StartHesitateflg = false, StopHesitateflg = false;
        Boolean tosense = false, sensed = false, lowlevel = false, no_jar = false, abvnormallvl = false, normallvl = false, blwnormallvl = false, blw_adglvl = false, abovednglvl = false;
        Boolean rackloadingtoJar = false; // Added on 19082024 1054
        int toSlno = 0, fromSlno = 0, inxSlno = 0, incubtime, cmdsnt = 0, noofdips = 0, washrackno = 0;
        string JarName = "", JarName_R1 = "", JarName_R2 = "", JarName_R3 = "", JarName_R4 = "", JarName_R5 = "", JarName_R6 = "";
        string Prev_JarName_R1 = "", Prev_JarName_R2 = "", Prev_JarName_R3 = "", Prev_JarName_R4 = "", Prev_JarName_R5 = "", Prev_JarName_R6 = "";  //Added on 12-12-2023
        string Next_JarName_R1 = "", Next_JarName_R2 = "", Next_JarName_R3 = "", Next_JarName_R4 = "", Next_JarName_R5 = "", Next_JarName_R6 = "";  //Added on 12-12-2023
        string R1_xPos = "", R1_yPos = "", R1_z1Pos = "", R1_z2Pos = "", R2_xPos = "", R2_yPos = "", R2_z1Pos = "", R2_z2Pos = "", R3_xPos = "", R3_yPos = "", R3_z1Pos = "", R3_z2Pos = "";
        string R4_xPos = "", R4_yPos = "", R4_z1Pos = "", R4_z2Pos = "", R5_xPos = "", R5_yPos = "", R5_z1Pos = "", R5_z2Pos = "", R6_xPos = "", R6_yPos = "", R6_z1Pos = "", R6_z2Pos = "";
        int R1_dipdelay = 0, R1_drydelay = 0, R2_dipdelay = 0, R2_drydelay = 0, R3_dipdelay = 0, R3_drydelay = 0;
        int R4_dipdelay = 0, R4_drydelay = 0, R5_dipdelay = 0, R5_drydelay = 0, R6_dipdelay = 0, R6_drydelay = 0;

        string framed_Data = "";
        SerialPort mport = new SerialPort();
        string CommandName = "";
        int functioncode = 0;
        Color JarFillColor, JartxtforeColor;
        string JarliquidValue = "0%";
        //Protorun Intiation
        Boolean protocolinitiateflg = false, protocolcmdintiated = false, Jarloaddetails = false;
        Boolean moveinitiateflg = false, lvlcmdintiated = false;
        int homecnt = 0;
        Boolean r1stat = false, r2stat = false, r3stat = false, unloadjar_racksensed = false, heaterjar_racksensed = false, loadingjar_racksensed = false, normaljar_racksensed = false, Waterjar_racksensed = false, Waterjar_Levelsensed = false;  //Waterjar_racksensed added on 30102024 1104 to check wasj jar seperately
        Boolean unloadJars_lvlintiated = false, heaterjar_lvlintiated = false, loadingjar_lvlintiated = false, normaljar_lvlintiated = false, loading_racks = false, HtrRacks_ULJars = false, NMRacks_ULJars = false, Washjar_lvlintiated = false;  //Washjar_lvlintiated added on 30102024 1104 to check wasj jar seperately
        Boolean htrstartintiate = false, htrdoorintiate = false, only_homeissued = false;
        Boolean noracksin_loadingjars = false;
        int r1inx = 0, r2inx = 0, r3inx = 0, r4inx = 0, r5inx = 0, r6inx = 0;
        /* Priority 1 - High & 0 - Low */
        int r1priority = 0, r2priority = 0, r3priority = 0, r4priority = 0, r5priority = 0, r6priority = 0;
        int r1_WaitCnt = 0, r2_WaitCnt = 0, r3_WaitCnt = 0, r4_WaitCnt = 0, r5_WaitCnt = 0, r6_WaitCnt = 0, r7_WaitCnt = 0, r8_WaitCnt = 0, r9_WaitCnt = 0; //Declared on 15-07-2024 to reducing the waiting time for already in waiting to excutethe command
        int r1_WshWaitCnt = 0, r2_WshWaitCnt = 0, r3_WshWaitCnt = 0, r4_WshWaitCnt = 0, r5_WshWaitCnt = 0, r6_WshWaitCnt = 0, r7_WshWaitCnt = 0, r8_WshWaitCnt = 0, r9_WshWaitCnt = 0; //Declared on 20-01-2025 to reducing the waiting time for already in waiting to excutethe command
        int RackIncremantVal = 1;  //Giving first rackno as 1
        int retrycnt = 0, sent_func_code = 0, repeatval = 0;
        Boolean port_avail = false, pGotByteFlag = false, rareached = false, polled = false, pCancelFlag = false, Homecmdissued = false, protorun = false, portopendflg = false;
        Boolean RA1_Homecmdissued = false, RA2_Homecmdissued = false, RA1_Z_Homecmdissued = false, RA2_Z_Homecmdissued = false, RA1_X_Homecmdissued = false, RA2_X_Homecmdissued = false;
        Boolean RA1_Y_Homecmdissued = false, RA2_Y_Homecmdissued = false, Both_Z_Homecmdissued = false, Both_Y_Homecmdissued = false, Both_X_Homecmdissued = false, Both_YZ_Homecmdissued = false;
        Boolean Both_Z_ReachedHome = false;
        Boolean rack_dip = false, rack_dip_start = false, cmd_Exec_Comp = true;

        //For individual Rack protorun flags
        Boolean pickedflg_R1 = false, topickupflg_R1 = false, placedflg_R1 = false, toplaceflg_R1 = false, dippedflg_R1 = false, todipflg_R1 = false;
        Boolean pickedflg_R2 = false, topickupflg_R2 = false, placedflg_R2 = false, toplaceflg_R2 = false, dippedflg_R2 = false, todipflg_R2 = false;
        Boolean pickedflg_R3 = false, topickupflg_R3 = false, placedflg_R3 = false, toplaceflg_R3 = false, dippedflg_R3 = false, todipflg_R3 = false;
        Boolean pickedflg_R4 = false, topickupflg_R4 = false, placedflg_R4 = false, toplaceflg_R4 = false, dippedflg_R4 = false, todipflg_R4 = false;
        Boolean pickedflg_R5 = false, topickupflg_R5 = false, placedflg_R5 = false, toplaceflg_R5 = false, dippedflg_R5 = false, todipflg_R5 = false;
        Boolean pickedflg_R6 = false, topickupflg_R6 = false, placedflg_R6 = false, toplaceflg_R6 = false, dippedflg_R6 = false, todipflg_R6 = false;

        Boolean protocolinitiateflg_R1 = false, protocolcmdintiated_R1 = false, protocolStartedflg_R1 = false;
        Boolean protocolinitiateflg_R2 = false, protocolcmdintiated_R2 = false, protocolStartedflg_R2 = false;
        Boolean protocolinitiateflg_R3 = false, protocolcmdintiated_R3 = false, protocolStartedflg_R3 = false;
        Boolean protocolinitiateflg_R4 = false, protocolcmdintiated_R4 = false, protocolStartedflg_R4 = false;
        Boolean protocolinitiateflg_R5 = false, protocolcmdintiated_R5 = false, protocolStartedflg_R5 = false;
        Boolean protocolinitiateflg_R6 = false, protocolcmdintiated_R6 = false, protocolStartedflg_R6 = false;
        int incubtime_R1, noofdips_R1 = 0, incubtime_R2, noofdips_R2 = 0, incubtime_R3 = 0, noofdips_R3 = 0, R1_cnt = 1, R2_cnt = 2, R3_cnt = 3, incubtime_Temp = 0;
        int incubtime_R4, noofdips_R4 = 0, incubtime_R5, noofdips_R5 = 0, incubtime_R6 = 0, noofdips_R6 = 0, R4_cnt = 4, R5_cnt = 5, R6_cnt = 6;

        int h1_cnt = 0, h2_cnt = 0, h3_cnt = 0;

        Boolean nxtrackintiate = false, continuetestflg = false, continueclicked = false;
        Boolean incubtime_R1_start = false, incubtime_R2_start = false, incubtime_R3_start = false, incubtime_Temp_start = false;

        int[] rackinunloading = { 0, 0, 0, 0, 0, 0 };
        int[] rackinloading = { 0, 0, 0 };
        int[] rackinheater = { 0, 0, 0 };
        int[] rackinjars = new int[40];   //Previously given as 39
        int[] rackinwaterjars = { 0, 0, 0, 0, 0, 0 };
        int[] waterlvlinwaterjars = { 0, 0, 0, 0, 0, 0 };
        int rackplacedcntinunloadjar = 0;
        //int[] water_valves_on_off_state = { 0, 0, 0, 0, 0, 0 };

        Boolean m_ProcessStoped = false, swpause = false, swresume = false, hwresume = false, hwpause = false, cmdprocesscmp = true;

        Boolean Force_Stopped_WaterValve = false;
        DateTime device_resp_Check_time, Nxt_Racks_Sensing_Time, move_RA_Time; //Added on 13-04-2024 1132
        Boolean Again_Rack_Loaded_L1 = false, Again_Rack_Loaded_L2 = false, Again_Rack_Loaded_L3 = false, recheck_Racks_Loaded = false, Racks_Reloadedto_Loadingjars = false, Recheck_Rack_Sensing_Started = false;

        Boolean tstproto = false, R1_protostart = false, R2_protostart = false, R3_protostart = false, R4_protostart = false, R5_protostart = false, R6_protostart = false, proto_htrclose_intiate = false, heatingreqflg = false;
        Boolean R1_pickcmdissue = false, R2_pickcmdissue = false, R3_pickcmdissue = false, R4_pickcmdissue = false, R5_pickcmdissue = false, R6_pickcmdissue = false;   // these flags added on 19122023 1124 to resolve waterpump on & off for multiple racks

        string valno = "";
        Boolean valonflg = false, valoffflg = false;
        Boolean htr_door_open = false, htr_door_opencmd_intiate = false, htr_door_opencmd_continue_intiate = false, htr_door_opencmd_toload_Nxtrack = false, htr_door_close = false, htr_door_closecmd_intiate = false, htr_on = false, htr_on_intiate = false, htr_off = false, htr_off_intiate = false, ra_holdtstaus = false, ra_holdcmdsent = false;
        Boolean Heater_Switched_OnState = false; //Added on 15-10-2024
        Boolean Temp_Attained = false, Process_Continued = false, Settmpintiated = false, TempSet = false, Readtmpintiated = false, TempRead = false, TempReadingStarted = false, Readtmpintiated_reinitiate = false;
        Boolean door_status_open = false, door_status_close = false, door_status_intiate = false;
        int nxtracktime = 0, settemp = 0, contnxtracktime = 0, nxt_rack_time = 0;
        SqlConnection con1 = new SqlConnection();

        Boolean RA_Protorun_intiated = false;
        int ulcnt = 0;
        Boolean moveinitiateflgUnloadingJars = false, Unload_lvlcmdintiated = false;

        string displayScrData;
        private bool swresumeIssued;
        private bool portreintiated;
        private bool m_ProcessStarted;
        private bool commandsent;
        private bool swpauseIssued;

        private bool DeviceIntialize = false;
        private bool RA1_Busystate = false, RA2_Busystate = false;

        int[] water_valves_on_off_state = { 0, 0, 0, 0, 0, 0 };  //By default water valves in off state declared on 12122023
        Boolean W1_On_State = false, W2_On_State = false, W3_On_State = false, W4_On_State = false, W5_On_State = false, W6_On_State = false, Intialize_Wash_Jars = false;
        Boolean W1_Off_State = false, W2_Off_State = false, W3_Off_State = false, W4_Off_State = false, W5_Off_State = false, W6_Off_State = false;
        WindowsFormsControlLibrary1.RoundEdgePanel tmrrefjarno = new WindowsFormsControlLibrary1.RoundEdgePanel();

        Boolean tmr_update_flg = false; //Updated on 21-12-2023 1040
        Boolean gethomestatus_flg = false, gethomeissued_flg = false; string homestatusval = "";  //Updated on 22-12-2023

        //Below Parameters Added on 26-12-2023
        int r7inx = 0, r8inx = 0, r9inx = 0, r7priority = 0, r8priority = 0, r9priority = 0;
        Boolean pickedflg_R7 = false, topickupflg_R7 = false, placedflg_R7 = false, toplaceflg_R7 = false, dippedflg_R7 = false, todipflg_R7 = false;
        Boolean pickedflg_R8 = false, topickupflg_R8 = false, placedflg_R8 = false, toplaceflg_R8 = false, dippedflg_R8 = false, todipflg_R8 = false;
        Boolean pickedflg_R9 = false, topickupflg_R9 = false, placedflg_R9 = false, toplaceflg_R9 = false, dippedflg_R9 = false, todipflg_R9 = false;
        Boolean protocolinitiateflg_R7 = false, protocolcmdintiated_R7 = false, protocolStartedflg_R7 = false;
        Boolean protocolinitiateflg_R8 = false, protocolcmdintiated_R8 = false, protocolStartedflg_R8 = false;
        Boolean protocolinitiateflg_R9 = false, protocolcmdintiated_R9 = false, protocolStartedflg_R9 = false;
        Boolean R7_protostart = false, R8_protostart = false, R9_protostart = false;
        int incubtime_R7, noofdips_R7 = 0, incubtime_R8, noofdips_R8 = 0, incubtime_R9 = 0, noofdips_R9 = 0, R7_cnt = 0, R8_cnt = 0, R9_cnt = 0;
        string JarName_R7 = "", JarName_R8 = "", JarName_R9 = "", Prev_JarName_R7 = "", Prev_JarName_R8 = "", Prev_JarName_R9 = "", Next_JarName_R7 = "", Next_JarName_R8 = "", Next_JarName_R9 = "";
        DateTime r7_incub, r8_incub, r9_incub, r7_taskcomp, r8_taskcomp, r9_taskcomp, r7_incub_WOn, r8_incub_WOn, r9_incub_WOn, r7_incub_Woff, r8_incub_Woff, r9_incub_Woff, r7_priorChk, r8_priorChk, r9_priorChk;
        int R7_dipdelay = 0, R7_drydelay = 0, R8_dipdelay = 0, R8_drydelay = 0, R9_dipdelay = 0, R9_drydelay = 0;
        string R7_xPos = "", R7_yPos = "", R7_z1Pos = "", R7_z2Pos = "", R8_xPos = "", R8_yPos = "", R8_z1Pos = "", R8_z2Pos = "", R9_xPos = "", R9_yPos = "", R9_z1Pos = "", R9_z2Pos = "";
        Boolean r7_incub_WOn_flg = false, r8_incub_WOn_flg = false, r9_incub_WOn_flg = false, r7_incub_Woff_flg = false, r8_incub_Woff_flg = false, r9_incub_Woff_flg = false;
        Boolean R7_pickcmdissue = false, R8_pickcmdissue = false, R9_pickcmdissue = false;
        //Above code added on 26-12-2023

        //New Variable added on 29-02-2024 to display reagent names
        string RegName_R1 = "", RegName_R2 = "", RegName_R3 = "", RegName_R4 = "", RegName_R5 = "", RegName_R6 = "", RegName_R7 = "", RegName_R8 = "", RegName_R9 = "";
        string ShortRegName_R1 = "", ShortRegName_R2 = "", ShortRegName_R3 = "", ShortRegName_R4 = "", ShortRegName_R5 = "", ShortRegName_R6 = "", ShortRegName_R7 = "", ShortRegName_R8 = "", ShortRegName_R9 = "";
        int RegColor_R1 = 0, RegColor_R2 = 0, RegColor_R3 = 0, RegColor_R4 = 0, RegColor_R5 = 0, RegColor_R6 = 0, RegColor_R7 = 0, RegColor_R8 = 0, RegColor_R9 = 0;

        //New variables declared on 23-08-2024 1340
        Boolean R1_heating = false, R2_heating = false, R3_heating = false, R4_heating = false, R5_heating = false, R6_heating = false, R7_heating = false, R8_heating = false, R9_heating = false;

        //Below Parameters Added on 08-10-2024
        string RegName_R10 = "", RegName_R11 = "", RegName_R12 = "", ShortRegName_R10 = "", ShortRegName_R11 = "", ShortRegName_R12 = "";
        int RegColor_R10 = 0, RegColor_R11 = 0, RegColor_R12 = 0, r10_WaitCnt = 0, r11_WaitCnt = 0, r12_WaitCnt = 0;
        Boolean R10_heating = false, R11_heating = false, R12_heating = false;
        int r10inx = 0, r11inx = 0, r12inx = 0, r10priority = 0, r11priority = 0, r12priority = 0;
        Boolean pickedflg_R10 = false, topickupflg_R10 = false, placedflg_R10 = false, toplaceflg_R10 = false, dippedflg_R10 = false, todipflg_R10 = false;
        Boolean pickedflg_R11 = false, topickupflg_R11 = false, placedflg_R11 = false, toplaceflg_R11 = false, dippedflg_R11 = false, todipflg_R11 = false;
        Boolean pickedflg_R12 = false, topickupflg_R12 = false, placedflg_R12 = false, toplaceflg_R12 = false, dippedflg_R12 = false, todipflg_R12 = false;
        Boolean protocolinitiateflg_R10 = false, protocolcmdintiated_R10 = false, protocolStartedflg_R10 = false;
        Boolean protocolinitiateflg_R11 = false, protocolcmdintiated_R11 = false, protocolStartedflg_R11 = false;
        Boolean protocolinitiateflg_R12 = false, protocolcmdintiated_R12 = false, protocolStartedflg_R12 = false;
        Boolean R10_protostart = false, R11_protostart = false, R12_protostart = false;
        int incubtime_R10, noofdips_R10 = 0, incubtime_R11, noofdips_R11 = 0, incubtime_R12 = 0, noofdips_R12 = 0, R10_cnt = 0, R11_cnt = 0, R12_cnt = 0;
        string JarName_R10 = "", JarName_R11 = "", JarName_R12 = "", Prev_JarName_R10 = "", Prev_JarName_R11 = "", Prev_JarName_R12 = "", Next_JarName_R10 = "", Next_JarName_R11 = "", Next_JarName_R12 = "";
        DateTime r10_incub, r11_incub, r12_incub, r10_taskcomp, r11_taskcomp, r12_taskcomp, r10_incub_WOn, r11_incub_WOn, r12_incub_WOn, r10_incub_Woff, r11_incub_Woff, r12_incub_Woff, r10_priorChk, r11_priorChk, r12_priorChk;
        int R10_dipdelay = 0, R10_drydelay = 0, R11_dipdelay = 0, R11_drydelay = 0, R12_dipdelay = 0, R12_drydelay = 0;
        string R10_xPos = "", R10_yPos = "", R10_z1Pos = "", R10_z2Pos = "", R11_xPos = "", R11_yPos = "", R11_z1Pos = "", R11_z2Pos = "", R12_xPos = "", R12_yPos = "", R12_z1Pos = "", R12_z2Pos = "";
        Boolean r10_incub_WOn_flg = false, r11_incub_WOn_flg = false, r12_incub_WOn_flg = false, r10_incub_Woff_flg = false, r11_incub_Woff_flg = false, r12_incub_Woff_flg = false;
        Boolean R10_pickcmdissue = false, R11_pickcmdissue = false, R12_pickcmdissue = false;
        //Above code added on 26-12-2023

        //New Variables added to use both RA added on 12-11-2024 1135
        string move_JarNo = ""; Boolean continue_Home = false;
        int move_RA_No = 0, placed_RA_No = 0;
        int R1_RNo = 0, R2_RNo = 0, R3_RNo = 0, R4_RNo = 0, R5_RNo = 0, R6_RNo = 0, R7_RNo = 0, R8_RNo = 0, R9_RNo = 0;
        //New Variables added to use both RA added on 12-11-2024 1135

        Boolean LoadFrom_L1_H1 = false, LoadFrom_L2_H2 = false, LoadFrom_L3_H3 = false;
        Boolean Rackin_H1 = false, Rackin_H2 = false, Rackin_H3 = false;
        Boolean H1_incub_complete = false, H2_incub_complete = false, H3_incub_complete = false;
        #endregion

        SpeechSynthesizer sp = new SpeechSynthesizer();
        public Form_RunProto()
        {
            InitializeComponent();
        }
        private void InitializeComponents()
        {
            // Other initialization code

            // Subscribe to the Load event to open the COM port when the form loads
            this.Load += Form10_Load;
            // Subscribe to the SerialPinChanged event to handle changes in signal pins
            mport.PinChanged += ComportStatusChanged;

            // Other initialization code
        }

        SpeechSynthesizer reader = new SpeechSynthesizer();
        private void btn_RA_Click(object sender, EventArgs e)
        {


        }
        private DataTable fetchprotomasterdetails()
        {
            DataTable dt = new DataTable();
            SqlConnection cn = new SqlConnection(RequiredVariables.DBConnStr);
            cn.Open();
            sqlstr = "";
            sqlstr = "select ShortName,ProtocolType from ProtocolMaster Where ProtocolName = '" + cbo_protocol.Text + "'";
            sda = new SqlDataAdapter(sqlstr, con);
            sda.Fill(dt);
            sda.Dispose();
            if (cn.State == ConnectionState.Open) cn.Close();
            return dt;
        }
        private void cbo_protocol_SelectedIndexChanged(object sender, EventArgs e)
        {
            btn_start.Enabled = true;
            //getting short name from database
            if (con.ConnectionString == "")
                con.ConnectionString = RequiredVariables.DBConnStr;

            DataTable dt = new DataTable();
            dt = fetchprotomasterdetails();
            protoshortname = "";
            if (dt.Rows.Count > 0)
            {
                protoshortname = dt.Rows[0]["ShortName"].ToString();
                facusrprotocoltype = dt.Rows[0]["ProtocolType"].ToString();
            }
            dt.Dispose();
            for (int i = 0; i < JPos.Rows.Count; i++)
            {
                refresh_UI(JPos.Rows[i]["JarNo"].ToString(), "");
            }
        }
        private void Form10_Load(object sender, EventArgs e)
        {
            Constr = RequiredVariables.DBConnStr;

            ToolTip tp1 = new ToolTip();
            tp1 = new ToolTip();
            tp1.ShowAlways = true;
            tp1.SetToolTip(btn_start, "Click to Start Proto");

            tp1 = new ToolTip();
            tp1.ShowAlways = true;
            tp1.SetToolTip(btn_pause, "Click to Pause Proto");

            tp1 = new ToolTip();
            tp1.ShowAlways = true;
            tp1.SetToolTip(btn_resume, "Click to Resume Proto");

            tp1 = new ToolTip();
            tp1.ShowAlways = true;
            tp1.SetToolTip(btn_stop, "Click to Stop Proto");

            tp1 = new ToolTip();
            tp1.ShowAlways = true;
            tp1.SetToolTip(btn_Continue, "Click to Continue Proto");

            tp1 = new ToolTip();
            tp1.ShowAlways = true;
            tp1.SetToolTip(btnClose, "Click to Close Proto");


            //Adding new datatable to insert data bulk in database
            ProtoRunStatus = new DataTable("ProtoRunStatus");
            ProtoRunStatus.Columns.Add("SlNo", Type.GetType("System.Int32"));
            ProtoRunStatus.Columns.Add("ProtocolName", Type.GetType("System.String"));
            ProtoRunStatus.Columns.Add("PerformedBy", Type.GetType("System.String"));
            ProtoRunStatus.Columns.Add("PerformedOn", Type.GetType("System.String"));
            ProtoRunStatus.Columns.Add("JarName", Type.GetType("System.String"));
            ProtoRunStatus.Columns.Add("RegName", Type.GetType("System.String"));
            ProtoRunStatus.Columns.Add("RackNo", Type.GetType("System.String"));
            ProtoRunStatus.Columns.Add("ArrivedTime", Type.GetType("System.String"));
            ProtoRunStatus.Columns.Add("Month", Type.GetType("System.String"));
            ProtoRunStatus.Columns.Add("Status", Type.GetType("System.String"));
            ProtoRunStatus.Columns.Add("Temp", Type.GetType("System.Single"));
            ProtoRunStatus.Columns.Add("RunID", Type.GetType("System.Int32"));

            lbl_NxtRack.Text = "";
            lbl_disp2.Text = "";

            ZF_X = jar_Large.Location.X;
            ZF_Y = jar_Large.Location.Y;
            ZF_W = jar_Large.Width;
            ZF_H = jar_Large.Height;

            PF_X = pnl_Jars.Location.X;
            PF_Y = pnl_Jars.Location.Y;
            PF_W = pnl_Jars.Width;
            PF_H = pnl_Jars.Height;
            con.ConnectionString = Constr;
            if (con.State == ConnectionState.Closed)
                con.Open();

            //////Check the Port Available or not Available
            ////getavailableportnames();

            switch (Convert.ToInt32(System.DateTime.Now.Month.ToString()))
            {
                case 1:
                    {
                        monVal = "January";
                        break;
                    }
                case 2:
                    {
                        monVal = "February";
                        break;
                    }
                case 3:
                    {
                        monVal = "March";
                        break;
                    }
                case 4:
                    {
                        monVal = "April";
                        break;
                    }
                case 5:
                    {
                        monVal = "May";
                        break;
                    }
                case 6:
                    {
                        monVal = "June";
                        break;
                    }
                case 7:
                    {
                        monVal = "July";
                        break;
                    }
                case 8:
                    {
                        monVal = "August";
                        break;
                    }
                case 9:
                    {
                        monVal = "September";
                        break;
                    }
                case 10:
                    {
                        monVal = "October";
                        break;
                    }
                case 11:
                    {
                        monVal = "November";
                        break;
                    }
                case 12:
                    {
                        monVal = "December";
                        break;
                    }
            }

            //Jars();

            btn_start.Enabled = false;

            loadPositiondetails();
            loadprotomaster();

            //Check the Port Available or not Available
            ////getavailableportnames();
            init_port();
            tmr_portstatus.Enabled = true;
            tmr_portstatus.Interval = 5000;
            System.Threading.Thread.Sleep(2000);
            ////RequiredVariables.alljarlvlsensed = true;  //Has to comment blocked for testing


            ////////Intialize_Wash_Jars = true;
            ////////WaterValvesOnOff(1); //Starting the Water Valves before the intializing / checking the racks in Jars
            ////////System.Threading.Thread.Sleep(5000);

            ////BothZaxistohome();  //Sending Z - axis to Home inorder to avoid rack crashing
            ////System.Threading.Thread.Sleep(5000);
            //////while (Both_Z_ReachedHome == false)
            //{

            //}
            //////RequiredVariables.alljarlvlsensed = true;  //kept as true for testing
            if (RequiredVariables.alljarlvlsensed == false)
            {
                RequiredVariables.alljarlvlsensed = true;
                ////DeviceIntialize = true;
                //////call rackholding function
                //////ra_holding_racks();   //-- Temporarly commented for testing
                ////intiateunloadjars();
                ////New code added on 16092024 1802
                btn_start.Enabled = false;
                btn_stop.Enabled = false;
                btn_Continue.Enabled = false;
                cbo_protocol.Enabled = false;
                btnClose.Enabled = false;
                Communication.writeCommunicationCommands("Device Intialization started");
                //New code added on 16092024 1802
                ////Intialize_Wash_Jars = true;
                tstproto = false;
                ////WaterValvesOnOff(1); //Starting the Water Valves before the intializing / checking the racks in Jars
                settemp = 35;  //Setting default temperature as 35 degrees.
                settemperature();
            }
        }
        private void Form_RunProto_FormClosing(object sender, FormClosingEventArgs e)
        {
            RequiredVariables.RunProto_Started = false;
            RequiredVariables.alljarlvlsensed = false;
            if (mport.IsOpen)
                mport.Close();
        }
        private void Form_RunProto_FormClosed(object sender, FormClosedEventArgs e)
        {
            RequiredVariables.RunProto_Started = false;
            RequiredVariables.alljarlvlsensed = false;
            if (mport.IsOpen)
                mport.Close();
        }
        private void jar9_Load(object sender, EventArgs e)
        {

        }
        private void btnClose_Click(object sender, EventArgs e)
        {
            RequiredVariables.RunProto_Started = false;
            RequiredVariables.alljarlvlsensed = false;
            tmr_portstatus.Enabled = false;

            //code added on 18-12-2023 to update data to database server table
            if (ProtoRunStatus.Rows.Count > 0)
            {
                saveDataTable("ProtocolRun"); //New function calling to save the data to server using bulk copy added on 18-12-2023
            }

            if (con.State == ConnectionState.Open)
                con.Close();

            if (con1.State == ConnectionState.Open)
                con1.Close();

            if (mport.IsOpen == true)
                mport.Close();

            //clearing rows data from datatable
            ProtoRunStatus.Rows.Clear();
            this.Close();
        }

        private void jar16_Load(object sender, EventArgs e)
        {

        }
        private void H1_MouseLeave(object sender, EventArgs e)
        {
            pnl_Jars.Visible = false;
        }

        private void J1_MouseLeave(object sender, EventArgs e)
        {
            pnl_Jars.Visible = false;
            tmr_refresh.Enabled = false;
        }

        private void J1_MouseHover(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J1);
        }

        private void H1_MouseHover(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(H1);
        }
        private void jar16_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J13);
        }

        private void btn_Home_Click(object sender, EventArgs e)
        {
            pnl_Jars.Visible = false;
        }

        private void jar15_Load(object sender, EventArgs e)
        {

        }

        private void jar15_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J12);
        }

        private void jar14_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J11);
        }

        private void jar13_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J10);
        }

        private void jar20_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J17);
        }

        private void jar19_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J16);
        }

        private void jar18_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J15);
        }

        private void jar17_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J14);
        }

        private void jar48_Click(object sender, EventArgs e)
        {
            //load_detailstoZoomPanel(U1);
            if (DialogResult.OK == MessageBox.Show("Please remove the rack from Unloading - Jar1", RequiredVariables.Msgtext, MessageBoxButtons.OKCancel, MessageBoxIcon.Asterisk))
            {
                if (DialogResult.Yes == MessageBox.Show("Did you removed the rack from Unloading - Jar1", RequiredVariables.Msgtext, MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk))
                {
                    U1.OnlyJar = true;
                    rackinunloading[0] = 0;
                    U1.Enabled = false;
                    U1.RackNumber = "";
                }
            }
        }

        private void jar47_Click(object sender, EventArgs e)
        {
            //load_detailstoZoomPanel(U2);
            if (DialogResult.OK == MessageBox.Show("Please remove the rack from Unloading - Jar2", RequiredVariables.Msgtext, MessageBoxButtons.OKCancel, MessageBoxIcon.Asterisk))
            {
                if (DialogResult.Yes == MessageBox.Show("Did you removed the rack from Unloading - Jar2", RequiredVariables.Msgtext, MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk))
                {
                    U2.OnlyJar = true;
                    rackinunloading[1] = 0;
                    U2.Enabled = false;
                    U2.RackNumber = "";
                }
            }
        }

        private void jar46_Click(object sender, EventArgs e)
        {
            //load_detailstoZoomPanel(U3);
            if (DialogResult.OK == MessageBox.Show("Please remove the rack from Unloading - Jar3", RequiredVariables.Msgtext, MessageBoxButtons.OKCancel, MessageBoxIcon.Asterisk))
            {
                if (DialogResult.Yes == MessageBox.Show("Did you removed the rack from Unloading - Jar3", RequiredVariables.Msgtext, MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk))
                {
                    U3.OnlyJar = true;
                    rackinunloading[2] = 0;
                    U3.Enabled = false;
                    U3.RackNumber = "";
                }
            }
        }

        private void jar45_Click(object sender, EventArgs e)
        {
            //load_detailstoZoomPanel(U4);
            if (DialogResult.OK == MessageBox.Show("Please remove the rack from Unloading - Jar4", RequiredVariables.Msgtext, MessageBoxButtons.OKCancel, MessageBoxIcon.Asterisk))
            {
                if (DialogResult.Yes == MessageBox.Show("Did you removed the rack from Unloading - Jar4", RequiredVariables.Msgtext, MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk))
                {
                    U4.OnlyJar = true;
                    rackinunloading[3] = 0;
                    U4.Enabled = false;
                    U4.RackNumber = "";
                }
            }
        }

        private void jar44_Click(object sender, EventArgs e)
        {
            //load_detailstoZoomPanel(U5);
            if (DialogResult.OK == MessageBox.Show("Please remove the rack from Unloading - Jar5", RequiredVariables.Msgtext, MessageBoxButtons.OKCancel, MessageBoxIcon.Asterisk))
            {
                if (DialogResult.Yes == MessageBox.Show("Did you removed the rack from Unloading - Jar5", RequiredVariables.Msgtext, MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk))
                {
                    U5.OnlyJar = true;
                    rackinunloading[4] = 0;
                    U5.Enabled = false;
                    U5.RackNumber = "";
                }
            }
        }

        private void jar43_Click(object sender, EventArgs e)
        {
            //load_detailstoZoomPanel(U6);
            if (DialogResult.OK == MessageBox.Show("Please remove the rack from Unloading - Jar6", RequiredVariables.Msgtext, MessageBoxButtons.OKCancel, MessageBoxIcon.Asterisk))
            {
                if (DialogResult.Yes == MessageBox.Show("Did you removed the rack from Unloading - Jar6", RequiredVariables.Msgtext, MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk))
                {
                    U6.OnlyJar = true;
                    rackinunloading[5] = 0;
                    U6.Enabled = false;
                    U6.RackNumber = "";
                }
            }
        }

        private void jar12_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(W3);
        }

        private void jar11_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(W2);
        }

        private void jar10_Click(object sender, EventArgs e)
        {

            load_detailstoZoomPanel(W1);
        }

        private void jar23_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(W6);
        }

        private void jar21_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(W4);
        }

        private void jar22_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(W5);
        }

        private void jar35_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(L1);
        }

        private void jar34_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(L2);
        }

        private void jar33_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(L3);
        }

        private void heater3_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(H3);
        }

        private void heater2_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(H2);
        }

        private void heater1_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(H1);
        }

        private void jar1_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J1);
        }

        private void jar2_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J2);
        }

        private void jar3_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J3);
        }

        private void jar4_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J4);
        }

        private void jar5_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J5);
        }

        private void jar6_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J6);
        }

        private void jar7_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J7);
        }

        private void jar8_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J8);
        }

        private void jar9_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J9);
        }

        private void jar24_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J18);
        }

        private void jar25_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J19);
        }

        private void jar26_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J20);
        }

        private void jar27_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J21);
        }

        private void jar28_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J22);
        }

        private void jar29_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J23);
        }

        private void jar30_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J24);
        }

        private void jar31_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J25);
        }

        private void jar32_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J26);
        }

        private void jar36_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J27);
        }

        private void jar37_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J28);
        }

        private void jar38_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J29);
        }

        private void jar39_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J30);
        }

        private void jar40_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J31);
        }

        private void jar41_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(J32);
        }

        private void jar42_Click(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(U1);
        }

        private void load_detailstoZoomPanel(WindowsFormsControlLibrary1.RoundEdgePanel pnl)
        {
            tmrrefjarno = pnl;
            tmr_refresh.Enabled = true;
            tmr_refresh.Interval = 1000;
            pnl_Jars.Visible = true;
            processName = pnl.ProcessName;
            Rackcolor = pnl.RackColor;
            Racknumber = pnl.RackNumber;
            ReagentName = pnl.ReagentName;
            JarRack = pnl.JarRack;
            BckGroundColor = pnl.BackgroundColor;
            BckColor = pnl.BackColor;
            OnlyJar = pnl.OnlyJar;
            OnlyRack = pnl.OnlyRack;
            TaskCompletionTime = pnl.TaskCompletionTime;
            TaskProcess = pnl.TaskProcess;
            TxtColor = pnl.TextColor;
            BdrColor = pnl.BorderColor;
            elaspedtime = pnl.ElaspedTime;

            jar_Large.ProcessName = processName;
            jar_Large.RackColor = Rackcolor;
            jar_Large.RackNumber = Racknumber;
            jar_Large.ReagentName = ReagentName;

            jar_Large.BackgroundColor = BckGroundColor;
            jar_Large.BackColor = BckColor;
            jar_Large.TaskCompletionTime = TaskCompletionTime;
            jar_Large.TaskProcess = TaskProcess;
            jar_Large.TextColor = TxtColor;
            jar_Large.BorderColor = BdrColor;
            jar_Large.ElaspedTime = elaspedtime;
            if (JarRack == true)
            {
                jar_Large.JarRack = true;
            }

            if (OnlyJar == true)
                jar_Large.OnlyJar = true;

            if (OnlyRack == true)
                jar_Large.OnlyRack = true;


            CP_X = pnl.Location.X + pnl.Width * 2 + 20;

            CP_Y = pnl_Jars.Location.Y + ZF_H;
            if (CP_X > (this.Width - pnl.Width * 3))
            {
                CP_X = CP_X = pnl.Location.X - pnl.Width * 3 - 20;
            }
            //else
            //{
            //    CP_X = pnl_Jars.Location.X + pnl.Width * 2 + 20;
            //}
            if (CP_Y > PF_H)
            {
                //CP_Y = PF_H - ZF_H - 20;
                CP_Y = PF_H - ZF_H + 20;
            }
            //if(CP_X<0)
            //{
            //    CP_X = pnl.Location.X - pnl.Width * 2 - 20;
            //}

            jar_Large.Visible = true;
            pnl_Jars.Location = new Point(CP_X, CP_Y);
            jar_Large.Refresh();
            jar_Large.Show();
            jar_Large.BringToFront();
        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void btn_start_Click(object sender, EventArgs e)
        {
            try
            {
                int i = 0;
                incubtime = 0;
                cmdsnt = 0;
                Communication.SequnceNo = 0;

                cbo_protocol.Enabled = false;
                btn_start.Enabled = false;
                btn_Continue.Enabled = false;
                btn_stop.Enabled = true;
                btnClose.Enabled = false;
                Process_Continued = false;
                RA_Protorun_intiated = false;
                RequiredVariables.RunProto_Started = true;
                cbo_protocol.Enabled = false;
                Force_Stopped_WaterValve = false;
                recheck_Racks_Loaded = false;
                //////Stopping the water valves
                ////Intialize_Wash_Jars = true;
                ////WaterValvesOnOff(0); //Starting the Water Valves before the intializing / checking the racks in Jars
                ////System.Threading.Thread.Sleep(5000);

                if (ProtoRunStatus.Rows.Count <= 0)
                    ProtoRunStatus.Rows.Clear();  //clearing the data in the rows

                if (cbo_protocol.Text == "Select")
                {
                    MessageBox.Show("Please select valid protocol", "H & E Communicaton", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    cbo_protocol.Enabled = true;
                    btn_start.Enabled = true;
                    btn_Continue.Enabled = true;
                    btn_stop.Enabled = false;
                    btnClose.Enabled = true;
                    return;
                }
                //Added on 20-12-2023 1628 Ensuring no racks in Normal Jars, wsahing Jars, Unloading Jars and Heater Jars
                for (int k = 0; k < 40; k++)
                {
                    if (k < 3)
                    {
                        rackinheater[k] = 0;    //Heater Jars
                    }
                    if (k < 6)
                    {
                        rackinwaterjars[k] = 0;   //Washing Jars
                        rackinunloading[k] = 0;   //Unloading Jars
                    }
                    rackinjars[k] = 0;  //Normal Jars   
                }
                //Added on 20-12-2023 1628 Ensuring no racks in Normal Jars and Washing Jars

                /*New code added on 13082024*/
                checkrunidupdate();
                System.Threading.Thread.Sleep(500);
                //New function adding to insert the protocol run details to master table
                if (con.ConnectionString == "") con.ConnectionString = RequiredVariables.DBConnStr;
                if (con1.ConnectionString == "") con1.ConnectionString = RequiredVariables.DBConnStr;
                sqlstr = "";
                sqlstr = "Insert into ProtocolRunMaster(ProtocolName,StartTime,Month,PerformdOn,RunId) values('" + protoshortname + "','" + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss") + "','" + monVal + "','" + DateTime.Now.ToShortDateString() + "'," + m_Runid + ")";
                SqlCommand cmd = new SqlCommand(sqlstr, con1);
                if (con1.State == ConnectionState.Closed)
                    con1.Open();
                cmd.ExecuteNonQuery();
                cmd.Dispose();
                System.Threading.Thread.Sleep(500);
                //Updating test run details as run started

                //New code Added on 19-02-2024
                string str1 = "";
                str1 = System.DateTime.Now.Millisecond.ToString();
                for (int s = str1.Length; s < 3; s++)
                    str1 = "0" + str1;
                string dtrstr = "";
                dtrstr = DateTime.Now.ToString() + "." + str1;
                /*New code added on 13082024*/
                //updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString(), monVal, "Protorun Started",0);
                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", dtrstr, monVal, "Protorun Started", 0, m_Runid);
                loadprotocoldetails_db(cbo_protocol.Text);  //Loading the selected protocoldetails to data table
                r1_incub = System.DateTime.Now;
                r2_incub = System.DateTime.Now;
                r3_incub = System.DateTime.Now;
                r4_incub = System.DateTime.Now;
                r5_incub = System.DateTime.Now;
                r6_incub = System.DateTime.Now;
                r7_incub = System.DateTime.Now;
                r8_incub = System.DateTime.Now;
                r9_incub = System.DateTime.Now;
                R1_cnt = 1;
                R2_cnt = 2;
                R3_cnt = 3;
                R4_cnt = 4;
                R5_cnt = 5;
                R6_cnt = 6;
                R7_cnt = 7;
                R8_cnt = 8;
                R9_cnt = 9;
                JarName_R1 = "";
                JarName_R2 = "";
                JarName_R3 = "";
                JarName_R4 = "";
                JarName_R5 = "";
                JarName_R6 = "";
                JarName_R7 = "";
                JarName_R8 = "";
                JarName_R9 = "";
                r1inx = 0;
                r2inx = 0;
                r3inx = 0;
                r4inx = 0;
                r5inx = 0;
                r6inx = 0;
                r7inx = 0;
                r8inx = 0;
                r9inx = 0;
                Settmpintiated = false;
                TempSet = false;
                R1_protostart = false;
                R2_protostart = false;
                R3_protostart = false;
                R4_protostart = false;
                R5_protostart = false;
                R6_protostart = false;
                R7_protostart = false;
                R8_protostart = false;
                R9_protostart = false;
                continuetestflg = false;
                R1_pickcmdissue = false;
                R2_pickcmdissue = false;
                R3_pickcmdissue = false;
                R4_pickcmdissue = false;
                R5_pickcmdissue = false;
                R6_pickcmdissue = false;
                R7_pickcmdissue = false;
                R8_pickcmdissue = false;
                R9_pickcmdissue = false;
                lbl_NxtRack.Text = "";
                lbl_disp2.Text = "";
                RackIncremantVal = 1;
                r1priority = 0;
                r2priority = 0;
                r3priority = 0;
                r4priority = 0;
                r5priority = 0;
                r6priority = 0;
                r7priority = 0;
                r8priority = 0;
                r9priority = 0;
                U1.RackNumber = "";
                U2.RackNumber = "";
                U3.RackNumber = "";
                U4.RackNumber = "";
                U5.RackNumber = "";
                U6.RackNumber = "";
                tmr_Racks_Loaded.Enabled = false;
                tmr_tempstart.Enabled = false;

                if (mport.IsOpen == false)
                {
                    try
                    {
                        mport.Open();  //if comminication port got closed then opening the port.
                    }
                    catch (Exception d3)
                    {
                        MessageBox.Show("Communication cable Not connected Please connect the cable with machine", "H & E Communication", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        btn_Continue.Enabled = true;
                        btn_start.Enabled = true;
                        return;
                    }

                }
                if (Process_Continued == false)
                    disable_allflags();

                pickedflg_R1 = false; placedflg_R1 = false; topickupflg_R1 = false; toplaceflg_R1 = false;
                pickedflg_R2 = false; placedflg_R2 = false; topickupflg_R2 = false; toplaceflg_R2 = false;
                pickedflg_R3 = false; placedflg_R3 = false; topickupflg_R3 = false; toplaceflg_R3 = false;
                pickedflg_R4 = false; placedflg_R4 = false; topickupflg_R4 = false; toplaceflg_R4 = false;
                pickedflg_R5 = false; placedflg_R5 = false; topickupflg_R5 = false; toplaceflg_R5 = false;
                pickedflg_R6 = false; placedflg_R6 = false; topickupflg_R6 = false; toplaceflg_R6 = false;

                pickedflg_R7 = false; placedflg_R7 = false; topickupflg_R7 = false; toplaceflg_R7 = false;
                pickedflg_R8 = false; placedflg_R8 = false; topickupflg_R8 = false; toplaceflg_R8 = false;
                pickedflg_R9 = false; placedflg_R9 = false; topickupflg_R9 = false; toplaceflg_R9 = false;

                protocolinitiateflg_R1 = false; protocolcmdintiated_R1 = false;
                protocolinitiateflg_R2 = false; protocolcmdintiated_R2 = false;
                protocolinitiateflg_R3 = false; protocolcmdintiated_R3 = false;
                protocolinitiateflg_R4 = false; protocolcmdintiated_R4 = false;
                protocolinitiateflg_R5 = false; protocolcmdintiated_R5 = false;
                protocolinitiateflg_R6 = false; protocolcmdintiated_R6 = false;
                protocolinitiateflg_R7 = false; protocolcmdintiated_R7 = false;
                protocolinitiateflg_R8 = false; protocolcmdintiated_R8 = false;
                protocolinitiateflg_R9 = false; protocolcmdintiated_R9 = false;
                incubtime_R1_start = false; incubtime_R2_start = false; incubtime_R3_start = false; incubtime_Temp_start = false;
                DeviceIntialize = false;
                //Disableing unloading Jars
                U1.Enabled = false;
                U2.Enabled = false;
                U3.Enabled = false;
                U4.Enabled = false;
                U5.Enabled = false;
                U6.Enabled = false;
                htr_door_opencmd_intiate = false;
                htrdoorintiate = false;
                htr_door_opencmd_continue_intiate = false;
                heaterjar_racksensed = false; heaterjar_lvlintiated = false;
                tstproto = true;  //heatingreqflg
                                  ////only_homeissued = false;
                                  ////movetohome();
                                  //Stopping the water valves

                if (heatingreqflg == true)
                {
                    settemperature();
                }
                else
                {
                    Intialize_Wash_Jars = true;
                    WaterValvesOnOff(0); //Starting the Water Valves before the intializing / checking the racks in Jars                
                }

            }
            catch (Exception d3)
            {

            }
        }
        int m_Runid = 0;
        private void checkrunidupdate()
        {
            if (con1.ConnectionString == "") con1.ConnectionString = RequiredVariables.DBConnStr;
            sqlstr = "";
            sqlstr = "select * from RunIDMaster";
            SqlCommand cmd = new SqlCommand(sqlstr, con1);
            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            DataTable dt1 = new DataTable();
            sda.Fill(dt1);
            m_Runid = 0;
            if (dt1.Rows.Count > 0)
            {
                m_Runid = Convert.ToInt32(dt1.Rows[0]["RunId"].ToString());
                m_Runid = m_Runid + 1;
                dt1.Dispose();
                sqlstr = "";
                sqlstr = "Update RunIDMaster set RunId = " + m_Runid;
                cmd = new SqlCommand(sqlstr, con1);
                if (con1.State == ConnectionState.Closed)
                    con1.Open();
                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            else
            {
                m_Runid = m_Runid + 1;
                sqlstr = "";
                sqlstr = "Insert into RunIDMaster (RunId) values(" + m_Runid + ")";
                cmd = new SqlCommand(sqlstr, con1);
                if (con1.State == ConnectionState.Closed)
                    con1.Open();
                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
        }
        private void btn_resume_Click(object sender, EventArgs e)
        {

        }

        private void btn_stop_Click(object sender, EventArgs e)
        {
            if (DialogResult.Yes == MessageBox.Show("Are you sure to stop the Run...If Run Stopped test cann't be done it will get aborted.... Please confirm ", RequiredVariables.Msgtext, MessageBoxButtons.YesNo, MessageBoxIcon.Warning))
            {
                Communication.writeCommunicationCommands("User Aborted / Stopped the application forcefully ");
                userabortedprotorun();
                System.Threading.Thread.Sleep(3000);
                Force_Stopped_WaterValve = true;
                if (Heater_Switched_OnState == true)
                {
                    Heater_Switched_OnState = false;
                    stopheaters();
                }
                else
                {
                    Intialize_Wash_Jars = true;
                    valoffflg = true;
                    watervalveonpff("W1", 0);
                }
            }
            else
            {
                return;
            }
        }
        private void userabortedprotorun()
        {
            try
            {
                Racks_Reloadedto_Loadingjars = false;
                recheck_Racks_Loaded = false;
                tmr_r1.Enabled = false;
                tmr_r2.Enabled = false;
                tmr_r3.Enabled = false;
                tmr_r4.Enabled = false;
                tmr_r5.Enabled = false;
                tmr_r6.Enabled = false;
                tmr_r1_incub.Enabled = false;
                tmr_r2_incub.Enabled = false;
                tmr_r3_incub.Enabled = false;
                tmr_r4_incub.Enabled = false;
                tmr_r5_incub.Enabled = false;
                tmr_r6_incub.Enabled = false;
                tmr_r7_incub.Enabled = false;
                tmr_r8_incub.Enabled = false;
                tmr_r9_incub.Enabled = false;
                tmr_nextrack.Enabled = false;
                tmr_Racks_Loaded.Enabled = false;
                tmr_temp.Enabled = false;
                tmr_temp_incub.Enabled = false;
                tmr_refresh.Enabled = false;

                ////if (mport.IsOpen == true)
                ////    mport.Close();
                tmr_Cut.Enabled = false;
                disable_allflags();

                pickedflg_R1 = false; placedflg_R1 = false; topickupflg_R1 = false; toplaceflg_R1 = false;
                pickedflg_R2 = false; placedflg_R2 = false; topickupflg_R2 = false; toplaceflg_R2 = false;
                pickedflg_R3 = false; placedflg_R3 = false; topickupflg_R3 = false; toplaceflg_R3 = false;
                pickedflg_R4 = false; placedflg_R4 = false; topickupflg_R4 = false; toplaceflg_R4 = false;
                pickedflg_R5 = false; placedflg_R5 = false; topickupflg_R5 = false; toplaceflg_R5 = false;
                pickedflg_R6 = false; placedflg_R6 = false; topickupflg_R6 = false; toplaceflg_R6 = false;
                pickedflg_R7 = false; placedflg_R7 = false; topickupflg_R7 = false; toplaceflg_R7 = false;
                pickedflg_R8 = false; placedflg_R8 = false; topickupflg_R8 = false; toplaceflg_R8 = false;
                pickedflg_R9 = false; placedflg_R9 = false; topickupflg_R9 = false; toplaceflg_R9 = false;
                protocolinitiateflg_R1 = false; protocolcmdintiated_R1 = false;
                protocolinitiateflg_R2 = false; protocolcmdintiated_R2 = false;
                protocolinitiateflg_R3 = false; protocolcmdintiated_R3 = false;
                protocolinitiateflg_R4 = false; protocolcmdintiated_R4 = false;
                protocolinitiateflg_R5 = false; protocolcmdintiated_R5 = false;
                protocolinitiateflg_R6 = false; protocolcmdintiated_R6 = false;
                protocolinitiateflg_R7 = false; protocolcmdintiated_R7 = false;
                protocolinitiateflg_R8 = false; protocolcmdintiated_R8 = false;
                protocolinitiateflg_R9 = false; protocolcmdintiated_R9 = false;
                incubtime_R1_start = false; incubtime_R2_start = false; incubtime_R3_start = false; incubtime_Temp_start = false;
                DeviceIntialize = false;

                cbo_protocol.Enabled = true;
                btn_start.Enabled = true;
                btn_Continue.Enabled = true;
                btn_stop.Enabled = false;
                btnClose.Enabled = true;

                R1_cnt = 0;
                R2_cnt = 0;
                R3_cnt = 0;
                R4_cnt = 0;
                R5_cnt = 0;
                R6_cnt = 0;
                R7_cnt = 0;
                R8_cnt = 0;
                R9_cnt = 0;
                JarName_R1 = "";
                JarName_R2 = "";
                JarName_R3 = "";
                JarName_R4 = "";
                JarName_R5 = "";
                JarName_R6 = "";
                JarName_R7 = "";
                JarName_R8 = "";
                JarName_R9 = "";
                r1inx = 0;
                r2inx = 0;
                r3inx = 0;
                r4inx = 0;
                r5inx = 0;
                r6inx = 0;
                r7inx = 0;
                r8inx = 0;
                r9inx = 0;
                R1_protostart = false;
                R2_protostart = false;
                R3_protostart = false;
                R4_protostart = false;
                R5_protostart = false;
                R6_protostart = false;
                R7_protostart = false;
                R8_protostart = false;
                R9_protostart = false;
                continuetestflg = false;
                lbl_NxtRack.Text = "";
                lbl_disp2.Text = "";
                RackIncremantVal = 1;
                r1priority = 0;
                r2priority = 0;
                r3priority = 0;
                r4priority = 0;
                r5priority = 0;
                r6priority = 0;
                r7priority = 0;
                r8priority = 0;
                r9priority = 0;
                R1_pickcmdissue = false; R2_pickcmdissue = false; R3_pickcmdissue = false;
                R4_pickcmdissue = false; R5_pickcmdissue = false; R6_pickcmdissue = false;
                R7_pickcmdissue = false; R8_pickcmdissue = false; R9_pickcmdissue = false;
                J33.RackNumber = "";
                U2.RackNumber = "";
                U3.RackNumber = "";
                U4.RackNumber = "";
                U5.RackNumber = "";
                U6.RackNumber = "";
                if (ProtoRunStatus.Rows.Count > 0)
                {
                    saveDataTable("ProtocolRun"); //New function calling to save the data to server using bulk copy added on 18-12-2023
                }
                //New code Added on 19-02-2024
                string str1 = "";
                str1 = System.DateTime.Now.Millisecond.ToString();
                for (int s = str1.Length; s < 3; s++)
                    str1 = "0" + str1;
                string dtrstr = "";
                dtrstr = DateTime.Now.ToString() + "." + str1;
                /*New code added on 13082024*/
                //updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", dtrstr, monVal, "Protorun Stopped", 0, m_Runid); //This function added on 11-01-2024 to updated the protocol run stopped.
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        private void btn_Continue_Click(object sender, EventArgs e)
        {
            continuetask();
        }

        private void continuetask()
        {
            if (continuetestflg == false)
                continuetestflg = true;
            else if (continuetestflg == true)
                continuetestflg = false;

            Process_Continued = true;
            continuetest = System.DateTime.Now;
            continuetest = continuetest.AddSeconds(5); //Has to check with machine and run
            tmr_Continue.Enabled = true;
            tmr_Continue.Interval = 1000;
            btn_Continue.Enabled = false;
        }

        private void btn_pause_Click(object sender, EventArgs e)
        {

        }

        #region Timer operations
        #region water valve on/off
        int water_wall_on_priority = 0; //Declared on 23052024 1822
        Boolean Water_Valve_On_State = false;
        private void watervalveonpff(string jarnm, int onoffval)
        {
            try
            {
                string onoff_val = "";
                //Below code added on 08102024_1735
                if ((R1_pickcmdissue == true) || (R2_pickcmdissue == true) || (R3_pickcmdissue == true) || (R4_pickcmdissue == true) || (R5_pickcmdissue == true) || (R6_pickcmdissue == true) || (R7_pickcmdissue == true) || (R8_pickcmdissue == true) || (R9_pickcmdissue == true))
                    return;
                //Above code added on 08102024_1735
                Communication.RA_No = 0;
                if (jarnm == "W1")
                    valno = "1";
                else if (jarnm == "W2")
                    valno = "2";
                else if (jarnm == "W3")
                    valno = "3";
                else if (jarnm == "W4")
                    valno = "4";
                else if (jarnm == "W5")
                    valno = "5";
                else if (jarnm == "W6")
                    valno = "6";
                CommandName = "";
                CommandName = "WATER VALVE - " + valno + " CONTROL";
                if (onoffval == 1)
                {
                    CommandName = CommandName + " ON";
                    valonflg = true;
                    valoffflg = false;
                    water_wall_on_priority = 1;
                }
                else if (onoffval == 0)
                {
                    CommandName = CommandName + " OFF";
                    valonflg = false;
                    valoffflg = true;
                }

                if (((jarnm == "W1") || (jarnm == "W2") || (jarnm == "W3") || (jarnm == "W4") || (jarnm == "W5") || (jarnm == "W6")) && (Water_Valve_On_State == true) && (onoffval == 0))
                {
                    water_wall_on_priority = 0;
                    return;
                }

                //New code updated on 19-12-2023 1246 to avoid clash off water valves on & off state    
                if ((valno == "1") && (W1_On_State == true) && (onoffval == 1))
                {
                    water_wall_on_priority = 0;
                    return;
                }
                else if ((valno == "2") && (W2_On_State == true) && (onoffval == 1))
                {
                    water_wall_on_priority = 0;
                    return;
                }
                else if ((valno == "3") && (W3_On_State == true) && (onoffval == 1))
                {
                    water_wall_on_priority = 0;
                    return;
                }
                else if ((valno == "4") && (W4_On_State == true) && (onoffval == 1))
                {
                    water_wall_on_priority = 0;
                    return;
                }
                else if ((valno == "5") && (W5_On_State == true) && (onoffval == 1))
                {
                    water_wall_on_priority = 0;
                    return;
                }
                else if ((valno == "6") && (W6_On_State == true) && (onoffval == 1))
                {
                    water_wall_on_priority = 0;
                    return;
                }

                onoff_val = valno + "," + onoffval.ToString();
                if ((R1_pickcmdissue == false) && (R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (R6_pickcmdissue == false) && (R7_pickcmdissue == false) && (R8_pickcmdissue == false) && (R9_pickcmdissue == false))
                {
                    snd_rcvCmd(Communication.VALVE_CTRL, onoff_val);
                    tmr_Cut.Enabled = true;
                    tmr_Cut.Interval = 500;
                }
                else if (((R1_pickcmdissue == true) && (incubtime_R1 <= 18)) || ((R2_pickcmdissue == true) && (incubtime_R2 <= 18)) || ((R3_pickcmdissue == true) && (incubtime_R3 <= 18)) || ((R4_pickcmdissue == true) && (incubtime_R4 <= 18)) || ((R5_pickcmdissue == true) && (incubtime_R5 <= 18)) || ((R6_pickcmdissue == true) && (incubtime_R6 <= 18)) || ((R7_pickcmdissue == true) && (incubtime_R7 <= 18)) || ((R8_pickcmdissue == true) && (incubtime_R8 <= 18)) || ((R9_pickcmdissue == true) && (incubtime_R9 <= 18)))
                {
                    snd_rcvCmd(Communication.VALVE_CTRL, onoff_val);
                    tmr_Cut.Enabled = true;
                    tmr_Cut.Interval = 500;
                }

            }
            catch (Exception d3)
            {

            }
        }
        #endregion

        #region Incub Timers
        static SemaphoreSlim semaphore = new SemaphoreSlim(1);
        private void tmr_r1_incub_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts11 = new TimeSpan();

            int jno = 0; Boolean rackin = false;
            DateTime d2 = System.DateTime.Now; //Added on 01-03-2024 to On the water pump
            d2 = r1_incub.AddSeconds(-18); // Added on 01-03-2024 to open the water wall;
            //This has to check with device
            DateTime d3 = System.DateTime.Now;
            //d3 = r1_incub.AddSeconds(-15);
            //if (d1 >= d3)
            //{
            //    if ((R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R6_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (cmd_Exec_Comp == true) && (RA_Move_issued == false) && (RA_Move_Intiate == false) && ((JarName_R1.Contains("J")) || (JarName_R1.Contains("W"))))
            //    {
            //        move_ra_tolocation(1);
            //    }
            //}
            //This has to check with device
            if (d1 >= r1_incub)
            {
                tmr_r1_incub.Enabled = false;
                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    ////System.Threading.Thread.Sleep(500);
                }

                //below code updated on 08-05-2024 in order avoid clash of racks
                if ((R2_pickcmdissue == true) || (R3_pickcmdissue == true) || (R4_pickcmdissue == true) || (R5_pickcmdissue == true) || (R6_pickcmdissue == true) || (R7_pickcmdissue == true) || (R8_pickcmdissue == true) || (R9_pickcmdissue == true) || (rackloadingtoJar == true) || (RA_Move_issued == true))
                {
                    r1_incub = r1_incub.AddSeconds(15);
                    tmr_r1_incub.Enabled = true;
                    tmr_r1_incub.Interval = 1000;
                    r1_taskcomp = r1_taskcomp.AddSeconds(15);
                    r1_incub_Woff = r1_incub_Woff.AddSeconds(15);
                    r1_WaitCnt++;
                    Communication.writeCommunicationCommands("15 Secconds Timer incrementes in Jar " + JarName_R1 + " for " + "R" + R1_cnt.ToString() + " as other racks picking by RA in tmr_r1_incub()");
                    return;
                }
                //Above code updated on 08-05-2024  in order avoid clash of racks

                //Below code added on 30-08-2024 1140
                TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
                TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
                ts1 = r2_incub.Subtract(r1_incub);
                ts2 = r3_incub.Subtract(r1_incub);
                ts3 = r4_incub.Subtract(r1_incub);
                ts4 = r5_incub.Subtract(r1_incub);
                ts5 = r6_incub.Subtract(r1_incub);

                if ((JarName_R1 == "W1") || (JarName_R1 == "W2") || (JarName_R1 == "W3") || (JarName_R1 == "W4") || (JarName_R1 == "W5") || (JarName_R1 == "W6"))
                {
                    if ((ts1.Seconds > 0 && ts1.Seconds <= 9) || (ts2.Seconds > 0 && ts2.Seconds <= 9) || (ts3.Seconds > 0 && ts3.Seconds <= 9) || (ts4.Seconds > 0 && ts4.Seconds <= 9) || (ts5.Seconds > 0 && ts5.Seconds <= 9))
                    {
                        r1_incub = r1_incub.AddSeconds(18);
                        tmr_r1_incub.Enabled = true;
                        tmr_r1_incub.Interval = 1000;
                        r1_taskcomp = r1_taskcomp.AddSeconds(18);
                        Communication.writeCommunicationCommands("18 Secconds Timer incrementes in Jar " + JarName_R1 + " for " + "R" + R1_cnt.ToString() + " as this rack in water station and other rack is elasping time in tmr_r1_incub()");
                        return;
                    }
                }
                //Above code added on 30-08-2024 1140
                //Below code updated on 01-04-2024 to give priority to previous updated count
                if (((r1_WaitCnt < r2_WaitCnt) || (r1_WaitCnt < r3_WaitCnt) || (r1_WaitCnt < r4_WaitCnt) || (r1_WaitCnt < r5_WaitCnt) || (r1_WaitCnt < r6_WaitCnt) || (r1_WaitCnt < r7_WaitCnt) || (r1_WaitCnt < r8_WaitCnt) || (r1_WaitCnt < r9_WaitCnt)) && (r1priority == 0))
                {
                    r1_incub = r1_incub.AddSeconds(11);
                    tmr_r1_incub.Enabled = true;
                    tmr_r1_incub.Interval = 1000;
                    r1_taskcomp = r1_taskcomp.AddSeconds(11);
                    r1_incub_Woff = r1_incub_Woff.AddSeconds(11);
                    r1_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R1 + " for " + "R" + R1_cnt.ToString() + " as previous racks are in Waiting in tmr_r1_incub()");
                    //Next rack calculation
                    ////if (nxtrackloading > r1_incub)
                    ////    ts11 = nxtrackloading.Subtract(r1_incub);
                    ////else
                    ////    ts11 = r1_incub.Subtract(nxtrackloading);

                    ////if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 11))
                    ////{
                    ////    nxtrackloading = nxtrackloading.AddSeconds(11);
                    ////}
                    return;
                }

                //Below code added on 05-12-2023 1055 in order to avoid clash
                if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r7priority == 1) || (r8priority == 1) || (r9priority == 1)) && (r1priority == 0))
                {
                    r1_incub = r1_incub.AddSeconds(11);
                    r1_taskcomp = r1_taskcomp.AddSeconds(11);
                    tmr_r1_incub.Enabled = true;
                    tmr_r1_incub.Interval = 1000;
                    r1_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R1 + " for " + "R" + R1_cnt.ToString() + " as other racks are in high priority in tmr_r1_incub()");
                    ////if (nxtrackloading > r1_incub)
                    ////    ts11 = nxtrackloading.Subtract(r1_incub);
                    ////else
                    ////    ts11 = r1_incub.Subtract(nxtrackloading);

                    ////if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 11))
                    ////{
                    ////    nxtrackloading = nxtrackloading.AddSeconds(11);
                    ////}
                    return;
                }
                //Below code added on 20-12-2023 1644 to avoid clash 

                jno = Convert.ToInt32(Next_JarName_R1.Substring(1));
                if (Next_JarName_R1.Contains("J"))
                {
                    if (rackinjars[jno - 1] == 1)
                        rackin = true;
                }
                else if (Next_JarName_R1.Contains("W"))
                {
                    if (rackinwaterjars[jno - 1] == 1)
                        rackin = true;
                }
                if (rackin == true)
                {
                    r1_incub = r1_incub.AddSeconds(11);
                    r1_taskcomp = r1_taskcomp.AddSeconds(11);
                    tmr_r1_incub.Enabled = true;
                    tmr_r1_incub.Interval = 1000;

                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R1 + " for " + "R" + R1_cnt.ToString() + " as other racks are in high priority in tmr_r1_incub()");
                    ////if (nxtrackloading > r1_incub)
                    ////    ts11 = nxtrackloading.Subtract(r1_incub);
                    ////else
                    ////    ts11 = r1_incub.Subtract(nxtrackloading);

                    ////if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 11))
                    ////{
                    ////    nxtrackloading = nxtrackloading.AddSeconds(11);
                    ////}
                    return;
                }

                //Above code added on 20-12-2023 1644 to avoid clash 

                if ((cmd_Exec_Comp == false))
                {
                    r1_incub = r1_incub.AddSeconds(11);
                    r1_taskcomp = r1_taskcomp.AddSeconds(11);
                    tmr_r1_incub.Enabled = true;
                    tmr_r1_incub.Interval = 1000;
                    r1_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R1 + " for " + "R" + R1_cnt.ToString() + " as previously excuted command is in process in tmr_r1_incub()");
                    ////if (nxtrackloading > r1_incub)
                    ////    ts11 = nxtrackloading.Subtract(r1_incub);
                    ////else
                    ////    ts11 = r1_incub.Subtract(nxtrackloading);

                    ////if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 11))
                    ////{
                    ////    nxtrackloading = nxtrackloading.AddSeconds(11);
                    ////}
                    return;
                }
                //Above code added on 05-12-2023 1055 in order to avoid clash

                if ((Process_Continued == true) && (protocolinitiateflg_R1 == false))
                    protocolinitiateflg_R1 = true;
                //Continue Mode rack calculation
                if (continuetest > r1_incub)
                    ts11 = continuetest.Subtract(r1_incub);
                else
                    ts11 = r1_incub.Subtract(continuetest);
                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 27))
                {
                    continuetest = continuetest.AddSeconds(27);
                }
                //Next rack calculation
                if (nxtrackloading > r1_incub)
                    ts11 = nxtrackloading.Subtract(r1_incub);
                else
                    ts11 = r1_incub.Subtract(nxtrackloading);

                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 18))
                {
                    nxtrackloading = nxtrackloading.AddSeconds(18);
                }

                //New code added on 15-11-2023 as checked for priority
                check_priority_times(1);
                if (p1protorun_flg == false)
                {
                    r1_incub = r1_incub.AddSeconds(5);
                    r1_taskcomp = r1_taskcomp.AddSeconds(5);
                    tmr_r1_incub.Enabled = true;
                    tmr_r1_incub.Interval = 1000;
                    r1_WaitCnt++;
                    Communication.writeCommunicationCommands("5 Secconds Timer incrementes in Jar " + JarName_R1 + " for " + "R" + R1_cnt.ToString() + " as priority given to other rack in tmr_r1_incub()");
                    ////if (nxtrackloading > r1_incub)
                    ////    ts11 = nxtrackloading.Subtract(r1_incub);
                    ////else
                    ////    ts11 = r1_incub.Subtract(nxtrackloading);

                    ////if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 5))
                    ////{
                    ////    nxtrackloading = nxtrackloading.AddSeconds(5);
                    ////}
                    return;
                }
                //Below code added on 13-12-2023 to check the washing time completed
                if (JarName_R1 == "W1")
                    W1_On_State = false;
                else if (JarName_R1 == "W2")
                    W2_On_State = false;
                else if (JarName_R1 == "W3")
                    W3_On_State = false;
                else if (JarName_R1 == "W4")
                    W4_On_State = false;
                else if (JarName_R1 == "W5")
                    W5_On_State = false;
                else if (JarName_R1 == "W6")
                    W6_On_State = false;

                ////watervalveonpff(JarName_R1, 0);
                ////System.Threading.Thread.Sleep(750);

                //Above code added on 13-12-2023 to check the washing time completed
                if ((JarName_R1 == "W1") || (JarName_R1 == "W2") || (JarName_R1 == "W3") || (JarName_R1 == "W4") || (JarName_R1 == "W5") || (JarName_R1 == "W6"))
                {
                    watervalveonpff(JarName_R1, 0);
                    System.Threading.Thread.Sleep(750);
                }
                if ((JarName_R1 == "H1") || (JarName_R1 == "H2") || (JarName_R1 == "H3"))
                {
                    if (JarName_R1 == "H1") { H1_incub_complete = true; }
                    else if (JarName_R1 == "H2") { H2_incub_complete = true; }
                    else if (JarName_R1 == "H3") { H3_incub_complete = true; }
                    open_htrdoor();
                }
                else
                {
                    RA_Move_issued = false;
                    if (protocolinitiateflg_R1 == true)
                        protocolrun_R1();
                }
            }
            else
            {
                ////////Below code added on 04-12-2023 1220
                //////if ((d1 >= r1_priorChk) && (r1_priorChk_flg == false))
                //////{
                //////    r1_priorChk_flg = true;
                //////    check_priority_times(1);
                //////}

                //////code written on 28-11-2023 1526 to read the temperature                
                ////if ((heatingreqflg == true) && (Readtmpintiated_reinitiate == false) && (TempReadingStarted == false))
                ////{
                ////    Readtmpintiated_reinitiate = true;
                ////    readtemperature();
                ////    //tmr_temp.Enabled = true;
                ////    //tmr_temp.Interval = 5000;
                ////}

                //Write code to On / Off water Value written on 11-11-2023_1540
                //Code modified on 12-12-2023 to start & stop the water values
                washrackno = R1_cnt;
                DateTime doff = r1_incub_Woff.AddSeconds(10); // Added 15-12-2023 to to stop unnecessary command sending                
                //////New code updated on 21-12-2023 to insert the loaded data to database
                ////DateTime doff1 = r1_incub_Woff.AddSeconds(10); // Added 21-12-2023 to update data to database
                ////if ((d1 >= r1_incub_Woff) && (d1 <= doff1) && tmr_update_flg==false)   //Modified on 21-12-2023 to update data to database
                ////{
                ////    tmr_update_flg = true;
                ////    tmr_update.Enabled = true;
                ////    tmr_update.Interval = 2000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database
                if (Next_JarName_R1.Contains("W"))
                {
                    if ((R1_pickcmdissue == false) && (R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (R6_pickcmdissue == false) && (R7_pickcmdissue == false) && (R8_pickcmdissue == false) && (R9_pickcmdissue == false))
                    {
                        //On Condition
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r6priority == 7) || (r6priority == 8) || (r6priority == 9)) && (r1priority == 0))
                        {
                            r1_incub_WOn = r1_incub_WOn.AddSeconds(10);
                            d2 = d2.AddSeconds(10);
                        }
                        else
                        {
                            if ((d1 >= r1_incub_WOn) && r1_incub_WOn_flg == false && (cmd_Exec_Comp == true))
                            {
                                r1_incub_WOn_flg = true;
                                Intialize_Wash_Jars = false;
                                Intialize_Wash_Jars = false;
                                watervalveonpff(Next_JarName_R1, 1);
                            }
                        }
                    }
                }
                if (JarName_R1.Contains("J"))   ////if (Prev_JarName_R1.Contains("W"))
                {
                    if (cmd_Exec_Comp == true)
                    {
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1)) && (r1priority == 0))
                        {
                            r1_incub_Woff = r1_incub_Woff.AddSeconds(18);
                        }
                        else
                        {
                            //Off condition
                            if ((d1 >= r1_incub_Woff) && (d1 <= doff))   //Modified on 15-12-2023 to send the Valve shut command between the time  ////if ((d1 >= r1_incub_Woff) && (r1_incub_Woff_flg == false))
                            {
                                for (int woff = 0; woff < water_valves_on_off_state.Length; woff++)
                                {
                                    if (water_valves_on_off_state[woff] == 1)
                                    {
                                        if ((woff == 0) && (W1_On_State == false)) watervalveonpff("W1", 0);
                                        else if ((woff == 1) && (W2_On_State == false)) watervalveonpff("W2", 0);
                                        else if ((woff == 2) && (W3_On_State == false)) watervalveonpff("W3", 0);
                                        else if ((woff == 3) && (W4_On_State == false)) watervalveonpff("W4", 0);
                                        else if ((woff == 4) && (W5_On_State == false)) watervalveonpff("W5", 0);
                                        else if ((woff == 5) && (W6_On_State == false)) watervalveonpff("W6", 0);
                                        System.Threading.Thread.Sleep(500);
                                    }
                                }
                            }
                        }
                    }
                }
                //lbl_tmr1.Text = "RNo. R" + R1_cnt.ToString() + ", JNo." + JarName_R1 + " Elasped-" + d1.ToString().Substring(10) + " Incub-" + r1_incub.ToString().Substring(10) + " Task Complete By-" + r1_taskcomp.ToString().Substring(10);
                if (JarName_R1.Contains("H"))
                    updateheatertimings(JarName_R1, "R" + R1_cnt.ToString(), true, 1);
                else
                    updatetiming(JarName_R1, "R" + R1_cnt.ToString(), 1);

            }
        }
        private void tmr_r2_incub_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts11 = new TimeSpan();
            int jno = 0; Boolean rackin = false;
            //This has to check with device
            DateTime d3 = System.DateTime.Now;
            //d3 = r2_incub.AddSeconds(-15);
            //if (d1 >= d3)
            //{
            //    if ((R1_pickcmdissue == false) && (R3_pickcmdissue == false) && (R6_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (cmd_Exec_Comp == true) && (RA_Move_issued == false) && (RA_Move_Intiate == false) && ((JarName_R2.Contains("J")) || (JarName_R2.Contains("W"))))
            //    {
            //        move_ra_tolocation(2);
            //    }
            //}
            //This has to check with device
            if (d1 >= r2_incub)
            {
                tmr_r2_incub.Enabled = false;
                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    //System.Threading.Thread.Sleep(1000);
                }

                //below code updated on 08-05-2024 in order avoid clash of racks
                if ((R1_pickcmdissue == true) || (R3_pickcmdissue == true) || (R4_pickcmdissue == true) || (R5_pickcmdissue == true) || (R6_pickcmdissue == true) || (R7_pickcmdissue == true) || (R8_pickcmdissue == true) || (R9_pickcmdissue == true) || (rackloadingtoJar == true) || (RA_Move_issued == true))
                {
                    r2_incub = r2_incub.AddSeconds(15);
                    tmr_r2_incub.Enabled = true;
                    tmr_r2_incub.Interval = 1000;
                    r2_taskcomp = r2_taskcomp.AddSeconds(15);
                    r2_incub_Woff = r2_incub_Woff.AddSeconds(15);
                    r2_WaitCnt++;
                    Communication.writeCommunicationCommands("15 Secconds Timer incrementes in Jar " + JarName_R2 + " for " + "R" + R2_cnt.ToString() + " as other racks picking by RA in tmr_r2_incub()");
                    if ((r1inx > 0) && (R1_protostart == true) && (r2inx > 0) && (R2_protostart == true) && (r3inx == 0) && (R3_protostart == false))
                    {
                        nxtrackloading = nxtrackloading.AddSeconds(15);
                    }
                    return;
                }
                //Above code updated on 08-05-2024  in order avoid clash of racks


                //Below code added on 30-08-2024 1140
                TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
                TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
                ts1 = r1_incub.Subtract(r2_incub);
                ts2 = r3_incub.Subtract(r2_incub);
                ts3 = r4_incub.Subtract(r2_incub);
                ts4 = r5_incub.Subtract(r2_incub);
                ts5 = r6_incub.Subtract(r2_incub);

                if ((JarName_R2 == "W1") || (JarName_R2 == "W2") || (JarName_R2 == "W3") || (JarName_R2 == "W4") || (JarName_R2 == "W5") || (JarName_R2 == "W6"))
                {
                    if ((ts1.Seconds > 0 && ts1.Seconds <= 9) || (ts2.Seconds > 0 && ts2.Seconds <= 9) || (ts3.Seconds > 0 && ts3.Seconds <= 9) || (ts4.Seconds > 0 && ts4.Seconds <= 9) || (ts5.Seconds > 0 && ts5.Seconds <= 9))
                    {
                        r2_incub = r2_incub.AddSeconds(18);
                        tmr_r2_incub.Enabled = true;
                        tmr_r2_incub.Interval = 1000;
                        r2_taskcomp = r2_taskcomp.AddSeconds(18);
                        Communication.writeCommunicationCommands("18 Secconds Timer incrementes in Jar " + JarName_R2 + " for " + "R" + R2_cnt.ToString() + " as this rack in water station and other rack is elasping time in tmr_r2_incub()");
                        return;
                    }
                }
                //Above code added on 30-08-2024 1140

                //below code updated on 01-04-2024 to take the latest count value first
                if (((r2_WaitCnt < r1_WaitCnt) || (r2_WaitCnt < r3_WaitCnt) || (r2_WaitCnt < r4_WaitCnt) || (r2_WaitCnt < r5_WaitCnt) || (r2_WaitCnt < r6_WaitCnt) || (r2_WaitCnt < r7_WaitCnt) || (r2_WaitCnt < r8_WaitCnt) || (r2_WaitCnt < r9_WaitCnt)) && (r2priority == 0))
                {
                    r2_incub = r2_incub.AddSeconds(11);
                    tmr_r2_incub.Enabled = true;
                    tmr_r2_incub.Interval = 1000;
                    r2_taskcomp = r2_taskcomp.AddSeconds(11);
                    r2_incub_Woff = r2_incub_Woff.AddSeconds(11);
                    r2_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R2 + " for " + "R" + R2_cnt.ToString() + " as previous racks are in Waiting in tmr_r2_incub()");
                    ////if ((r1inx > 0) && (R1_protostart == true) && (r2inx > 0) && (R2_protostart == true) && (r3inx == 0) && (R3_protostart == false))
                    ////{
                    ////    nxtrackloading = nxtrackloading.AddSeconds(11);
                    ////}
                    return;
                }

                //Below code added on 05-12-2023 1055 in order to avoid clash
                if (((r1priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r7priority == 1) || (r8priority == 1) || (r9priority == 1)) && (r2priority == 0))
                {
                    r2_incub = r2_incub.AddSeconds(11);
                    r2_taskcomp = r2_taskcomp.AddSeconds(11);
                    tmr_r2_incub.Enabled = true;
                    tmr_r2_incub.Interval = 1000;
                    r2_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R2 + " for " + "R" + R2_cnt.ToString() + " as other racks are in high priority in tmr_r2_incub()");
                    ////if ((r1inx > 0) && (R1_protostart == true) && (r2inx > 0) && (R2_protostart == true) && (r3inx == 0) && (R3_protostart == false))
                    ////{
                    ////    nxtrackloading = nxtrackloading.AddSeconds(11);
                    ////}
                    return;
                }
                //Below code added on 20-12-2023 1644 to avoid clash
                if (r2priority == 0)
                {
                    jno = Convert.ToInt32(Next_JarName_R2.Substring(1));
                    if (Next_JarName_R2.Contains("J"))
                    {
                        if (rackinjars[jno - 1] == 1)
                            rackin = true;
                    }
                    else if (Next_JarName_R2.Contains("W"))
                    {
                        if (rackinwaterjars[jno - 1] == 1)
                            rackin = true;
                    }
                    if (rackin == true)
                    {
                        r2_incub = r2_incub.AddSeconds(11);
                        r2_taskcomp = r2_taskcomp.AddSeconds(11);
                        tmr_r2_incub.Enabled = true;
                        tmr_r2_incub.Interval = 1000;
                        return;
                    }
                }
                //Above code added on 20-12-2023 1644 to avoid clash 
                if ((cmd_Exec_Comp == false) && (r2priority == 0))
                {
                    r2_incub = r2_incub.AddSeconds(11);
                    r2_taskcomp = r2_taskcomp.AddSeconds(11);
                    tmr_r2_incub.Enabled = true;
                    tmr_r2_incub.Interval = 1000;
                    return;
                }
                //Above code added on 05-12-2023 1055 in order to avoid clash

                if ((Process_Continued == true) && (protocolinitiateflg_R2 == false))
                    protocolinitiateflg_R2 = true;

                if (continuetest > r2_incub)
                    ts11 = continuetest.Subtract(r2_incub);
                else
                    ts11 = r2_incub.Subtract(continuetest);

                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 27))
                {
                    continuetest = continuetest.AddSeconds(27);
                }
                //Next rack calculation
                if (nxtrackloading > r2_incub)
                    ts11 = nxtrackloading.Subtract(r2_incub);
                else
                    ts11 = r2_incub.Subtract(nxtrackloading);

                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 18))
                {
                    nxtrackloading = nxtrackloading.AddSeconds(18);
                }


                //checking next rack timings and updating the value by 10 seconds 
                //Added on 16-08-2023
                ////if (r2_incub > r1_incub)
                ////{
                ////    ts2 = r2_incub.Subtract(r1_incub);
                ////}
                ////else
                ////{
                ////    ts2 = r1_incub.Subtract(r2_incub);
                ////}

                ////if (r2_incub > r3_incub)
                ////{
                ////    ts3 = r2_incub.Subtract(r3_incub);
                ////}
                ////else
                ////{
                ////    ts3 = r3_incub.Subtract(r2_incub);
                ////}

                ////if (ts2.TotalSeconds <= 11)
                ////{
                ////    r1_incub = r1_incub.AddSeconds(11);
                ////}
                ////if (ts3.TotalSeconds <= 11)
                ////{
                ////    r3_incub = r3_incub.AddSeconds(11);
                ////}

                //Modified code added on 22-11-2023 22:59
                check_priority_times(2);
                //Added on 16-08-2023                
                if (p2protorun_flg == false)
                {
                    tmr_r2_incub.Enabled = true;
                    tmr_r2_incub.Interval = 1000;
                    return;
                }
                //Below code added on 13-12-2023 to check the washing time completed
                if (JarName_R2 == "W1")
                    W1_On_State = false;
                else if (JarName_R2 == "W2")
                    W2_On_State = false;
                else if (JarName_R2 == "W3")
                    W3_On_State = false;
                else if (JarName_R2 == "W4")
                    W4_On_State = false;
                else if (JarName_R2 == "W5")
                    W5_On_State = false;
                else if (JarName_R2 == "W6")
                    W6_On_State = false;
                //Above code added on 13-12-2023 to check the washing time completed
                if ((JarName_R2 == "W1") || (JarName_R2 == "W2") || (JarName_R2 == "W3") || (JarName_R2 == "W4") || (JarName_R2 == "W5") || (JarName_R2 == "W6"))
                {
                    Intialize_Wash_Jars = false;
                    watervalveonpff(JarName_R2, 0);
                    System.Threading.Thread.Sleep(750);
                }
                if ((JarName_R2 == "H1") || (JarName_R2 == "H2") || (JarName_R2 == "H3"))
                {
                    if (JarName_R2 == "H1") { H1_incub_complete = true; }
                    else if (JarName_R2 == "H2") { H2_incub_complete = true; }
                    else if (JarName_R2 == "H3") { H3_incub_complete = true; }
                    open_htrdoor();
                }
                else
                {
                    RA_Move_issued = false;
                    if (protocolinitiateflg_R2 == true)
                        protocolrun_R2();
                }
            }
            else
            {
                ////////if ((d1 >= r2_priorChk) && (r2_priorChk_flg == false))
                ////////{
                ////////    r2_priorChk_flg = true;
                ////////    check_priority_times(2);                    
                ////////}

                //////code written on 28-11-2023 1526 to read the temperature
                ////if ((heatingreqflg == true) && (Readtmpintiated_reinitiate == false) && (TempReadingStarted == false))
                ////{
                ////    readtemperature();
                ////}

                //////New code updated on 21-12-2023 to insert the loaded data to database
                ////DateTime doff1 = r2_incub_Woff.AddSeconds(10); // Added 21-12-2023 to update data to database
                ////if ((d1 >= r2_incub_Woff) && (d1 <= doff1) && tmr_update_flg == false)   //Modified on 21-12-2023 to update data to database
                ////{
                ////    tmr_update_flg = true;
                ////    tmr_update.Enabled = true;
                ////    tmr_update.Interval = 2000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database

                //Write code to On / Off water Value written on 11112023_1540
                //code modified on 12-12-2023 to On & off the water pump as per condition
                if (Next_JarName_R2.Contains("W"))
                {
                    washrackno = R2_cnt;
                    if ((R1_pickcmdissue == false) && (R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (R6_pickcmdissue == false) && (R7_pickcmdissue == false) && (R8_pickcmdissue == false) && (R9_pickcmdissue == false))
                    {
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1)) || (r1priority == 1))
                        {
                            r2_incub_WOn = r2_incub_WOn.AddSeconds(18);
                        }
                        else
                        {
                            if ((d1 >= r2_incub_WOn) && (r2_incub_WOn_flg == false) && (cmd_Exec_Comp == true))
                            {
                                r2_incub_WOn_flg = true;
                                Intialize_Wash_Jars = false;
                                watervalveonpff(Next_JarName_R2, 1);
                            }
                        }
                    }
                }
                if (JarName_R2.Contains("J")) ////if (Prev_JarName_R2.Contains("W"))
                {
                    if (cmd_Exec_Comp == true)
                    {
                        DateTime doff = r2_incub_Woff.AddSeconds(20); // Added 15-12-2023 to to stop unnecessary command sending
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1)) || (r1priority == 1))
                        {
                            r2_incub_Woff = r2_incub_Woff.AddSeconds(18);
                        }
                        else
                        {
                            //Off condition
                            if ((d1 >= r2_incub_Woff) && (d1 <= doff))   //Modified on 15-12-2023 to send the Valve shut command between the time  ////if ((d2 >= r2_incub_Woff) && (r2_incub_Woff_flg == false))
                            {
                                for (int woff = 0; woff < water_valves_on_off_state.Length; woff++)
                                {
                                    if (water_valves_on_off_state[woff] == 1)
                                    {
                                        if ((woff == 0) && (W1_On_State == false)) watervalveonpff("W1", 0);
                                        else if ((woff == 1) && (W2_On_State == false)) watervalveonpff("W2", 0);
                                        else if ((woff == 2) && (W3_On_State == false)) watervalveonpff("W3", 0);
                                        else if ((woff == 3) && (W4_On_State == false)) watervalveonpff("W4", 0);
                                        else if ((woff == 4) && (W5_On_State == false)) watervalveonpff("W5", 0);
                                        else if ((woff == 5) && (W6_On_State == false)) watervalveonpff("W6", 0);
                                    }
                                }
                            }
                        }
                    }
                }
                //lbl_tmr2.Text = "RNo. R" + R2_cnt.ToString() + ",JNo." + JarName_R2 + " Elasped-" + d1.ToString().Substring(10) + " Incub-" + r2_incub.ToString().Substring(10) + " Task Complete By-" + r2_taskcomp.ToString().Substring(10);
                if (JarName_R2.Contains("H"))
                    updateheatertimings(JarName_R2, "R" + R2_cnt.ToString(), true, 2);
                else
                    updatetiming(JarName_R2, "R" + R2_cnt.ToString(), 2);
            }
        }
        private void tmr_r3_incub_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts11 = new TimeSpan();
            int jno = 0; Boolean rackin = false;
            //This has to check with device
            DateTime d3 = System.DateTime.Now;
            //d3 = r3_incub.AddSeconds(-15);
            //if (d1 >= d3)
            //{
            //    if ((R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R6_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (cmd_Exec_Comp == true) && (RA_Move_issued == false) && (RA_Move_Intiate == false) && ((JarName_R3.Contains("J")) || (JarName_R3.Contains("W"))))
            //    {
            //        move_ra_tolocation(3);
            //    }
            //}
            //This has to check with device
            if (d1 >= r3_incub)
            {
                tmr_r3_incub.Enabled = false;
                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    ////System.Threading.Thread.Sleep(1000);
                }

                //below code updated on 08-05-2024 in order avoid clash of racks
                if ((R2_pickcmdissue == true) || (R1_pickcmdissue == true) || (R4_pickcmdissue == true) || (R5_pickcmdissue == true) || (R6_pickcmdissue == true) || (R7_pickcmdissue == true) || (R8_pickcmdissue == true) || (R9_pickcmdissue == true) || (rackloadingtoJar == true) || (RA_Move_issued == true))
                {
                    r3_incub = r3_incub.AddSeconds(15);                   
                    r3_taskcomp = r3_taskcomp.AddSeconds(15);
                    tmr_r3_incub.Enabled = true;
                    tmr_r3_incub.Interval = 1000;
                    r3_incub_Woff = r3_incub_Woff.AddSeconds(15);
                    r3_WaitCnt++;
                    Communication.writeCommunicationCommands("15 Secconds Timer incrementes in Jar " + JarName_R3 + " for " + "R" + R3_cnt.ToString() + " as other racks picking by RA in tmr_r3_incub()");
                    return;
                }
                //Above code updated on 08-05-2024  in order avoid clash of racks


                //Below code added on 30-08-2024 1140
                TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
                TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
                ts1 = r1_incub.Subtract(r3_incub);
                ts2 = r2_incub.Subtract(r3_incub);
                ts3 = r4_incub.Subtract(r3_incub);
                ts4 = r5_incub.Subtract(r3_incub);
                ts5 = r6_incub.Subtract(r3_incub);

                if ((JarName_R3 == "W1") || (JarName_R3 == "W2") || (JarName_R3 == "W3") || (JarName_R3 == "W4") || (JarName_R3 == "W5") || (JarName_R3 == "W6"))
                {
                    if ((ts1.Seconds > 0 && ts1.Seconds <= 9) || (ts2.Seconds > 0 && ts2.Seconds <= 9) || (ts3.Seconds > 0 && ts3.Seconds <= 9) || (ts4.Seconds > 0 && ts4.Seconds <= 9) || (ts5.Seconds > 0 && ts5.Seconds <= 9))
                    {
                        r3_incub = r3_incub.AddSeconds(18);
                        tmr_r3_incub.Enabled = true;
                        tmr_r3_incub.Interval = 1000;
                        r3_taskcomp = r3_taskcomp.AddSeconds(18);
                        Communication.writeCommunicationCommands("18 Secconds Timer incrementes in Jar " + JarName_R3 + " for " + "R" + R3_cnt.ToString() + " as this rack in water station and other rack is elasping time in tmr_r3_incub()");
                        return;
                    }
                }
                //Above code added on 30-08-2024 1140
                if (((r3_WaitCnt < r2_WaitCnt) || (r3_WaitCnt < r1_WaitCnt) || (r3_WaitCnt < r4_WaitCnt) || (r3_WaitCnt < r5_WaitCnt) || (r3_WaitCnt < r6_WaitCnt) || (r3_WaitCnt < r7_WaitCnt) || (r3_WaitCnt < r8_WaitCnt) || (r3_WaitCnt < r9_WaitCnt)) && (r3priority == 0))
                {
                    r3_incub = r3_incub.AddSeconds(11);
                    tmr_r3_incub.Enabled = true;
                    tmr_r3_incub.Interval = 1000;
                    r3_taskcomp = r3_taskcomp.AddSeconds(11);
                    r3_incub_Woff = r3_incub_Woff.AddSeconds(11);
                    r3_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R3 + " for " + "R" + R3_cnt.ToString() + " as previous racks are in Waiting in tmr_r3_incub()");
                    return;
                }

                //Below code added on 05-12-2023 1055 in order to avoid clash
                if (((r1priority == 1) || (r2priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r8priority == 1) || (r7priority == 1) || (r9priority == 1)) && (r3priority == 0))
                {
                    r3_incub = r3_incub.AddSeconds(11);
                    r3_taskcomp = r3_taskcomp.AddSeconds(11);
                    tmr_r3_incub.Enabled = true;
                    tmr_r3_incub.Interval = 1000;
                    r3_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R3 + " for " + "R" + R3_cnt.ToString() + " as other racks are in high priority in tmr_r3_incub()");
                    return;
                }
                //Below code added on 20-12-2023 1644 to avoid clash 
                if (r3priority == 0)
                {
                    jno = Convert.ToInt32(Next_JarName_R3.Substring(1));
                    if (Next_JarName_R3.Contains("J"))
                    {
                        if (rackinjars[jno - 1] == 1)
                            rackin = true;
                    }
                    else if (Next_JarName_R3.Contains("W"))
                    {
                        if (rackinwaterjars[jno - 1] == 1)
                            rackin = true;
                    }
                    if (rackin == true)
                    {
                        r3_incub = r3_incub.AddSeconds(11);
                        r3_taskcomp = r3_taskcomp.AddSeconds(11);
                        tmr_r3_incub.Enabled = true;
                        tmr_r3_incub.Interval = 1000;
                        return;
                    }
                }
                //Above code added on 20-12-2023 1644 to avoid clash 
                if (cmd_Exec_Comp == false)
                {
                    r3_incub = r3_incub.AddSeconds(11);
                    r3_taskcomp = r3_taskcomp.AddSeconds(11);
                    tmr_r3_incub.Enabled = true;
                    tmr_r3_incub.Interval = 1000;
                    r3_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R3 + " for " + "R" + R3_cnt.ToString() + " as previously excuted command is in process in tmr_r3_incub()");
                    return;
                }
                //Above code added on 05-12-2023 1055 in order to avoid clash

                if ((Process_Continued == true) && (protocolinitiateflg_R3 == false))
                    protocolinitiateflg_R3 = true;

                if (continuetest > r3_incub)
                    ts11 = continuetest.Subtract(r3_incub);
                else
                    ts11 = r3_incub.Subtract(continuetest);
                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 27))
                {
                    continuetest = continuetest.AddSeconds(27);
                }
                //Next rack calculation
                if (nxtrackloading > r3_incub)
                    ts11 = nxtrackloading.Subtract(r3_incub);
                else
                    ts11 = r3_incub.Subtract(nxtrackloading);
                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 18))
                {
                    nxtrackloading = nxtrackloading.AddSeconds(18);
                }

                //checking next rack timings and updating the value by 10 seconds 
                //Added on 16-08-2023
                ////if (r3_incub > r1_incub)
                ////{
                ////    ts2 = r3_incub.Subtract(r1_incub);
                ////}
                ////else
                ////{
                ////    ts2 = r1_incub.Subtract(r3_incub);
                ////}

                ////if (r2_incub > r3_incub)
                ////{
                ////    ts3 = r2_incub.Subtract(r3_incub);
                ////}
                ////else
                ////{
                ////    ts3 = r3_incub.Subtract(r2_incub);
                ////}

                ////if (ts2.TotalSeconds <= 11)
                ////{
                ////    r1_incub = r1_incub.AddSeconds(11);
                ////}
                ////if (ts3.TotalSeconds <= 11)
                ////{
                ////    r2_incub = r2_incub.AddSeconds(11);
                ////}
                //|New function added on 22-11-2023 2301
                check_priority_times(3);
                if (p3protorun_flg == false)
                {
                    tmr_r3_incub.Enabled = true;
                    tmr_r3_incub.Interval = 1000;
                    return;
                }

                //Below code added on 13-12-2023 to check the washing time completed
                if (JarName_R3 == "W1")
                    W1_On_State = false;
                else if (JarName_R3 == "W2")
                    W2_On_State = false;
                else if (JarName_R3 == "W3")
                    W3_On_State = false;
                else if (JarName_R3 == "W4")
                    W4_On_State = false;
                else if (JarName_R3 == "W5")
                    W5_On_State = false;
                else if (JarName_R3 == "W6")
                    W6_On_State = false;
                //Above code added on 13-12-2023 to check the washing time completed
                if ((JarName_R3 == "W1") || (JarName_R3 == "W2") || (JarName_R3 == "W3") || (JarName_R3 == "W4") || (JarName_R3 == "W5") || (JarName_R3 == "W6"))
                {
                    Intialize_Wash_Jars = false;
                    watervalveonpff(JarName_R3, 0);
                    System.Threading.Thread.Sleep(750);
                }
                if ((JarName_R3 == "H1") || (JarName_R3 == "H2") || (JarName_R3 == "H3"))
                {
                    if (JarName_R3 == "H1") { H1_incub_complete = true; }
                    else if (JarName_R3 == "H2") { H2_incub_complete = true; }
                    else if (JarName_R3 == "H3") { H3_incub_complete = true; }
                    open_htrdoor();
                }
                else
                {
                    RA_Move_issued = false;
                    //Added on 16-08-2023                
                    if (protocolinitiateflg_R3 == true)
                        protocolrun_R3();
                }
            }
            else
            {
                //////////code added on 04-12-2023 1159
                ////////if ((d1 >= r3_priorChk) && (r3_priorChk_flg == false))
                ////////{
                ////////    r3_priorChk_flg = true;
                ////////    check_priority_times(3);                    
                ////////}
                //////code written on 28-11-2023 1526 to read the temperature                
                ////if ((heatingreqflg == true) && (Readtmpintiated_reinitiate == false) && (TempReadingStarted == false))
                ////{
                ////    Readtmpintiated_reinitiate = true;
                ////    readtemperature();
                ////    //tmr_temp.Enabled = true;
                ////    //tmr_temp.Interval = 5000;
                ////}
                ////////New code updated on 21-12-2023 to insert the loaded data to database
                //////DateTime doff1 = r2_incub_Woff.AddSeconds(10); // Added 21-12-2023 to update data to database
                //////if ((d1 >= r2_incub_Woff) && (d1 <= doff1) && tmr_update_flg == false)   //Modified on 21-12-2023 to update data to database
                //////{
                //////    tmr_update_flg = true;
                //////    tmr_update.Enabled = true;
                //////    tmr_update.Interval = 2000;
                //////}
                ////////New code updated on 21-12-2023 to insert the loaded data to database

                //Write code to On / Off water Value written on 11112023_1540
                ///code modified on 12-12-2023 to On & off the water pump as per condition
                if (Next_JarName_R3.Contains("W"))
                {
                    washrackno = R3_cnt;
                    if ((R1_pickcmdissue == false) && (R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (R6_pickcmdissue == false) && (R7_pickcmdissue == false) && (R8_pickcmdissue == false) && (R9_pickcmdissue == false))
                    {
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1)) || (r1priority == 1))
                        {
                            r3_incub_WOn = r3_incub_WOn.AddSeconds(18);
                        }
                        else
                        {
                            if ((d1 >= r3_incub_WOn) && (r3_incub_WOn_flg == false) && (cmd_Exec_Comp == true))
                            {
                                r3_incub_WOn_flg = true;
                                Intialize_Wash_Jars = false;
                                watervalveonpff(Next_JarName_R3, 1);
                            }
                        }
                    }
                }
                if (JarName_R3.Contains("J"))////if (Prev_JarName_R3.Contains("W"))
                {
                    if (cmd_Exec_Comp == true)
                    {
                        DateTime doff = r3_incub_Woff.AddSeconds(20); // Added 15-12-2023 to to stop unnecessary command sending
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1)) || (r1priority == 1))
                        {
                            r3_incub_Woff = r3_incub_Woff.AddSeconds(18);
                        }
                        else
                        {
                            //Off condition
                            if ((d1 >= r3_incub_Woff) && (d1 <= doff))   //Modified on 15-12-2023 to send the Valve shut command between the time  ////if ((d2 >= r2_incub_Woff) && (r2_incub_Woff_flg == false))
                            {
                                for (int woff = 0; woff < water_valves_on_off_state.Length; woff++)
                                {
                                    if (water_valves_on_off_state[woff] == 1)
                                    {
                                        if ((woff == 0) && (W1_On_State == false)) watervalveonpff("W1", 0);
                                        else if ((woff == 1) && (W2_On_State == false)) watervalveonpff("W2", 0);
                                        else if ((woff == 2) && (W3_On_State == false)) watervalveonpff("W3", 0);
                                        else if ((woff == 3) && (W4_On_State == false)) watervalveonpff("W4", 0);
                                        else if ((woff == 4) && (W5_On_State == false)) watervalveonpff("W5", 0);
                                        else if ((woff == 5) && (W6_On_State == false)) watervalveonpff("W6", 0);
                                    }
                                }
                            }
                        }
                    }
                }
                //lbl_tmr3.Text = "RNo. R" + R3_cnt.ToString() + ",JNo." + JarName_R3 + " Elasped-" + d1.ToString().Substring(10) + " Incub-" + r3_incub.ToString().Substring(10) + " Task Complete By-" + r3_taskcomp.ToString().Substring(10);
                if (JarName_R3.Contains("H"))
                    updateheatertimings(JarName_R3, "R" + R3_cnt.ToString(), true, 3);
                else
                    updatetiming(JarName_R3, "R" + R3_cnt.ToString(), 3);
            }
        }
        private void tmr_r4_incub_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts11 = new TimeSpan();
            int jno = 0; Boolean rackin = false;
            //This has to check with device
            DateTime d3 = System.DateTime.Now;
            //d3 = r4_incub.AddSeconds(-15);
            //if (d1 >= d3)
            //{
            //    if ((R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R1_pickcmdissue == false) && (R5_pickcmdissue == false) && (R6_pickcmdissue == false) && (cmd_Exec_Comp == true) && (RA_Move_issued == false) && (RA_Move_Intiate == false) && ((JarName_R4.Contains("J")) || (JarName_R4.Contains("W"))))
            //    {
            //        move_ra_tolocation(4);
            //    }
            //}
            //This has to check with device
            if (d1 >= r4_incub)
            {
                tmr_r4_incub.Enabled = false;
                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    ////System.Threading.Thread.Sleep(1000);
                }

                //below code updated on 08-05-2024 in order avoid clash of racks
                if ((R2_pickcmdissue == true) || (R1_pickcmdissue == true) || (R3_pickcmdissue == true) || (R5_pickcmdissue == true) || (R6_pickcmdissue == true) || (R7_pickcmdissue == true) || (R8_pickcmdissue == true) || (R9_pickcmdissue == true) || (rackloadingtoJar == true) || (RA_Move_issued == true))
                {
                    r4_incub = r4_incub.AddSeconds(15);
                    tmr_r4_incub.Enabled = true;
                    tmr_r4_incub.Interval = 1000;
                    r4_taskcomp = r4_taskcomp.AddSeconds(15);
                    r4_incub_Woff = r4_incub_Woff.AddSeconds(15);
                    r4_WaitCnt++;
                    Communication.writeCommunicationCommands("15 Secconds Timer incrementes in Jar " + JarName_R4 + " for " + "R" + R4_cnt.ToString() + " as other racks picking by RA in tmr_r4_incub()");
                    return;
                }
                //Above code updated on 08-05-2024  in order avoid clash of racks

                //Below code added on 30-08-2024 1140
                TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
                TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
                ts1 = r1_incub.Subtract(r4_incub);
                ts2 = r2_incub.Subtract(r4_incub);
                ts3 = r3_incub.Subtract(r4_incub);
                ts4 = r5_incub.Subtract(r4_incub);
                ts5 = r6_incub.Subtract(r4_incub);

                if ((JarName_R4 == "W1") || (JarName_R4 == "W2") || (JarName_R4 == "W3") || (JarName_R4 == "W4") || (JarName_R4 == "W5") || (JarName_R4 == "W6"))
                {
                    if ((ts1.Seconds > 0 && ts1.Seconds <= 9) || (ts2.Seconds > 0 && ts2.Seconds <= 9) || (ts3.Seconds > 0 && ts3.Seconds <= 9) || (ts4.Seconds > 0 && ts4.Seconds <= 9) || (ts5.Seconds > 0 && ts5.Seconds <= 9))
                    {
                        r4_incub = r4_incub.AddSeconds(18);
                        tmr_r4_incub.Enabled = true;
                        tmr_r4_incub.Interval = 1000;
                        r4_taskcomp = r4_taskcomp.AddSeconds(18);
                        Communication.writeCommunicationCommands("18 Secconds Timer incrementes in Jar " + JarName_R4 + " for " + "R" + R4_cnt.ToString() + " as this rack in water station and other rack is elasping time in tmr_r4_incub()");
                        return;
                    }
                }
                //Above code added on 30-08-2024 1140
                //Below code updated on 01-04-2024 to give priority to previous updated count
                if (((r4_WaitCnt < r2_WaitCnt) || (r4_WaitCnt < r1_WaitCnt) || (r3_WaitCnt > r4_WaitCnt) || (r4_WaitCnt < r5_WaitCnt) || (r4_WaitCnt < r6_WaitCnt) || (r4_WaitCnt < r7_WaitCnt) || (r4_WaitCnt < r8_WaitCnt) || (r4_WaitCnt < r9_WaitCnt)) && (r4priority == 0))
                {
                    r4_incub = r4_incub.AddSeconds(11);
                    tmr_r4_incub.Enabled = true;
                    tmr_r4_incub.Interval = 1000;
                    r4_taskcomp = r4_taskcomp.AddSeconds(11);
                    r4_incub_Woff = r4_incub_Woff.AddSeconds(11);
                    r4_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R4 + " for " + "R" + R4_cnt.ToString() + " as previously excuted command is in process in tmr_r4_incub()");
                    return;
                }


                //Below code added on 05-12-2023 1055 in order to avoid clash
                if (((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r5priority == 1) || (r6priority == 1) || (r7priority == 1) || (r8priority == 1) || (r9priority == 1)) && (r4priority == 0))
                {
                    r4_incub = r4_incub.AddSeconds(11);
                    r4_taskcomp = r4_taskcomp.AddSeconds(11);
                    tmr_r4_incub.Enabled = true;
                    tmr_r4_incub.Interval = 1000;
                    r4_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R4 + " for " + "R" + R4_cnt.ToString() + " as previously excuted command is in process in tmr_r4_incub()");
                    return;
                }
                //Below code added on 20-12-2023 1644 to avoid clash 
                if (r4priority == 0)
                {
                    jno = Convert.ToInt32(Next_JarName_R4.Substring(1));
                    if (Next_JarName_R4.Contains("J"))
                    {
                        if (rackinjars[jno - 1] == 1)
                            rackin = true;
                    }
                    else if (Next_JarName_R4.Contains("W"))
                    {
                        if (rackinwaterjars[jno - 1] == 1)
                            rackin = true;
                    }
                    if (rackin == true)
                    {
                        r4_incub = r4_incub.AddSeconds(11);
                        r4_taskcomp = r4_taskcomp.AddSeconds(11);
                        tmr_r4_incub.Enabled = true;
                        tmr_r4_incub.Interval = 1000;
                        ////r4_WaitCnt++;
                        Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R4 + " for " + "R" + R4_cnt.ToString() + " as previously excuted command is in process in tmr_r4_incub()");
                        return;
                    }
                }
                //Above code added on 20-12-2023 1644 to avoid clash 
                if (cmd_Exec_Comp == false)
                {
                    r4_incub = r4_incub.AddSeconds(11);
                    r4_taskcomp = r4_taskcomp.AddSeconds(11);
                    tmr_r4_incub.Enabled = true;
                    tmr_r4_incub.Interval = 1000;
                    r4_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R4 + " for " + "R" + R4_cnt.ToString() + " as previously excuted command is in process in tmr_r4_incub()");
                    return;
                }
                //Above code added on 05-12-2023 1055 in order to avoid clash

                if ((Process_Continued == true) && (protocolinitiateflg_R4 == false))
                    protocolinitiateflg_R4 = true;
                if (continuetest > r4_incub)
                    ts11 = continuetest.Subtract(r4_incub);
                else
                    ts11 = r4_incub.Subtract(continuetest);
                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 27))
                {
                    continuetest = continuetest.AddSeconds(27);
                }
                //Next rack calculation
                if (nxtrackloading > r4_incub)
                    ts11 = nxtrackloading.Subtract(r4_incub);
                else
                    ts11 = r4_incub.Subtract(nxtrackloading);

                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 18))
                {
                    nxtrackloading = nxtrackloading.AddSeconds(18);
                }
                tmr_r4_incub.Enabled = false;

                check_priority_times(4);
                if (p4protorun_flg == false)
                {
                    tmr_r4_incub.Enabled = true;
                    tmr_r4_incub.Interval = 1000;
                    return;
                }
                //Below code added on 13-12-2023 to check the washing time completed
                if (JarName_R4 == "W1")
                    W1_On_State = false;
                else if (JarName_R4 == "W2")
                    W2_On_State = false;
                else if (JarName_R4 == "W3")
                    W3_On_State = false;
                else if (JarName_R4 == "W4")
                    W4_On_State = false;
                else if (JarName_R4 == "W5")
                    W5_On_State = false;
                else if (JarName_R4 == "W6")
                    W6_On_State = false;
                //Above code added on 13-12-2023 to check the washing time completed
                if ((JarName_R4 == "W1") || (JarName_R4 == "W2") || (JarName_R4 == "W3") || (JarName_R4 == "W4") || (JarName_R4 == "W5") || (JarName_R4 == "W6"))
                {
                    Intialize_Wash_Jars = false;
                    watervalveonpff(JarName_R4, 0);
                    System.Threading.Thread.Sleep(750);
                }
                if ((JarName_R4 == "H1") || (JarName_R4 == "H2") || (JarName_R4 == "H3"))
                {
                    if (JarName_R4 == "H1") { H1_incub_complete = true; }
                    else if (JarName_R4 == "H2") { H2_incub_complete = true; }
                    else if (JarName_R4 == "H3") { H3_incub_complete = true; }
                    open_htrdoor();
                }
                else
                {
                    RA_Move_issued = false;
                    if (protocolinitiateflg_R4 == true)
                        protocolrun_R4();
                }
            }
            else
            {
                ////////code added on 04-12-2023 1159
                //////if ((d1 >= r4_priorChk) && (r4_priorChk_flg == false))
                //////{
                //////    r4_priorChk_flg = true;
                //////    check_priority_times(4);
                //////}

                //////code written on 28-11-2023 1526 to read the temperature                
                ////if ((heatingreqflg == true) && (Readtmpintiated_reinitiate == false) && (TempReadingStarted == false))
                ////{
                ////    Readtmpintiated_reinitiate = true;
                ////    tmr_temp.Enabled = true;
                ////    tmr_temp.Interval = 5000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database
                ////DateTime doff1 = r4_incub_Woff.AddSeconds(10); // Added 21-12-2023 to update data to database
                ////if ((d1 >= r4_incub_Woff) && (d1 <= doff1) && tmr_update_flg == false)   //Modified on 21-12-2023 to update data to database
                ////{
                ////    tmr_update_flg = true;
                ////    tmr_update.Enabled = true;
                ////    tmr_update.Interval = 2000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database
                //Write code to On / Off water Value written on 11112023_1540
                //code modified on 12122023 1131 to swithc on & off the water valves
                if (Next_JarName_R4.Contains("W"))
                {
                    washrackno = R4_cnt;
                    if ((R1_pickcmdissue == false) && (R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (R6_pickcmdissue == false) && (R7_pickcmdissue == false) && (R8_pickcmdissue == false) && (R9_pickcmdissue == false))
                    {
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1)) || (r1priority == 1))
                        {
                            r4_incub_WOn = r4_incub_WOn.AddSeconds(18);
                        }
                        else
                        {
                            if ((d1 >= r4_incub_WOn) && (r4_incub_WOn_flg == false) && (cmd_Exec_Comp == true))
                            {
                                r4_incub_WOn_flg = true;
                                Intialize_Wash_Jars = false;
                                watervalveonpff(Next_JarName_R4, 1);
                            }
                        }
                    }
                }
                if (JarName_R4.Contains("J"))////if (Prev_JarName_R4.Contains("W"))
                {
                    if (cmd_Exec_Comp == true)
                    {
                        DateTime doff = r4_incub_Woff.AddSeconds(20); // Added 15-12-2023 to to stop unnecessary command sending
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1)) || (r1priority == 1))
                        {
                            r4_incub_Woff = r4_incub_Woff.AddSeconds(18);
                        }
                        else
                        {
                            //Off condition
                            if ((d1 >= r4_incub_Woff) && (d1 <= doff))   //Modified on 15-12-2023 to send the Valve shut command between the time  ////if ((d2 >= r2_incub_Woff) && (r2_incub_Woff_flg == false))
                            {
                                for (int woff = 0; woff < water_valves_on_off_state.Length; woff++)
                                {
                                    if (water_valves_on_off_state[woff] == 1)
                                    {
                                        if ((woff == 0) && (W1_On_State == false)) watervalveonpff("W1", 0);
                                        else if ((woff == 1) && (W2_On_State == false)) watervalveonpff("W2", 0);
                                        else if ((woff == 2) && (W3_On_State == false)) watervalveonpff("W3", 0);
                                        else if ((woff == 3) && (W4_On_State == false)) watervalveonpff("W4", 0);
                                        else if ((woff == 4) && (W5_On_State == false)) watervalveonpff("W5", 0);
                                        else if ((woff == 5) && (W6_On_State == false)) watervalveonpff("W6", 0);
                                    }
                                }
                            }
                        }
                    }
                    //////Off condition
                    ////if ((d1 >= r4_incub_Woff) && (r4_incub_Woff_flg == false))
                    ////{
                    ////    r4_incub_Woff_flg = true;
                    ////    watervalveonpff(Prev_JarName_R4, 0);
                    ////}
                }
                //lbl_tmr4.Text = "RNo. R" + R4_cnt.ToString() + ",JNo." + JarName_R4 + " Elasped-" + d1.ToString().Substring(10) + " Incub-" + r4_incub.ToString().Substring(10) + " Task Complete By-" + r4_taskcomp.ToString().Substring(10);
                if (JarName_R4.Contains("H"))
                    updateheatertimings(JarName_R4, "R" + R4_cnt.ToString(), true, 4);
                else
                    updatetiming(JarName_R4, "R" + R4_cnt.ToString(), 4);
            }
        }
        private void tmr_r5_incub_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts11 = new TimeSpan();
            int jno = 0; Boolean rackin = false;
            //This has to check with device
            DateTime d3 = System.DateTime.Now;
            //d3 = r5_incub.AddSeconds(-15);
            //if (d1 >= d3)
            //{
            //    if ((R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R1_pickcmdissue == false) && (R4_pickcmdissue == false) && (R6_pickcmdissue == false) && (cmd_Exec_Comp == true) && (RA_Move_issued == false) && (RA_Move_Intiate == false) && ((JarName_R5.Contains("J")) || (JarName_R5.Contains("W"))))
            //    {
            //        move_ra_tolocation(5);
            //    }
            //}
            //This has to check with device
            if (d1 >= r5_incub)
            {
                tmr_r5_incub.Enabled = false;
                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    //System.Threading.Thread.Sleep(1000);
                }

                //below code updated on 08-05-2024 in order avoid clash of racks
                if ((R2_pickcmdissue == true) || (R1_pickcmdissue == true) || (R3_pickcmdissue == true) || (R4_pickcmdissue == true) || (R6_pickcmdissue == true) || (R7_pickcmdissue == true) || (R8_pickcmdissue == true) || (R9_pickcmdissue == true) || (rackloadingtoJar == true) || (RA_Move_issued == true))
                {
                    r5_incub = r5_incub.AddSeconds(15);
                    tmr_r5_incub.Enabled = true;
                    tmr_r5_incub.Interval = 1000;
                    r5_taskcomp = r5_taskcomp.AddSeconds(15);
                    r5_incub_Woff = r5_incub_Woff.AddSeconds(15);
                    r5_WaitCnt++;
                    Communication.writeCommunicationCommands("15 Secconds Timer incrementes in Jar " + JarName_R5 + " for " + "R" + R5_cnt.ToString() + " as other racks picking by RA in tmr_r5_incub()");
                    return;
                }
                //Above code updated on 08-05-2024  in order avoid clash of racks

                //Below code added on 30-08-2024 1140
                TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
                TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
                ts1 = r1_incub.Subtract(r5_incub);
                ts2 = r2_incub.Subtract(r5_incub);
                ts3 = r3_incub.Subtract(r5_incub);
                ts4 = r4_incub.Subtract(r5_incub);
                ts5 = r6_incub.Subtract(r5_incub);

                if ((JarName_R5 == "W1") || (JarName_R5 == "W2") || (JarName_R5 == "W3") || (JarName_R5 == "W4") || (JarName_R5 == "W5") || (JarName_R5 == "W6"))
                {
                    if ((ts1.Seconds > 0 && ts1.Seconds <= 9) || (ts2.Seconds > 0 && ts2.Seconds <= 9) || (ts3.Seconds > 0 && ts3.Seconds <= 9) || (ts4.Seconds > 0 && ts4.Seconds <= 9) || (ts5.Seconds > 0 && ts5.Seconds <= 9))
                    {
                        r5_incub = r5_incub.AddSeconds(18);
                        tmr_r5_incub.Enabled = true;
                        tmr_r5_incub.Interval = 1000;
                        r5_taskcomp = r5_taskcomp.AddSeconds(18);
                        Communication.writeCommunicationCommands("18 Secconds Timer incrementes in Jar " + JarName_R5 + " for " + "R" + R5_cnt.ToString() + " as this rack in water station and other rack is elasping time in tmr_r5_incub()");
                        return;
                    }
                }
                //Above code added on 30-08-2024 1140
                //Below code updated on 01-04-2024 to give priority to previous updated count
                if (((r5_WaitCnt < r2_WaitCnt) || (r5_WaitCnt < r1_WaitCnt) || (r5_WaitCnt < r3_WaitCnt) || (r5_WaitCnt < r4_WaitCnt) || (r5_WaitCnt < r6_WaitCnt) || (r5_WaitCnt < r7_WaitCnt) || (r5_WaitCnt < r8_WaitCnt) || (r5_WaitCnt < r9_WaitCnt)) && (r5priority == 0))
                {
                    r5_incub = r5_incub.AddSeconds(11);
                    tmr_r5_incub.Enabled = true;
                    tmr_r5_incub.Interval = 1000;
                    r5_taskcomp = r5_taskcomp.AddSeconds(11);
                    r5_incub_Woff = r5_incub_Woff.AddSeconds(11);
                    r5_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R5 + " for " + "R" + R5_cnt.ToString() + " as previously excuted command is in process in tmr_r5_incub()");
                    return;
                }
                //Below code added on 05-12-2023 1055 in order to avoid clash
                if (((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r6priority == 1) || (r7priority == 1) || (r8priority == 1) || (r9priority == 1)) && (r5priority == 0))
                {
                    r5_incub = r5_incub.AddSeconds(11);
                    r5_taskcomp = r5_taskcomp.AddSeconds(11);
                    tmr_r5_incub.Enabled = true;
                    tmr_r5_incub.Interval = 1000;
                    r5_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R5 + " for " + "R" + R5_cnt.ToString() + " as previously excuted command is in process in tmr_r5_incub()");
                    return;
                }
                //Below code added on 20-12-2023 1644 to avoid clash 
                if (r5priority == 0)
                {
                    jno = Convert.ToInt32(Next_JarName_R5.Substring(1));
                    if (Next_JarName_R5.Contains("J"))
                    {
                        if (rackinjars[jno - 1] == 1)
                            rackin = true;
                    }
                    else if (Next_JarName_R5.Contains("W"))
                    {
                        if (rackinwaterjars[jno - 1] == 1)
                            rackin = true;
                    }
                    if (rackin == true)
                    {
                        r5_incub = r5_incub.AddSeconds(11);
                        r5_taskcomp = r5_taskcomp.AddSeconds(11);
                        tmr_r5_incub.Enabled = true;
                        tmr_r5_incub.Interval = 1000;
                        ////r5_WaitCnt++;
                        Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R5 + " for " + "R" + R5_cnt.ToString() + " as previously excuted command is in process in tmr_r5_incub()");
                        return;
                    }
                }
                //Above code added on 20-12-2023 1644 to avoid clash 
                //if ((cmd_Exec_Comp == false) && (r5priority == 0))
                if (cmd_Exec_Comp == false)
                {
                    r5_incub = r5_incub.AddSeconds(11);
                    r5_taskcomp = r5_taskcomp.AddSeconds(11);
                    tmr_r5_incub.Enabled = true;
                    tmr_r5_incub.Interval = 1000;
                    r5_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R5 + " for " + "R" + R5_cnt.ToString() + " as previously excuted command is in process in tmr_r5_incub()");
                    return;
                }



                if ((Process_Continued == true) && (protocolinitiateflg_R5 == false))
                    protocolinitiateflg_R5 = true;
                if (continuetest > r5_incub)
                    ts11 = continuetest.Subtract(r5_incub);
                else
                    ts11 = r5_incub.Subtract(continuetest);
                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 27))
                {
                    continuetest = continuetest.AddSeconds(27);
                }
                //Next rack calculation
                if (nxtrackloading > r5_incub)
                    ts11 = nxtrackloading.Subtract(r5_incub);
                else
                    ts11 = r5_incub.Subtract(nxtrackloading);

                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 18))
                {
                    nxtrackloading = nxtrackloading.AddSeconds(18);
                }

                check_priority_times(5);
                if (p5protorun_flg == false)
                {
                    tmr_r5_incub.Enabled = true;
                    tmr_r5_incub.Interval = 1000;
                    return;
                }
                //Below code added on 13-12-2023 to check the washing time completed
                if (JarName_R5 == "W1")
                    W1_On_State = false;
                else if (JarName_R5 == "W2")
                    W2_On_State = false;
                else if (JarName_R5 == "W3")
                    W3_On_State = false;
                else if (JarName_R5 == "W4")
                    W4_On_State = false;
                else if (JarName_R5 == "W5")
                    W5_On_State = false;
                else if (JarName_R5 == "W6")
                    W6_On_State = false;
                //Above code added on 13-12-2023 to check the washing time completed
                if ((JarName_R5 == "W1") || (JarName_R5 == "W2") || (JarName_R5 == "W3") || (JarName_R5 == "W4") || (JarName_R5 == "W5") || (JarName_R5 == "W6"))
                {
                    Intialize_Wash_Jars = false;
                    watervalveonpff(JarName_R5, 0);
                    System.Threading.Thread.Sleep(750);
                }
                if ((JarName_R5 == "H1") || (JarName_R5 == "H2") || (JarName_R5 == "H3"))
                {
                    if (JarName_R5 == "H1") { H1_incub_complete = true; }
                    else if (JarName_R5 == "H2") { H2_incub_complete = true; }
                    else if (JarName_R5 == "H3") { H3_incub_complete = true; }
                    open_htrdoor();
                }
                else
                {
                    RA_Move_issued = false;
                    if (protocolinitiateflg_R5 == true)
                        protocolrun_R5();
                }
            }
            else
            {
                //////////code added on 04-12-2023 1159
                ////////if ((d1 >= r5_priorChk) && (r5_priorChk_flg == false))
                ////////{
                ////////    r5_priorChk_flg = true;
                ////////    check_priority_times(5);
                ////////}

                //////code written on 28-11-2023 1526 to read the temperature                
                ////if ((heatingreqflg == true) && (Readtmpintiated_reinitiate == false) && (TempReadingStarted == false))
                ////{
                ////    Readtmpintiated_reinitiate = true;
                ////    tmr_temp.Enabled = true;
                ////    tmr_temp.Interval = 5000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database
                ////DateTime doff1 = r5_incub_Woff.AddSeconds(10); // Added 21-12-2023 to update data to database
                ////if ((d1 >= r5_incub_Woff) && (d1 <= doff1) && tmr_update_flg == false)   //Modified on 21-12-2023 to update data to database
                ////{
                ////    tmr_update_flg = true;
                ////    tmr_update.Enabled = true;
                ////    tmr_update.Interval = 2000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database
                //Write code to On / Off water Value written on 11112023_1540                
                if (Next_JarName_R5.Contains("W"))
                {
                    washrackno = R5_cnt;
                    if ((R1_pickcmdissue == false) && (R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (R6_pickcmdissue == false) && (R7_pickcmdissue == false) && (R8_pickcmdissue == false) && (R9_pickcmdissue == false))
                    {
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1)) || (r1priority == 1))
                        {
                            r5_incub_Woff = r5_incub_Woff.AddSeconds(18);
                        }
                        else
                        {

                            if ((d1 >= r5_incub_WOn) && (r5_incub_WOn_flg == false) && (cmd_Exec_Comp == true))
                            {
                                r5_incub_WOn_flg = true;
                                Intialize_Wash_Jars = false;
                                watervalveonpff(Next_JarName_R5, 1);
                            }
                        }
                    }
                }
                if (JarName_R5.Contains("J"))////if (Prev_JarName_R5.Contains("W"))
                {
                    //Off condition
                    if (cmd_Exec_Comp == true)
                    {
                        DateTime doff = r5_incub_Woff.AddSeconds(20); // Added 15-12-2023 to to stop unnecessary command sending
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1)) || (r1priority == 1))
                        {
                            r5_incub_Woff = r5_incub_Woff.AddSeconds(18);
                        }
                        else
                        {
                            //Off condition
                            if ((d1 >= r5_incub_Woff) && (d1 <= doff))   //Modified on 15-12-2023 to send the Valve shut command between the time
                            {
                                for (int woff = 0; woff < water_valves_on_off_state.Length; woff++)
                                {
                                    if (water_valves_on_off_state[woff] == 1)
                                    {
                                        if ((woff == 0) && (W1_On_State == false)) watervalveonpff("W1", 0);
                                        else if ((woff == 1) && (W2_On_State == false)) watervalveonpff("W2", 0);
                                        else if ((woff == 2) && (W3_On_State == false)) watervalveonpff("W3", 0);
                                        else if ((woff == 3) && (W4_On_State == false)) watervalveonpff("W4", 0);
                                        else if ((woff == 4) && (W5_On_State == false)) watervalveonpff("W5", 0);
                                        else if ((woff == 5) && (W6_On_State == false)) watervalveonpff("W6", 0);
                                    }
                                }
                            }
                        }
                    }
                    //////Off condition
                    ////if ((d1 >= r5_incub_Woff) && (r5_incub_Woff_flg == false))
                    ////{
                    ////    r5_incub_Woff_flg = true;
                    ////    watervalveonpff(Prev_JarName_R5, 0);
                    ////}
                }
                //lbl_tmr5.Text = "RNo. R" + R5_cnt.ToString() + ",JNo." + JarName_R5 + " Elasped-" + d1.ToString().Substring(10) + " Incub-" + r5_incub.ToString().Substring(10) + " Task Complete By-" + r5_taskcomp.ToString().Substring(10);
                if (JarName_R5.Contains("H"))
                    updateheatertimings(JarName_R5, "R" + R5_cnt.ToString(), true, 5);
                else
                    updatetiming(JarName_R5, "R" + R5_cnt.ToString(), 5);
            }
        }
        private void tmr_r6_incub_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts11 = new TimeSpan();
            int jno = 0; Boolean rackin = false;
            //This has to check with device
            DateTime d3 = System.DateTime.Now;
            //d3 = r6_incub.AddSeconds(-15);
            //if (d1 >= d3)
            //{
            //    if ((R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R1_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (cmd_Exec_Comp == true) && (RA_Move_issued == false) && (RA_Move_Intiate == false) && ((JarName_R6.Contains("J")) || (JarName_R6.Contains("W"))))
            //    {
            //        move_ra_tolocation(6);
            //    }
            //}
            //This has to check with device
            if (d1 >= r6_incub)
            {
                tmr_r6_incub.Enabled = false;
                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    ////System.Threading.Thread.Sleep(1000);
                }
                //below code updated on 08-05-2024 in order avoid clash of racks
                if ((R2_pickcmdissue == true) || (R1_pickcmdissue == true) || (R3_pickcmdissue == true) || (R4_pickcmdissue == true) || (R5_pickcmdissue == true) || (R7_pickcmdissue == true) || (R8_pickcmdissue == true) || (R9_pickcmdissue == true) || (rackloadingtoJar == true) || (RA_Move_issued == true))
                {
                    r6_incub = r6_incub.AddSeconds(15);
                    tmr_r6_incub.Enabled = true;
                    tmr_r6_incub.Interval = 1000;
                    r6_taskcomp = r6_taskcomp.AddSeconds(15);
                    r6_incub_Woff = r6_incub_Woff.AddSeconds(15);
                    r6_WaitCnt++;
                    Communication.writeCommunicationCommands("15 Secconds Timer incrementes in Jar " + JarName_R6 + " for " + "R" + R6_cnt.ToString() + " as other racks picking by RA in tmr_r6_incub()");
                    return;
                }
                //Above code updated on 08-05-2024  in order avoid clash of racks
                //Below code added on 30-08-2024 1140
                TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
                TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
                ts1 = r1_incub.Subtract(r6_incub);
                ts2 = r2_incub.Subtract(r6_incub);
                ts3 = r3_incub.Subtract(r6_incub);
                ts4 = r4_incub.Subtract(r6_incub);
                ts5 = r5_incub.Subtract(r6_incub);

                if ((JarName_R6 == "W1") || (JarName_R6 == "W2") || (JarName_R6 == "W3") || (JarName_R6 == "W4") || (JarName_R6 == "W5") || (JarName_R6 == "W6"))
                {
                    if ((ts1.Seconds > 0 && ts1.Seconds <= 9) || (ts2.Seconds > 0 && ts2.Seconds <= 9) || (ts3.Seconds > 0 && ts3.Seconds <= 9) || (ts4.Seconds > 0 && ts4.Seconds <= 9) || (ts5.Seconds > 0 && ts5.Seconds <= 9))
                    {
                        r6_incub = r6_incub.AddSeconds(18);
                        tmr_r6_incub.Enabled = true;
                        tmr_r6_incub.Interval = 1000;
                        r6_taskcomp = r6_taskcomp.AddSeconds(18);
                        Communication.writeCommunicationCommands("18 Secconds Timer incrementes in Jar " + JarName_R6 + " for " + "R" + R6_cnt.ToString() + " as this rack in water station and other rack is elasping time in tmr_r6_incub()");
                        return;
                    }
                }
                //Above code added on 30-08-2024 1140
                //Below code updated on 01-04-2024 to give priority to previous updated count
                if (((r6_WaitCnt < r2_WaitCnt) || (r6_WaitCnt < r1_WaitCnt) || (r6_WaitCnt < r3_WaitCnt) || (r6_WaitCnt < r4_WaitCnt) || (r5_WaitCnt > r6_WaitCnt) || (r7_WaitCnt > r6_WaitCnt) || (r8_WaitCnt > r6_WaitCnt) || (r9_WaitCnt > r6_WaitCnt)) && (r6priority == 0))
                {
                    r6_incub = r6_incub.AddSeconds(11);
                    tmr_r6_incub.Enabled = true;
                    tmr_r6_incub.Interval = 1000;
                    r6_taskcomp = r6_taskcomp.AddSeconds(11);
                    r6_incub_Woff = r6_incub_Woff.AddSeconds(11);
                    r6_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R6 + " for " + "R" + R6_cnt.ToString() + " as previous racks are in Waiting in tmr_r6_incub()");
                    return;
                }


                //Below code added on 05-12-2023 1055 in order to avoid clash
                if (((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r7priority == 1) || (r8priority == 1) || (r9priority == 1)) && (r6priority == 0))
                {
                    r6_incub = r6_incub.AddSeconds(11);
                    r6_taskcomp = r6_taskcomp.AddSeconds(11);
                    tmr_r6_incub.Enabled = true;
                    tmr_r6_incub.Interval = 1000;
                    r6_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R6 + " for " + "R" + R6_cnt.ToString() + " as other racks are in high priority in tmr_r6_incub()");
                    return;
                }
                //Below code added on 20-12-2023 1644 to avoid clash 
                if (r6priority == 0)
                {
                    jno = Convert.ToInt32(Next_JarName_R6.Substring(1));
                    if (Next_JarName_R6.Contains("J"))
                    {
                        if (rackinjars[jno - 1] == 1)
                            rackin = true;
                    }
                    else if (Next_JarName_R6.Contains("W"))
                    {
                        if (rackinwaterjars[jno - 1] == 1)
                            rackin = true;
                    }
                    if (rackin == true)
                    {
                        r6_incub = r6_incub.AddSeconds(11);
                        r6_taskcomp = r6_taskcomp.AddSeconds(11);
                        tmr_r6_incub.Enabled = true;
                        tmr_r6_incub.Interval = 1000;
                        ////r6_WaitCnt++;
                        Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R6 + " for " + "R" + R6_cnt.ToString() + " as rack is there in next placing Jarin tmr_r6_incub()");
                        return;
                    }
                }
                //Above code added on 20-12-2023 1644 to avoid clash 
                //if ((cmd_Exec_Comp == false) && (r6priority == 0))
                if (cmd_Exec_Comp == false)
                {
                    r6_incub = r6_incub.AddSeconds(11);
                    r6_taskcomp = r6_taskcomp.AddSeconds(11);
                    tmr_r6_incub.Enabled = true;
                    tmr_r6_incub.Interval = 1000;
                    r6_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R6 + " for " + "R" + R6_cnt.ToString() + " as previously excuted command is in processin tmr_r6_incub()");
                    return;
                }

                if ((Process_Continued == true) && (protocolinitiateflg_R6 == false))
                    protocolinitiateflg_R6 = true;
                if (continuetest > r6_incub)
                    ts11 = continuetest.Subtract(r6_incub);
                else
                    ts11 = r6_incub.Subtract(continuetest);
                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 27))
                {
                    continuetest = continuetest.AddSeconds(27);
                }
                //Next rack calculation
                if (nxtrackloading > r6_incub)
                    ts11 = nxtrackloading.Subtract(r6_incub);
                else
                    ts11 = r6_incub.Subtract(nxtrackloading);
                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 18))
                {
                    nxtrackloading = nxtrackloading.AddSeconds(18);
                }
                tmr_r6_incub.Enabled = false;

                check_priority_times(6);
                if (p6protorun_flg == false)
                {
                    tmr_r6_incub.Enabled = true;
                    tmr_r6_incub.Interval = 1000;
                    return;
                }

                //Below code added on 13-12-2023 to check the washing time completed
                if (JarName_R6 == "W1")
                    W1_On_State = false;
                else if (JarName_R6 == "W2")
                    W2_On_State = false;
                else if (JarName_R6 == "W3")
                    W3_On_State = false;
                else if (JarName_R6 == "W4")
                    W4_On_State = false;
                else if (JarName_R6 == "W5")
                    W5_On_State = false;
                else if (JarName_R6 == "W6")
                    W6_On_State = false;
                //Above code added on 13-12-2023 to check the washing time completed

                if ((JarName_R6 == "W1") || (JarName_R6 == "W2") || (JarName_R6 == "W3") || (JarName_R6 == "W4") || (JarName_R6 == "W5") || (JarName_R6 == "W6"))
                {
                    Intialize_Wash_Jars = false;
                    watervalveonpff(JarName_R6, 0);
                    System.Threading.Thread.Sleep(750);
                }
                if ((JarName_R6 == "H1") || (JarName_R6 == "H2") || (JarName_R6 == "H3"))
                {
                    if (JarName_R6 == "H1") { H1_incub_complete = true; }
                    else if (JarName_R6 == "H2") { H2_incub_complete = true; }
                    else if (JarName_R6 == "H3") { H3_incub_complete = true; }
                    open_htrdoor();
                }
                else
                {
                    RA_Move_issued = false;
                    if (protocolinitiateflg_R6 == true)
                        protocolrun_R6();
                }
            }
            else
            {

                //////////code added on 04-12-2023 1159
                ////////if((d1>= r6_priorChk) && (r6_priorChk_flg==false))
                ////////{
                ////////    r6_priorChk_flg = true;
                ////////    check_priority_times(6);
                ////////}

                //code written on 28-11-2023 1526 to read the temperature                
                ////if ((heatingreqflg == true) && (Readtmpintiated_reinitiate == false) && (TempReadingStarted == false))
                ////{
                ////    Readtmpintiated_reinitiate = true;
                ////    tmr_temp.Enabled = true;
                ////    tmr_temp.Interval = 5000;
                ////}

                //////New code updated on 21-12-2023 to insert the loaded data to database
                ////DateTime doff1 = r6_incub_Woff.AddSeconds(10); // Added 21-12-2023 to update data to database
                ////if ((d1 >= r6_incub_Woff) && (d1 <= doff1) && tmr_update_flg == false)   //Modified on 21-12-2023 to update data to database
                ////{
                ////    tmr_update_flg = true;
                ////    tmr_update.Enabled = true;
                ////    tmr_update.Interval = 2000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database

                //Write code to On / Off water Value written on 11112023_1540
                //code modified on 12-12-2023 for switch on & off water valves
                if (Next_JarName_R6.Contains("W"))
                {
                    washrackno = R6_cnt;
                    if ((R1_pickcmdissue == false) && (R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (R6_pickcmdissue == false) && (R7_pickcmdissue == false) && (R8_pickcmdissue == false) && (R9_pickcmdissue == false))
                    {
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1)) || (r1priority == 1) || (r7priority == 1) || (r8priority == 1) || (r9priority == 1))
                        {
                            r6_incub_WOn = r6_incub_WOn.AddSeconds(18);
                        }
                        else
                        {
                            if ((d1 >= r6_incub_WOn) && (r6_incub_WOn_flg == false) && (cmd_Exec_Comp == true))
                            {
                                r6_incub_WOn_flg = true;
                                Intialize_Wash_Jars = false;
                                watervalveonpff(Next_JarName_R6, 1);
                            }
                        }
                    }
                }
                if (JarName_R6.Contains("J")) ////if (Prev_JarName_R6.Contains("W"))
                {
                    if (cmd_Exec_Comp == true)
                    {
                        DateTime doff = r6_incub_Woff.AddSeconds(20); // Added 15-12-2023 to to stop unnecessary command sending
                        if (((r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1)) || (r1priority == 1) || (r7priority == 1) || (r8priority == 1) || (r9priority == 1))
                        {
                            r6_incub_Woff = r6_incub_Woff.AddSeconds(18);
                        }
                        else
                        {
                            //Off condition
                            if ((d1 >= r6_incub_Woff) && (d1 <= doff))   //Modified on 15-12-2023 to send the Valve shut command between the time
                            {
                                for (int woff = 0; woff < water_valves_on_off_state.Length; woff++)
                                {
                                    if (water_valves_on_off_state[woff] == 1)
                                    {
                                        if ((woff == 0) && (W1_On_State == false)) watervalveonpff("W1", 0);
                                        else if ((woff == 1) && (W2_On_State == false)) watervalveonpff("W2", 0);
                                        else if ((woff == 2) && (W3_On_State == false)) watervalveonpff("W3", 0);
                                        else if ((woff == 3) && (W4_On_State == false)) watervalveonpff("W4", 0);
                                        else if ((woff == 4) && (W5_On_State == false)) watervalveonpff("W5", 0);
                                        else if ((woff == 5) && (W6_On_State == false)) watervalveonpff("W6", 0);
                                    }
                                }
                            }
                        }
                    }
                    //////Off condition
                    ////if ((d1 >= r6_incub_Woff) && (r6_incub_Woff_flg == false))
                    ////{
                    ////    r6_incub_Woff_flg = true;
                    ////    watervalveonpff(Prev_JarName_R6, 0);
                    ////}
                }
                //lbl_tmr6.Text = "RNo. R" + R6_cnt.ToString() + ",JNo." + JarName_R6 + " Elasped-" + d1.ToString().Substring(10) + " Incub-" + r6_incub.ToString().Substring(10) + " Task Complete By-" + r6_taskcomp.ToString().Substring(10);
                if (JarName_R6.Contains("H"))
                    updateheatertimings(JarName_R6, "R" + R6_cnt.ToString(), true, 6);
                else
                    updatetiming(JarName_R6, "R" + R6_cnt.ToString(), 6);
            }
        }
        private void tmr_r7_incub_Tick(object sender, EventArgs e)
        {
            Application.DoEvents();
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts11 = new TimeSpan();
            int jno = 0; Boolean rackin = false;
            if (d1 >= r7_incub)
            {
                tmr_r7_incub.Enabled = false;
                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    ////System.Threading.Thread.Sleep(1000);
                }

                //below code updated on 08-05-2024 in order avoid clash of racks
                if ((R2_pickcmdissue == true) || (R1_pickcmdissue == true) || (R3_pickcmdissue == true) || (R4_pickcmdissue == true) || (R5_pickcmdissue == true) || (R6_pickcmdissue == true) || (R8_pickcmdissue == true) || (R9_pickcmdissue == true) || (rackloadingtoJar == true) || (RA_Move_issued == true))
                {
                    r7_incub = r7_incub.AddSeconds(15);
                    tmr_r7_incub.Enabled = true;
                    tmr_r7_incub.Interval = 1000;
                    r7_taskcomp = r7_taskcomp.AddSeconds(15);
                    r7_incub_Woff = r7_incub_Woff.AddSeconds(15);
                    r7_WaitCnt++;
                    Communication.writeCommunicationCommands("15 Secconds Timer incrementes in Jar " + JarName_R7 + " for " + "R" + R7_cnt.ToString() + " as other racks picking by RA in tmr_r7_incub()");
                    return;
                }
                //Above code updated on 08-05-2024  in order avoid clash of racks

                //Below code added on 30-08-2024 1140
                TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
                TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
                TimeSpan ts7 = new TimeSpan(); TimeSpan ts8 = new TimeSpan(); TimeSpan ts9 = new TimeSpan();
                ts1 = r1_incub.Subtract(r7_incub);
                ts2 = r2_incub.Subtract(r7_incub);
                ts3 = r3_incub.Subtract(r7_incub);
                ts4 = r4_incub.Subtract(r7_incub);
                ts5 = r5_incub.Subtract(r7_incub);
                ts6 = r6_incub.Subtract(r7_incub);
                ts7 = r8_incub.Subtract(r7_incub);
                ts8 = r9_incub.Subtract(r7_incub);

                if ((JarName_R7 == "W1") || (JarName_R7 == "W2") || (JarName_R7 == "W3") || (JarName_R7 == "W4") || (JarName_R7 == "W5") || (JarName_R7 == "W6"))
                {
                    if ((ts1.Seconds > 0 && ts1.Seconds <= 9) || (ts2.Seconds > 0 && ts2.Seconds <= 9) || (ts3.Seconds > 0 && ts3.Seconds <= 9) || (ts4.Seconds > 0 && ts4.Seconds <= 9) || (ts5.Seconds > 0 && ts5.Seconds <= 9) || (ts6.Seconds > 0 && ts6.Seconds <= 9) || (ts7.Seconds > 0 && ts7.Seconds <= 9) || (ts8.Seconds > 0 && ts8.Seconds <= 9))
                    {
                        r7_incub = r7_incub.AddSeconds(18);
                        tmr_r7_incub.Enabled = true;
                        tmr_r7_incub.Interval = 1000;
                        r7_taskcomp = r7_taskcomp.AddSeconds(18);
                        Communication.writeCommunicationCommands("18 Secconds Timer incrementes in Jar " + JarName_R7+ " for " + "R" + R7_cnt.ToString() + " as this rack in water station and other rack is elasping time in tmr_r7_incub()");
                        return;
                    }
                }
                //Above code added on 30-08-2024 1140

                //Below code updated on 01-04-2024 to give priority to previous updated count

                //Below code updated on 01-04-2024 to give priority to previous updated count
                if (((r7_WaitCnt < r2_WaitCnt) || (r7_WaitCnt < r1_WaitCnt) || (r7_WaitCnt < r3_WaitCnt) || (r7_WaitCnt < r4_WaitCnt) || (r7_WaitCnt < r5_WaitCnt) || (r7_WaitCnt < r6_WaitCnt) || (r7_WaitCnt < r8_WaitCnt) || (r7_WaitCnt < r9_WaitCnt)) && (r7priority == 0))
                {
                    r7_incub = r7_incub.AddSeconds(11);
                    tmr_r7_incub.Enabled = true;
                    tmr_r7_incub.Interval = 1000;
                    r7_taskcomp = r7_taskcomp.AddSeconds(11);
                    r7_incub_Woff = r7_incub_Woff.AddSeconds(11);
                    r7_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R7 + " for " + "R" + R7_cnt.ToString() + " as previous racks are in Waiting in tmr_r7_incub()");
                    return;
                }


                //Below code added on 05-12-2023 1055 in order to avoid clash
                if (((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r8priority == 1) || (r9priority == 1)) && (r7priority == 0))
                {
                    r7_incub = r7_incub.AddSeconds(11);
                    tmr_r7_incub.Enabled = true;
                    tmr_r7_incub.Interval = 1000;
                    r7_taskcomp = r7_taskcomp.AddSeconds(11);
                    r7_incub_Woff = r7_incub_Woff.AddSeconds(11);
                    r7_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R7 + " for " + "R" + R7_cnt.ToString() + " as other racks are in high priority in tmr_r7_incub()");
                    return;
                }
                //Below code added on 20-12-2023 1644 to avoid clash 
                if (r7priority == 0)
                {
                    jno = Convert.ToInt32(Next_JarName_R7.Substring(1));
                    if (Next_JarName_R5.Contains("J"))
                    {
                        if (rackinjars[jno - 1] == 1)
                            rackin = true;
                    }
                    else if (Next_JarName_R7.Contains("W"))
                    {
                        if (rackinwaterjars[jno - 1] == 1)
                            rackin = true;
                    }
                    if (rackin == true)
                    {
                        r7_incub = r7_incub.AddSeconds(11);
                        r7_taskcomp = r7_taskcomp.AddSeconds(11);
                        tmr_r7_incub.Enabled = true;
                        tmr_r7_incub.Interval = 1000;
                        return;
                    }
                }
                //Above code added on 20-12-2023 1644 to avoid clash 
                if ((cmd_Exec_Comp == false) && (r7priority == 0))
                {
                    r7_incub = r7_incub.AddSeconds(11);
                    r7_taskcomp = r7_taskcomp.AddSeconds(11);
                    tmr_r7_incub.Enabled = true;
                    tmr_r7_incub.Interval = 1000;
                    return;
                }
                //Above code added on 05-12-2023 1055 in order to avoid clash

                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    System.Threading.Thread.Sleep(1000);
                }

                if ((Process_Continued == true) && (protocolinitiateflg_R7 == false))
                    protocolinitiateflg_R7 = true;
                if (continuetest > r7_incub)
                    ts11 = continuetest.Subtract(r7_incub);
                else
                    ts11 = r7_incub.Subtract(continuetest);
                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 27))
                {
                    continuetest = continuetest.AddSeconds(27);
                }
                //Next rack calculation
                if (nxtrackloading > r7_incub)
                    ts11 = nxtrackloading.Subtract(r7_incub);
                else
                    ts11 = r7_incub.Subtract(nxtrackloading);

                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 18))
                {
                    nxtrackloading = nxtrackloading.AddSeconds(18);
                }

                check_priority_times(7);
                if (p7protorun_flg == false)
                {
                    tmr_r7_incub.Enabled = true;
                    tmr_r7_incub.Interval = 1000;
                    return;
                }
                //Below code added on 13-12-2023 to check the washing time completed
                if (JarName_R7 == "W1")
                    W1_On_State = false;
                else if (JarName_R7 == "W2")
                    W2_On_State = false;
                else if (JarName_R7 == "W3")
                    W3_On_State = false;
                else if (JarName_R7 == "W4")
                    W4_On_State = false;
                else if (JarName_R7 == "W5")
                    W5_On_State = false;
                else if (JarName_R7 == "W6")
                    W6_On_State = false;
                //Above code added on 13-12-2023 to check the washing time completed
                if ((JarName_R7 == "W1") || (JarName_R7 == "W2") || (JarName_R7 == "W3") || (JarName_R7 == "W4") || (JarName_R7 == "W5") || (JarName_R7 == "W6"))
                {
                    Intialize_Wash_Jars = false;
                    watervalveonpff(JarName_R7, 0);
                    System.Threading.Thread.Sleep(750);
                }
                if ((JarName_R7 == "H1") || (JarName_R7 == "H2") || (JarName_R7 == "H3"))
                {
                    if (JarName_R7 == "H1") { H1_incub_complete = true; }
                    else if (JarName_R7 == "H2") { H2_incub_complete = true; }
                    else if (JarName_R7 == "H3") { H3_incub_complete = true; }
                    open_htrdoor();
                }
                else
                {
                    if (protocolinitiateflg_R7 == true)
                        protocolrun_R7();
                }
            }
            else
            {
                //////////code added on 04-12-2023 1159
                ////////if ((d1 >= r5_priorChk) && (r5_priorChk_flg == false))
                ////////{
                ////////    r5_priorChk_flg = true;
                ////////    check_priority_times(5);
                ////////}

                //////code written on 28-11-2023 1526 to read the temperature                
                ////if ((heatingreqflg == true) && (Readtmpintiated_reinitiate == false) && (TempReadingStarted == false))
                ////{
                ////    Readtmpintiated_reinitiate = true;
                ////    tmr_temp.Enabled = true;
                ////    tmr_temp.Interval = 5000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database
                ////DateTime doff1 = r5_incub_Woff.AddSeconds(10); // Added 21-12-2023 to update data to database
                ////if ((d1 >= r5_incub_Woff) && (d1 <= doff1) && tmr_update_flg == false)   //Modified on 21-12-2023 to update data to database
                ////{
                ////    tmr_update_flg = true;
                ////    tmr_update.Enabled = true;
                ////    tmr_update.Interval = 2000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database
                //Write code to On / Off water Value written on 11112023_1540                
                if (Next_JarName_R7.Contains("W"))
                {
                    washrackno = R7_cnt;
                    if ((R1_pickcmdissue == false) && (R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (R6_pickcmdissue == false) && (R7_pickcmdissue == false) && (R8_pickcmdissue == false) && (R9_pickcmdissue == false))
                    {
                        if ((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r8priority == 1) || (r9priority == 1) || (r7priority == 1))
                        {
                            r7_incub_Woff = r7_incub_Woff.AddSeconds(18);
                        }
                        else
                        {
                            if ((d1 >= r7_incub_WOn) && (r7_incub_WOn_flg == false) && (cmd_Exec_Comp == true))
                            {
                                r7_incub_WOn_flg = true;
                                Intialize_Wash_Jars = false;
                                watervalveonpff(Next_JarName_R7, 1);
                            }
                        }
                    }
                }
                if (JarName_R7.Contains("J"))////if (Prev_JarName_R5.Contains("W"))
                {
                    //Off condition
                    if (cmd_Exec_Comp == true)
                    {
                        DateTime doff = r7_incub_Woff.AddSeconds(20); // Added 15-12-2023 to to stop unnecessary command sending
                        if ((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r8priority == 1) || (r9priority == 1) || (r7priority == 1))
                        {
                            r7_incub_Woff = r7_incub_Woff.AddSeconds(18);
                        }
                        else
                        {
                            //Off condition
                            if ((d1 >= r7_incub_Woff) && (d1 <= doff))   //Modified on 15-12-2023 to send the Valve shut command between the time
                            {
                                for (int woff = 0; woff < water_valves_on_off_state.Length; woff++)
                                {
                                    if (water_valves_on_off_state[woff] == 1)
                                    {
                                        if ((woff == 0) && (W1_On_State == false)) watervalveonpff("W1", 0);
                                        else if ((woff == 1) && (W2_On_State == false)) watervalveonpff("W2", 0);
                                        else if ((woff == 2) && (W3_On_State == false)) watervalveonpff("W3", 0);
                                        else if ((woff == 3) && (W4_On_State == false)) watervalveonpff("W4", 0);
                                        else if ((woff == 4) && (W5_On_State == false)) watervalveonpff("W5", 0);
                                        else if ((woff == 5) && (W6_On_State == false)) watervalveonpff("W6", 0);
                                    }
                                }
                            }
                        }
                    }
                    //////Off condition
                    ////if ((d1 >= r5_incub_Woff) && (r5_incub_Woff_flg == false))
                    ////{
                    ////    r5_incub_Woff_flg = true;
                    ////    watervalveonpff(Prev_JarName_R5, 0);
                    ////}
                }
                //lbl_tmr5.Text = "RNo. R" + R5_cnt.ToString() + ",JNo." + JarName_R5 + " Elasped-" + d1.ToString().Substring(10) + " Incub-" + r5_incub.ToString().Substring(10) + " Task Complete By-" + r5_taskcomp.ToString().Substring(10);
                if (JarName_R7.Contains("H"))
                    updateheatertimings(JarName_R7, "R" + R7_cnt.ToString(), true, 7);
                else
                    updatetiming(JarName_R7, "R" + R7_cnt.ToString(), 7);
            }
        }
        private void tmr_r8_incub_Tick(object sender, EventArgs e)
        {
            Application.DoEvents();
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts11 = new TimeSpan();
            int jno = 0; Boolean rackin = false;
            if (d1 >= r8_incub)
            {
                tmr_r8_incub.Enabled = false;
                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    ////System.Threading.Thread.Sleep(1000);
                }
                //below code updated on 08-05-2024 in order avoid clash of racks
                if ((R2_pickcmdissue == true) || (R1_pickcmdissue == true) || (R3_pickcmdissue == true) || (R4_pickcmdissue == true) || (R5_pickcmdissue == true) || (R6_pickcmdissue == true) || (R7_pickcmdissue == true) || (R9_pickcmdissue == true) || (rackloadingtoJar == true) || (RA_Move_issued == true))
                {
                    r8_incub = r8_incub.AddSeconds(15);
                    tmr_r8_incub.Enabled = true;
                    tmr_r8_incub.Interval = 1000;
                    r8_taskcomp = r8_taskcomp.AddSeconds(15);
                    r8_incub_Woff = r8_incub_Woff.AddSeconds(15);
                    r8_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in jar " + JarName_R8 + " for " + "R" + R8_cnt.ToString() + " as other racks picking by RA in tmr_r8_incub()");
                    return;
                }
                //Above code updated on 08-05-2024  in order avoid clash of racks

                //Below code added on 30-08-2024 1140
                TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
                TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
                TimeSpan ts7 = new TimeSpan(); TimeSpan ts8 = new TimeSpan(); TimeSpan ts9 = new TimeSpan();
                ts1 = r1_incub.Subtract(r8_incub);
                ts2 = r2_incub.Subtract(r8_incub);
                ts3 = r3_incub.Subtract(r8_incub);
                ts4 = r4_incub.Subtract(r8_incub);
                ts5 = r5_incub.Subtract(r8_incub);
                ts6 = r6_incub.Subtract(r8_incub);
                ts7 = r7_incub.Subtract(r8_incub);
                ts8 = r9_incub.Subtract(r8_incub);

                if ((JarName_R8 == "W1") || (JarName_R8 == "W2") || (JarName_R8 == "W3") || (JarName_R8 == "W4") || (JarName_R8 == "W5") || (JarName_R8 == "W6"))
                {
                    if ((ts1.Seconds > 0 && ts1.Seconds <= 9) || (ts2.Seconds > 0 && ts2.Seconds <= 9) || (ts3.Seconds > 0 && ts3.Seconds <= 9) || (ts4.Seconds > 0 && ts4.Seconds <= 9) || (ts5.Seconds > 0 && ts5.Seconds <= 9) || (ts6.Seconds > 0 && ts6.Seconds <= 9) || (ts7.Seconds > 0 && ts7.Seconds <= 9) || (ts8.Seconds > 0 && ts8.Seconds <= 9))
                    {
                        r8_incub = r8_incub.AddSeconds(18);
                        tmr_r8_incub.Enabled = true;
                        tmr_r8_incub.Interval = 1000;
                        r8_taskcomp = r8_taskcomp.AddSeconds(18);
                        Communication.writeCommunicationCommands("18 Secconds Timer incrementes in Jar " + JarName_R8 + " for " + "R" + R8_cnt.ToString() + " as this rack in water station and other rack is elasping time in tmr_r8_incub()");
                        return;
                    }
                }
                //Above code added on 30-08-2024 1140


                //Below code updated on 01-04-2024 to give priority to previous updated count
                if (((r8_WaitCnt < r2_WaitCnt) || (r8_WaitCnt < r1_WaitCnt) || (r8_WaitCnt < r3_WaitCnt) || (r8_WaitCnt < r4_WaitCnt) || (r8_WaitCnt < r5_WaitCnt) || (r8_WaitCnt < r6_WaitCnt) || (r8_WaitCnt < r7_WaitCnt) || (r8_WaitCnt < r9_WaitCnt)) && (r8priority == 0))
                {
                    r8_incub = r8_incub.AddSeconds(11);
                    tmr_r8_incub.Enabled = true;
                    tmr_r8_incub.Interval = 1000;
                    r8_taskcomp = r8_taskcomp.AddSeconds(11);
                    r8_incub_Woff = r8_incub_Woff.AddSeconds(11);
                    r8_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R8 + " for " + "R" + R8_cnt.ToString() + " as previous racks are in Waiting in tmr_r8_incub()");
                    return;
                }

                //Below code added on 05-12-2023 1055 in order to avoid clash
                if (((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r7priority == 1) || (r9priority == 1)) && (r8priority == 0))
                {
                    r8_incub = r8_incub.AddSeconds(11);
                    tmr_r8_incub.Enabled = true;
                    tmr_r8_incub.Interval = 1000;
                    r8_taskcomp = r8_taskcomp.AddSeconds(11);
                    r8_incub_Woff = r8_incub_Woff.AddSeconds(11);
                    r8_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R8 + " for " + "R" + R8_cnt.ToString() + " as other racks are in high priority in tmr_r8_incub()");
                    return;
                }
                //Below code added on 20-12-2023 1644 to avoid clash 
                if (r8priority == 0)
                {
                    jno = Convert.ToInt32(Next_JarName_R8.Substring(1));
                    if (Next_JarName_R8.Contains("J"))
                    {
                        if (rackinjars[jno - 1] == 1)
                            rackin = true;
                    }
                    else if (Next_JarName_R8.Contains("W"))
                    {
                        if (rackinwaterjars[jno - 1] == 1)
                            rackin = true;
                    }
                    if (rackin == true)
                    {
                        r8_incub = r8_incub.AddSeconds(11);
                        r8_taskcomp = r8_taskcomp.AddSeconds(11);
                        tmr_r8_incub.Enabled = true;
                        tmr_r8_incub.Interval = 1000;
                        return;
                    }
                }
                //Above code added on 20-12-2023 1644 to avoid clash 
                if ((cmd_Exec_Comp == false))
                {
                    r8_incub = r8_incub.AddSeconds(11);
                    r8_taskcomp = r8_taskcomp.AddSeconds(11);
                    tmr_r8_incub.Enabled = true;
                    tmr_r8_incub.Interval = 1000;
                    return;
                }
                if ((Process_Continued == true) && (protocolinitiateflg_R8 == false))
                    protocolinitiateflg_R8 = true;
                if (continuetest > r8_incub)
                    ts11 = continuetest.Subtract(r8_incub);
                else
                    ts11 = r8_incub.Subtract(continuetest);
                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 27))
                {
                    continuetest = continuetest.AddSeconds(27);
                }
                //Next rack calculation
                if (nxtrackloading > r8_incub)
                    ts11 = nxtrackloading.Subtract(r8_incub);
                else
                    ts11 = r8_incub.Subtract(nxtrackloading);

                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 18))
                {
                    nxtrackloading = nxtrackloading.AddSeconds(18);
                }

                check_priority_times(8);
                if (p8protorun_flg == false)
                {
                    tmr_r8_incub.Enabled = true;
                    tmr_r8_incub.Interval = 1000;
                    return;
                }
                //Below code added on 13-12-2023 to check the washing time completed
                if (JarName_R8 == "W1")
                    W1_On_State = false;
                else if (JarName_R8 == "W2")
                    W2_On_State = false;
                else if (JarName_R8 == "W3")
                    W3_On_State = false;
                else if (JarName_R8 == "W4")
                    W4_On_State = false;
                else if (JarName_R8 == "W5")
                    W5_On_State = false;
                else if (JarName_R8 == "W6")
                    W6_On_State = false;
                //Above code added on 13-12-2023 to check the washing time completed
                if ((JarName_R8 == "W1") || (JarName_R8 == "W2") || (JarName_R8 == "W3") || (JarName_R8 == "W4") || (JarName_R8 == "W5") || (JarName_R8 == "W6"))
                {
                    Intialize_Wash_Jars = false;
                    watervalveonpff(JarName_R8, 0);
                    System.Threading.Thread.Sleep(750);
                }
                if ((JarName_R8 == "H1") || (JarName_R8 == "H2") || (JarName_R8 == "H3"))
                {
                    if (JarName_R8 == "H1") { H1_incub_complete = true; }
                    else if (JarName_R8 == "H2") { H2_incub_complete = true; }
                    else if (JarName_R8 == "H3") { H3_incub_complete = true; }
                    open_htrdoor();
                }
                else
                {
                    if (protocolinitiateflg_R8 == true)
                        protocolrun_R8();
                }
            }
            else
            {
                //////////code added on 04-12-2023 1159
                ////////if ((d1 >= r5_priorChk) && (r5_priorChk_flg == false))
                ////////{
                ////////    r5_priorChk_flg = true;
                ////////    check_priority_times(5);
                ////////}

                //////code written on 28-11-2023 1526 to read the temperature                
                ////if ((heatingreqflg == true) && (Readtmpintiated_reinitiate == false) && (TempReadingStarted == false))
                ////{
                ////    Readtmpintiated_reinitiate = true;
                ////    tmr_temp.Enabled = true;
                ////    tmr_temp.Interval = 5000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database
                ////DateTime doff1 = r5_incub_Woff.AddSeconds(10); // Added 21-12-2023 to update data to database
                ////if ((d1 >= r5_incub_Woff) && (d1 <= doff1) && tmr_update_flg == false)   //Modified on 21-12-2023 to update data to database
                ////{
                ////    tmr_update_flg = true;
                ////    tmr_update.Enabled = true;
                ////    tmr_update.Interval = 2000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database
                //Write code to On / Off water Value written on 11112023_1540                
                if (Next_JarName_R8.Contains("W"))
                {
                    washrackno = R8_cnt;
                    if ((R1_pickcmdissue == false) && (R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (R6_pickcmdissue == false) && (R7_pickcmdissue == false) && (R8_pickcmdissue == false) && (R9_pickcmdissue == false))
                    {
                        if ((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r8priority == 1) || (r9priority == 1) || (r7priority == 1))
                        {
                            r8_incub_Woff = r8_incub_Woff.AddSeconds(18);
                        }
                        else
                        {

                            if ((d1 >= r8_incub_WOn) && (r8_incub_WOn_flg == false) && (cmd_Exec_Comp == true))
                            {
                                r8_incub_WOn_flg = true;
                                Intialize_Wash_Jars = false;
                                watervalveonpff(Next_JarName_R8, 1);
                            }
                        }
                    }
                }
                if (JarName_R8.Contains("J"))////if (Prev_JarName_R5.Contains("W"))
                {
                    //Off condition
                    if (cmd_Exec_Comp == true)
                    {
                        DateTime doff = r8_incub_Woff.AddSeconds(20); // Added 15-12-2023 to to stop unnecessary command sending
                        if ((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r8priority == 1) || (r9priority == 1) || (r7priority == 1))
                        {
                            r8_incub_Woff = r8_incub_Woff.AddSeconds(18);
                        }
                        else
                        {
                            //Off condition
                            if ((d1 >= r8_incub_Woff) && (d1 <= doff))   //Modified on 15-12-2023 to send the Valve shut command between the time
                            {
                                for (int woff = 0; woff < water_valves_on_off_state.Length; woff++)
                                {
                                    if (water_valves_on_off_state[woff] == 1)
                                    {
                                        if ((woff == 0) && (W1_On_State == false)) watervalveonpff("W1", 0);
                                        else if ((woff == 1) && (W2_On_State == false)) watervalveonpff("W2", 0);
                                        else if ((woff == 2) && (W3_On_State == false)) watervalveonpff("W3", 0);
                                        else if ((woff == 3) && (W4_On_State == false)) watervalveonpff("W4", 0);
                                        else if ((woff == 4) && (W5_On_State == false)) watervalveonpff("W5", 0);
                                        else if ((woff == 5) && (W6_On_State == false)) watervalveonpff("W6", 0);
                                    }
                                }
                            }
                        }
                    }
                    //////Off condition
                    ////if ((d1 >= r5_incub_Woff) && (r5_incub_Woff_flg == false))
                    ////{
                    ////    r5_incub_Woff_flg = true;
                    ////    watervalveonpff(Prev_JarName_R5, 0);
                    ////}
                }
                //lbl_tmr5.Text = "RNo. R" + R5_cnt.ToString() + ",JNo." + JarName_R5 + " Elasped-" + d1.ToString().Substring(10) + " Incub-" + r5_incub.ToString().Substring(10) + " Task Complete By-" + r5_taskcomp.ToString().Substring(10);
                if (JarName_R8.Contains("H"))
                    updateheatertimings(JarName_R8, "R" + R8_cnt.ToString(), true, 8);
                else
                    updatetiming(JarName_R8, "R" + R8_cnt.ToString(), 8);
            }
        }
        private void tmr_r9_incub_Tick(object sender, EventArgs e)
        {
            Application.DoEvents();
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts11 = new TimeSpan();
            int jno = 0; Boolean rackin = false;
            if (d1 >= r9_incub)
            {
                tmr_r9_incub.Enabled = false;
                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    ////System.Threading.Thread.Sleep(1000);
                }
                //below code updated on 08-05-2024 in order avoid clash of racks
                if ((R2_pickcmdissue == true) || (R1_pickcmdissue == true) || (R3_pickcmdissue == true) || (R4_pickcmdissue == true) || (R5_pickcmdissue == true) || (R6_pickcmdissue == true) || (R7_pickcmdissue == true) || (R8_pickcmdissue == true) || (rackloadingtoJar == true) || (RA_Move_issued == true))
                {
                    r9_incub = r9_incub.AddSeconds(15);
                    tmr_r9_incub.Enabled = true;
                    tmr_r9_incub.Interval = 1000;
                    r9_taskcomp = r9_taskcomp.AddSeconds(15);
                    r9_incub_Woff = r9_incub_Woff.AddSeconds(15);
                    r9_WaitCnt++;
                    Communication.writeCommunicationCommands("15 Secconds Timer incrementes in Jar " + JarName_R9 + " for " + "R" + R9_cnt.ToString() + " as other racks picking by RA in tmr_r9_incub()");
                    return;
                }
                //Above code updated on 08-05-2024  in order avoid clash of racks

                //Below code added on 30-08-2024 1140
                TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
                TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
                TimeSpan ts7 = new TimeSpan(); TimeSpan ts8 = new TimeSpan(); TimeSpan ts9 = new TimeSpan();
                ts1 = r1_incub.Subtract(r9_incub);
                ts2 = r2_incub.Subtract(r9_incub);
                ts3 = r3_incub.Subtract(r9_incub);
                ts4 = r4_incub.Subtract(r9_incub);
                ts5 = r5_incub.Subtract(r9_incub);
                ts6 = r6_incub.Subtract(r9_incub);
                ts7 = r7_incub.Subtract(r9_incub);
                ts8 = r9_incub.Subtract(r9_incub);

                if ((JarName_R9 == "W1") || (JarName_R9 == "W2") || (JarName_R9 == "W3") || (JarName_R9 == "W4") || (JarName_R9 == "W5") || (JarName_R9 == "W6"))
                {
                    if ((ts1.Seconds > 0 && ts1.Seconds <= 9) || (ts2.Seconds > 0 && ts2.Seconds <= 9) || (ts3.Seconds > 0 && ts3.Seconds <= 9) || (ts4.Seconds > 0 && ts4.Seconds <= 9) || (ts5.Seconds > 0 && ts5.Seconds <= 9) || (ts6.Seconds > 0 && ts6.Seconds <= 9) || (ts7.Seconds > 0 && ts7.Seconds <= 9) || (ts8.Seconds > 0 && ts8.Seconds <= 9))
                    {
                        r9_incub = r9_incub.AddSeconds(18);
                        tmr_r9_incub.Enabled = true;
                        tmr_r9_incub.Interval = 1000;
                        r9_taskcomp = r9_taskcomp.AddSeconds(18);
                        Communication.writeCommunicationCommands("18 Secconds Timer incrementes in Jar " + JarName_R9 + " for " + "R" + R8_cnt.ToString() + " as this rack in water station and other rack is elasping time in tmr_r9_incub()");
                        return;
                    }
                }
                //Above code added on 30-08-2024 1140

                //Below code updated on 01-04-2024 to give priority to previous updated count
                if (((r9_WaitCnt < r2_WaitCnt) || (r9_WaitCnt < r1_WaitCnt) || (r9_WaitCnt < r3_WaitCnt) || (r9_WaitCnt < r4_WaitCnt) || (r9_WaitCnt < r5_WaitCnt) || (r9_WaitCnt < r6_WaitCnt) || (r9_WaitCnt < r7_WaitCnt) || (r9_WaitCnt < r8_WaitCnt)) && (r9priority == 0))
                {
                    r9_incub = r9_incub.AddSeconds(11);
                    tmr_r9_incub.Enabled = true;
                    tmr_r9_incub.Interval = 1000;
                    r9_taskcomp = r9_taskcomp.AddSeconds(11);
                    r9_incub_Woff = r9_incub_Woff.AddSeconds(11);
                    r9_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R9 + " for " + "R" + R9_cnt.ToString() + " as previous racks are in Waiting in tmr_r9_incub()");
                    return;
                }

                //Below code added on 05-12-2023 1055 in order to avoid clash
                if (((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r7priority == 1) || (r8priority == 1)) && (r9priority == 0))
                {
                    r9_incub = r9_incub.AddSeconds(11);
                    tmr_r9_incub.Enabled = true;
                    tmr_r9_incub.Interval = 1000;
                    r9_taskcomp = r9_taskcomp.AddSeconds(11);
                    r9_incub_Woff = r9_incub_Woff.AddSeconds(11);
                    r9_WaitCnt++;
                    Communication.writeCommunicationCommands("11 Secconds Timer incrementes in Jar " + JarName_R9 + " for " + "R" + R9_cnt.ToString() + " as other racks are in high priority in tmr_r9_incub()");
                    return;
                }
                //Below code added on 20-12-2023 1644 to avoid clash 
                if (r9priority == 0)
                {
                    jno = Convert.ToInt32(Next_JarName_R9.Substring(1));
                    if (Next_JarName_R9.Contains("J"))
                    {
                        if (rackinjars[jno - 1] == 1)
                            rackin = true;
                    }
                    else if (Next_JarName_R9.Contains("W"))
                    {
                        if (rackinwaterjars[jno - 1] == 1)
                            rackin = true;
                    }
                    if (rackin == true)
                    {
                        r9_incub = r9_incub.AddSeconds(11);
                        r9_taskcomp = r9_taskcomp.AddSeconds(11);
                        tmr_r9_incub.Enabled = true;
                        tmr_r9_incub.Interval = 1000;
                        return;
                    }
                }
                //Above code added on 20-12-2023 1644 to avoid clash 
                if ((cmd_Exec_Comp == false) && (r9priority == 0))
                {
                    r9_incub = r9_incub.AddSeconds(11);
                    r9_taskcomp = r9_taskcomp.AddSeconds(11);
                    tmr_r9_incub.Enabled = true;
                    tmr_r9_incub.Interval = 1000;
                    return;
                }
                //Above code added on 05-12-2023 1055 in order to avoid clash

                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    System.Threading.Thread.Sleep(1000);
                }

                if ((Process_Continued == true) && (protocolinitiateflg_R9 == false))
                    protocolinitiateflg_R9 = true;
                if (continuetest > r9_incub)
                    ts11 = continuetest.Subtract(r9_incub);
                else
                    ts11 = r9_incub.Subtract(continuetest);
                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 27))
                {
                    continuetest = continuetest.AddSeconds(27);
                }
                //Next rack calculation
                if (nxtrackloading > r9_incub)
                    ts11 = nxtrackloading.Subtract(r9_incub);
                else
                    ts11 = r9_incub.Subtract(nxtrackloading);

                if ((ts11.TotalSeconds >= 0) && (ts11.TotalSeconds <= 18))
                {
                    nxtrackloading = nxtrackloading.AddSeconds(18);
                }

                check_priority_times(9);
                if (p9protorun_flg == false)
                {
                    tmr_r9_incub.Enabled = true;
                    tmr_r9_incub.Interval = 1000;
                    return;
                }
                //Below code added on 13-12-2023 to check the washing time completed
                if (JarName_R9 == "W1")
                    W1_On_State = false;
                else if (JarName_R9 == "W2")
                    W2_On_State = false;
                else if (JarName_R9 == "W3")
                    W3_On_State = false;
                else if (JarName_R9 == "W4")
                    W4_On_State = false;
                else if (JarName_R9 == "W5")
                    W5_On_State = false;
                else if (JarName_R9 == "W6")
                    W6_On_State = false;
                //Above code added on 13-12-2023 to check the washing time completed
                if ((JarName_R9 == "W1") || (JarName_R9 == "W2") || (JarName_R9 == "W3") || (JarName_R9 == "W4") || (JarName_R9 == "W5") || (JarName_R9 == "W6"))
                {
                    Intialize_Wash_Jars = false;
                    watervalveonpff(JarName_R9, 0);
                    System.Threading.Thread.Sleep(750);
                }
                if ((JarName_R9 == "H1") || (JarName_R9 == "H2") || (JarName_R9 == "H3"))
                {
                    if (JarName_R9 == "H1") { H1_incub_complete = true; }
                    else if (JarName_R9 == "H2") { H2_incub_complete = true; }
                    else if (JarName_R9 == "H3") { H3_incub_complete = true; }
                    open_htrdoor();
                }
                else
                {
                    if (protocolinitiateflg_R9 == true)
                        protocolrun_R9();
                }
            }
            else
            {
                //////////code added on 04-12-2023 1159
                ////////if ((d1 >= r5_priorChk) && (r5_priorChk_flg == false))
                ////////{
                ////////    r5_priorChk_flg = true;
                ////////    check_priority_times(5);
                ////////}

                //////code written on 28-11-2023 1526 to read the temperature                
                ////if ((heatingreqflg == true) && (Readtmpintiated_reinitiate == false) && (TempReadingStarted == false))
                ////{
                ////    Readtmpintiated_reinitiate = true;
                ////    tmr_temp.Enabled = true;
                ////    tmr_temp.Interval = 5000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database
                ////DateTime doff1 = r5_incub_Woff.AddSeconds(10); // Added 21-12-2023 to update data to database
                ////if ((d1 >= r5_incub_Woff) && (d1 <= doff1) && tmr_update_flg == false)   //Modified on 21-12-2023 to update data to database
                ////{
                ////    tmr_update_flg = true;
                ////    tmr_update.Enabled = true;
                ////    tmr_update.Interval = 2000;
                ////}
                //////New code updated on 21-12-2023 to insert the loaded data to database
                //Write code to On / Off water Value written on 11112023_1540                
                if (Next_JarName_R9.Contains("W"))
                {
                    washrackno = R9_cnt;
                    if ((R1_pickcmdissue == false) && (R2_pickcmdissue == false) && (R3_pickcmdissue == false) && (R4_pickcmdissue == false) && (R5_pickcmdissue == false) && (R6_pickcmdissue == false) && (R7_pickcmdissue == false) && (R8_pickcmdissue == false) && (R9_pickcmdissue == false))
                    {
                        if ((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r8priority == 1) || (r9priority == 1) || (r7priority == 1))
                        {
                            r9_incub_Woff = r9_incub_Woff.AddSeconds(18);
                        }
                        else
                        {

                            if ((d1 >= r9_incub_WOn) && (r9_incub_WOn_flg == false) && (cmd_Exec_Comp == true))
                            {
                                r9_incub_WOn_flg = true;
                                Intialize_Wash_Jars = false;
                                watervalveonpff(Next_JarName_R9, 1);
                            }
                        }
                    }
                }
                if (JarName_R9.Contains("J"))////if (Prev_JarName_R5.Contains("W"))
                {
                    //Off condition
                    if (cmd_Exec_Comp == true)
                    {
                        DateTime doff = r8_incub_Woff.AddSeconds(20); // Added 15-12-2023 to to stop unnecessary command sending
                        if ((r1priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1) || (r8priority == 1) || (r9priority == 1) || (r7priority == 1))
                        {
                            r9_incub_Woff = r9_incub_Woff.AddSeconds(18);
                        }
                        else
                        {
                            //Off condition
                            if ((d1 >= r8_incub_Woff) && (d1 <= doff))   //Modified on 15-12-2023 to send the Valve shut command between the time
                            {
                                for (int woff = 0; woff < water_valves_on_off_state.Length; woff++)
                                {
                                    if (water_valves_on_off_state[woff] == 1)
                                    {
                                        if ((woff == 0) && (W1_On_State == false)) watervalveonpff("W1", 0);
                                        else if ((woff == 1) && (W2_On_State == false)) watervalveonpff("W2", 0);
                                        else if ((woff == 2) && (W3_On_State == false)) watervalveonpff("W3", 0);
                                        else if ((woff == 3) && (W4_On_State == false)) watervalveonpff("W4", 0);
                                        else if ((woff == 4) && (W5_On_State == false)) watervalveonpff("W5", 0);
                                        else if ((woff == 5) && (W6_On_State == false)) watervalveonpff("W6", 0);
                                    }
                                }
                            }
                        }
                    }
                    //////Off condition
                    ////if ((d1 >= r5_incub_Woff) && (r5_incub_Woff_flg == false))
                    ////{
                    ////    r5_incub_Woff_flg = true;
                    ////    watervalveonpff(Prev_JarName_R5, 0);
                    ////}
                }
                //lbl_tmr5.Text = "RNo. R" + R5_cnt.ToString() + ",JNo." + JarName_R5 + " Elasped-" + d1.ToString().Substring(10) + " Incub-" + r5_incub.ToString().Substring(10) + " Task Complete By-" + r5_taskcomp.ToString().Substring(10);
                if (JarName_R9.Contains("H"))
                    updateheatertimings(JarName_R9, "R" + R9_cnt.ToString(), true, 9);
                else
                    updatetiming(JarName_R9, "R" + R9_cnt.ToString(), 9);
            }
        }
        private int checkdipstat_Delay()
        {
            int dipdelay = 11;  //Previously decalred 11 seconds  2nd Updation from 18secs to 11 Secs
            if (R1_dipdelay > 0)
            {
                dipdelay = dipdelay + (R1_dipdelay * 5);
            }
            else if (R2_dipdelay > 0)
            {
                dipdelay = dipdelay + (R2_dipdelay * 5);
            }
            else if (R3_dipdelay > 0)
            {
                dipdelay = dipdelay + (R3_dipdelay * 5);
            }
            else if (R4_dipdelay > 0)
            {
                dipdelay = dipdelay + (R4_dipdelay * 5);
            }
            else if (R5_dipdelay > 0)
            {
                dipdelay = dipdelay + (R5_dipdelay * 5);
            }
            else if (R6_dipdelay > 0)
            {
                dipdelay = dipdelay + (R6_dipdelay * 5);
            }
            else if (R7_dipdelay > 0)
            {
                dipdelay = dipdelay + (R7_dipdelay * 5);
            }
            else if (R8_dipdelay > 0)
            {
                dipdelay = dipdelay + (R8_dipdelay * 5);
            }
            else if (R9_dipdelay > 0)
            {
                dipdelay = dipdelay + (R9_dipdelay * 5);
            }
            return dipdelay;
        }

        Boolean p1protorun_flg = false, p2protorun_flg = false, p3protorun_flg = false, p4protorun_flg = false, p5protorun_flg = false, p6protorun_flg = false, p7protorun_flg = false, p8protorun_flg = false, p9protorun_flg = false;
        private void check_priority_times(int prtno)
        {
            TimeSpan ts1 = new TimeSpan();
            TimeSpan ts2 = new TimeSpan();
            TimeSpan ts3 = new TimeSpan();
            TimeSpan ts4 = new TimeSpan();
            TimeSpan ts5 = new TimeSpan();
            TimeSpan ts6 = new TimeSpan();
            TimeSpan ts7 = new TimeSpan();
            TimeSpan ts8 = new TimeSpan();

            TimeSpan ts1_1 = new TimeSpan();
            TimeSpan ts2_1 = new TimeSpan();
            TimeSpan ts3_1 = new TimeSpan();
            TimeSpan ts4_1 = new TimeSpan();
            TimeSpan ts5_1 = new TimeSpan();
            TimeSpan ts6_1 = new TimeSpan();
            TimeSpan ts7_1 = new TimeSpan();
            TimeSpan ts8_1 = new TimeSpan();

            int dipdly = 0;
            dipdly = checkdipstat_Delay();

            if (TempReadingStarted == true)
            {
                tmr_temp.Enabled = false;
                tmr_temp_incub.Enabled = false;
                tmr_tempstart.Enabled = true;
                temp_restartincub = System.DateTime.Now;
                temp_restartincub = temp_restartincub.AddSeconds(10);
                System.Threading.Thread.Sleep(200);
            }
            switch (prtno)
            {
                case 1:
                    {
                        try
                        {
                            if ((r2priority == 0) && (r3priority == 0) && (r4priority == 0) && (r5priority == 0) && (r6priority == 0) && (r7priority == 0) && (r8priority == 0) && (r9priority == 0))
                                p1protorun_flg = true;
                            else
                            {
                                //New code added on 15-11-2023 as checked for priority
                                ts1 = r1_incub.Subtract(r2_incub);
                                ts2 = r1_incub.Subtract(r3_incub);
                                ts3 = r1_incub.Subtract(r4_incub);
                                ts4 = r1_incub.Subtract(r5_incub);
                                ts5 = r1_incub.Subtract(r6_incub);
                                ts6 = r1_incub.Subtract(r7_incub);
                                ts7 = r1_incub.Subtract(r8_incub);
                                ts8 = r1_incub.Subtract(r9_incub);

                                ts1_1 = r2_incub.Subtract(r1_incub);
                                ts2_1 = r3_incub.Subtract(r1_incub);
                                ts3_1 = r4_incub.Subtract(r1_incub);
                                ts4_1 = r5_incub.Subtract(r1_incub);
                                ts5_1 = r6_incub.Subtract(r1_incub);
                                ts6_1 = r7_incub.Subtract(r1_incub);
                                ts7_1 = r8_incub.Subtract(r1_incub);
                                ts8_1 = r9_incub.Subtract(r1_incub);

                                #region 1st & 2nd Rack Priority checking
                                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds <= dipdly)) || ((ts1_1.TotalSeconds > 0) && (ts1_1.TotalSeconds <= dipdly)))
                                {
                                    if (r2priority == 0)
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = true;
                                    }
                                    else if ((r2priority == 1) && (r1priority == 0))
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = false;
                                    }
                                }
                                #endregion

                                #region 1st & 3rd Rack Priority checking
                                if (((ts2.TotalSeconds > 0) && (ts2.TotalSeconds <= dipdly)) || ((ts2_1.TotalSeconds > 0) && (ts2_1.TotalSeconds <= dipdly)))
                                {
                                    if (r3priority == 0)
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = true;
                                    }
                                    else if ((r3priority == 1) && (r1priority == 0))
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = false;
                                    }
                                }
                                #endregion

                                #region 1st & 4th Rack Priority checking
                                if (((ts3.TotalSeconds > 0) && (ts3.TotalSeconds <= dipdly)) || ((ts3_1.TotalSeconds > 0) && (ts3_1.TotalSeconds <= dipdly)))
                                {
                                    if (r4priority == 0)
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = true;
                                    }
                                    else if ((r4priority == 1) && (r1priority == 0))
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = false;
                                    }
                                }
                                #endregion

                                #region 1st & 5th Rack Priority checking
                                if (((ts4.TotalSeconds > 0) && (ts4.TotalSeconds <= dipdly)) || ((ts4_1.TotalSeconds > 0) && (ts4_1.TotalSeconds <= dipdly)))
                                {
                                    if (r5priority == 0)
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = true;
                                    }
                                    else if ((r5priority == 1) && (r1priority == 0))
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = false;
                                    }
                                }
                                #endregion

                                #region 1st & 6th Rack priority checking
                                if (((ts5.TotalSeconds > 0) && (ts5.TotalSeconds <= dipdly)) || ((ts5_1.TotalSeconds > 0) && (ts5_1.TotalSeconds <= dipdly)))
                                {
                                    if (r6priority == 0)
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = true;
                                    }
                                    else if ((r6priority == 1) && (r1priority == 0))
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = false;
                                    }
                                }
                                #endregion

                                #region 1st & 7th Rack priority checking
                                if (((ts6.TotalSeconds > 0) && (ts6.TotalSeconds <= dipdly)) || ((ts6_1.TotalSeconds > 0) && (ts6_1.TotalSeconds <= dipdly)))
                                {
                                    if (r7priority == 0)
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = true;
                                    }
                                    else if ((r7priority == 1) && (r1priority == 0))
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = false;
                                    }
                                }
                                #endregion
                                #region 1st & 8th Rack priority checking
                                if (((ts7.TotalSeconds > 0) && (ts7.TotalSeconds <= dipdly)) || ((ts7_1.TotalSeconds > 0) && (ts7_1.TotalSeconds <= dipdly)))
                                {
                                    if (r8priority == 0)
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = true;
                                    }
                                    else if ((r8priority == 1) && (r1priority == 0))
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = false;
                                    }
                                }
                                #endregion
                                #region 1st & 9th Rack priority checking
                                if (((ts8.TotalSeconds > 0) && (ts8.TotalSeconds <= dipdly)) || ((ts8_1.TotalSeconds > 0) && (ts8_1.TotalSeconds <= dipdly)))
                                {
                                    if (r9priority == 0)
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = true;
                                    }
                                    else if ((r9priority == 1) && (r1priority == 0))
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p1protorun_flg = false;
                                    }
                                }
                                #endregion
                                //Updating timing values
                            }
                        }
                        catch (Exception d3)
                        {
                            RequiredVariables.writeerrorlogfile("While checking priority tasks scheduling in p1proto check rack", "In Check_priority_times in Form_RunProto");
                        }
                        break;
                    }
                case 2:
                    {
                        try
                        {
                            if ((r1priority == 0) && (r3priority == 0) && (r4priority == 0) && (r5priority == 0) && (r6priority == 0) && (r7priority == 0) && (r8priority == 0) && (r9priority == 0))
                                p2protorun_flg = true;
                            else
                            {
                                //Updating timing values
                                //New code added on 15-11-2023 as checked for priority
                                ts1 = r2_incub.Subtract(r1_incub);
                                ts2 = r2_incub.Subtract(r3_incub);
                                ts3 = r2_incub.Subtract(r4_incub);
                                ts4 = r2_incub.Subtract(r5_incub);
                                ts5 = r2_incub.Subtract(r6_incub);
                                ts6 = r2_incub.Subtract(r7_incub);
                                ts7 = r2_incub.Subtract(r8_incub);
                                ts8 = r2_incub.Subtract(r9_incub);

                                ts1_1 = r1_incub.Subtract(r2_incub);
                                ts2_1 = r3_incub.Subtract(r2_incub);
                                ts3_1 = r4_incub.Subtract(r2_incub);
                                ts4_1 = r5_incub.Subtract(r2_incub);
                                ts5_1 = r6_incub.Subtract(r2_incub);
                                ts6_1 = r7_incub.Subtract(r2_incub);
                                ts7_1 = r8_incub.Subtract(r2_incub);
                                ts8_1 = r9_incub.Subtract(r2_incub);

                                #region 2nd & 1st Rack Priority checking
                                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds <= dipdly)) || ((ts1_1.TotalSeconds > 0) && (ts1_1.TotalSeconds <= dipdly)))
                                {
                                    if (r1priority == 0)
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = true;
                                    }
                                    else if ((r1priority == 1) && (r2priority == 0))
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = false;
                                    }
                                }
                                #endregion
                                #region 2nd & 3rd Rack Priority checking
                                if (((ts2.TotalSeconds > 0) && (ts2.TotalSeconds <= dipdly)) || ((ts2_1.TotalSeconds > 0) && (ts2_1.TotalSeconds <= dipdly)))
                                {
                                    if (r3priority == 0)
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = true;
                                    }
                                    else if ((r3priority == 1) && (r2priority == 0))
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = false;
                                    }
                                }
                                #endregion
                                #region 2ndt & 4th Rack Priority checking
                                if (((ts3.TotalSeconds > 0) && (ts3.TotalSeconds <= dipdly)) || ((ts3_1.TotalSeconds > 0) && (ts3_1.TotalSeconds <= dipdly)))
                                {
                                    if (r4priority == 0)
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = true;
                                    }
                                    else if ((r4priority == 1) && (r2priority == 0))
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = false;
                                    }
                                }
                                #endregion
                                #region 2nd & 5th Rack Priority checking
                                if (((ts4.TotalSeconds > 0) && (ts4.TotalSeconds <= dipdly)) || ((ts4_1.TotalSeconds > 0) && (ts4_1.TotalSeconds <= dipdly)))
                                {
                                    if (r5priority == 0)
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = true;
                                    }
                                    else if ((r5priority == 1) && (r2priority == 0))
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = false;
                                    }
                                }
                                #endregion
                                #region 2nd & 6th Rack priority checking
                                if (((ts5.TotalSeconds > 0) && (ts5.TotalSeconds <= dipdly)) || ((ts5_1.TotalSeconds > 0) && (ts5_1.TotalSeconds <= dipdly)))
                                {
                                    if (r6priority == 0)
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = true;
                                    }
                                    else if ((r6priority == 1) && (r2priority == 0))
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = false;
                                    }
                                }
                                #endregion
                                #region 2nd & 7th Rack priority checking
                                if (((ts6.TotalSeconds > 0) && (ts6.TotalSeconds <= dipdly)) || ((ts6_1.TotalSeconds > 0) && (ts6_1.TotalSeconds <= dipdly)))
                                {
                                    if (r7priority == 0)
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = true;
                                    }
                                    else if ((r7priority == 1) && (r2priority == 0))
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = false;
                                    }
                                }
                                #endregion
                                #region 2nd & 8th Rack priority checking
                                if (((ts7.TotalSeconds > 0) && (ts7.TotalSeconds <= dipdly)) || ((ts7_1.TotalSeconds > 0) && (ts7_1.TotalSeconds <= dipdly)))
                                {
                                    if (r8priority == 0)
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = true;
                                    }
                                    else if ((r8priority == 1) && (r2priority == 0))
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = false;
                                    }
                                }
                                #endregion
                                #region 2nd & 9th Rack priority checking
                                if (((ts8.TotalSeconds > 0) && (ts8.TotalSeconds <= dipdly)) || ((ts8_1.TotalSeconds > 0) && (ts8_1.TotalSeconds <= dipdly)))
                                {
                                    if (r9priority == 0)
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = true;
                                    }
                                    else if ((r9priority == 1) && (r2priority == 0))
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p2protorun_flg = false;
                                    }
                                }
                                #endregion
                            }
                        }
                        catch (Exception d3)
                        {
                            RequiredVariables.writeerrorlogfile("While checking priority tasks scheduling in p2proto check rack", "In Check_priority_times in Form_RunProto");
                        }
                        break;
                    }
                case 3:
                    {
                        try
                        {
                            if ((r2priority == 0) && (r1priority == 0) && (r4priority == 0) && (r5priority == 0) && (r6priority == 0) && (r7priority == 0) && (r8priority == 0) && (r9priority == 0))
                                p3protorun_flg = true;
                            else
                            {
                                //New code added on 15-11-2023 as checked for priority
                                ts1 = r3_incub.Subtract(r1_incub);
                                ts2 = r3_incub.Subtract(r2_incub);
                                ts3 = r3_incub.Subtract(r4_incub);
                                ts4 = r3_incub.Subtract(r5_incub);
                                ts5 = r3_incub.Subtract(r6_incub);
                                ts6 = r3_incub.Subtract(r7_incub);
                                ts7 = r3_incub.Subtract(r8_incub);
                                ts8 = r3_incub.Subtract(r9_incub);

                                ts1_1 = r1_incub.Subtract(r3_incub);
                                ts2_1 = r2_incub.Subtract(r3_incub);
                                ts3_1 = r4_incub.Subtract(r3_incub);
                                ts4_1 = r5_incub.Subtract(r3_incub);
                                ts5_1 = r6_incub.Subtract(r3_incub);
                                ts6_1 = r7_incub.Subtract(r3_incub);
                                ts7_1 = r8_incub.Subtract(r3_incub);
                                ts8_1 = r9_incub.Subtract(r3_incub);

                                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds <= dipdly)) || ((ts1_1.TotalSeconds > 0) && (ts1_1.TotalSeconds <= dipdly)))
                                {
                                    if (r1priority == 0)
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = true;
                                    }
                                    else if ((r3priority == 0) && (r1priority == 1))
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = false;
                                    }
                                }
                                if (((ts2.TotalSeconds > 0) && (ts2.TotalSeconds <= dipdly)) || ((ts2_1.TotalSeconds > 0) && (ts2_1.TotalSeconds <= dipdly)))
                                {
                                    if (r2priority == 0)
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = true;
                                    }
                                    else if ((r3priority == 0) && (r2priority == 1))
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = false;
                                    }
                                }
                                if (((ts3.TotalSeconds > 0) && (ts3.TotalSeconds <= dipdly)) || ((ts3_1.TotalSeconds > 0) && (ts3_1.TotalSeconds <= dipdly)))
                                {
                                    if (r4priority == 0)
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = true;
                                    }
                                    else if ((r3priority == 0) && (r4priority == 1))
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = false;
                                    }
                                }
                                if (((ts4.TotalSeconds > 0) && (ts4.TotalSeconds <= dipdly)) || ((ts4_1.TotalSeconds > 0) && (ts4_1.TotalSeconds <= dipdly)))
                                {
                                    if (r5priority == 0)
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = true;
                                    }
                                    else if ((r3priority == 0) && (r5priority == 1))
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = false;
                                    }
                                }
                                if (((ts5.TotalSeconds > 0) && (ts5.TotalSeconds <= dipdly)) || ((ts5_1.TotalSeconds > 0) && (ts5_1.TotalSeconds <= dipdly)))
                                {
                                    if (r6priority == 0)
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = true;
                                    }
                                    else if ((r3priority == 0) && (r6priority == 1))
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = false;
                                    }
                                }
                                if (((ts6.TotalSeconds > 0) && (ts6.TotalSeconds <= dipdly)) || ((ts6_1.TotalSeconds > 0) && (ts6_1.TotalSeconds <= dipdly)))
                                {
                                    if (r7priority == 0)
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = true;
                                    }
                                    else if ((r3priority == 0) && (r7priority == 1))
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = false;
                                    }
                                }
                                if (((ts7.TotalSeconds > 0) && (ts7.TotalSeconds <= dipdly)) || ((ts7_1.TotalSeconds > 0) && (ts7_1.TotalSeconds <= dipdly)))
                                {
                                    if (r8priority == 0)
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = true;
                                    }
                                    else if ((r3priority == 0) && (r8priority == 1))
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = false;
                                    }
                                }
                                if (((ts8.TotalSeconds > 0) && (ts8.TotalSeconds <= dipdly)) || ((ts8_1.TotalSeconds > 0) && (ts8_1.TotalSeconds <= dipdly)))
                                {
                                    if (r9priority == 0)
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = true;
                                    }
                                    else if ((r3priority == 0) && (r9priority == 1))
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p3protorun_flg = false;
                                    }
                                }
                            }
                        }
                        catch (Exception d3)
                        {
                            RequiredVariables.writeerrorlogfile("While checking priority tasks scheduling in p3proto check rack", "In Check_priority_times in Form_RunProto");
                        }
                        break;
                    }
                case 4:
                    {
                        try
                        {
                            if ((r2priority == 0) && (r3priority == 0) && (r1priority == 0) && (r5priority == 0) && (r6priority == 0) && (r7priority == 0) && (r8priority == 0) && (r9priority == 0))
                                p4protorun_flg = true;
                            else
                            {
                                //New code added on 15-11-2023 as checked for priority
                                ts1 = r4_incub.Subtract(r1_incub);
                                ts2 = r4_incub.Subtract(r2_incub);
                                ts3 = r4_incub.Subtract(r3_incub);
                                ts4 = r4_incub.Subtract(r5_incub);
                                ts5 = r4_incub.Subtract(r6_incub);
                                ts6 = r4_incub.Subtract(r7_incub);
                                ts7 = r4_incub.Subtract(r8_incub);
                                ts8 = r4_incub.Subtract(r9_incub);

                                ts1_1 = r1_incub.Subtract(r4_incub);
                                ts2_1 = r2_incub.Subtract(r4_incub);
                                ts3_1 = r3_incub.Subtract(r4_incub);
                                ts4_1 = r5_incub.Subtract(r4_incub);
                                ts5_1 = r6_incub.Subtract(r4_incub);
                                ts6_1 = r7_incub.Subtract(r4_incub);
                                ts7_1 = r8_incub.Subtract(r4_incub);
                                ts8_1 = r9_incub.Subtract(r4_incub);

                                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds <= dipdly)) || ((ts1_1.TotalSeconds > 0) && (ts1_1.TotalSeconds <= dipdly)))
                                {
                                    if (r1priority == 0)
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = true;
                                    }
                                    else if ((r4priority == 0) && (r1priority == 1))
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = false;
                                    }
                                }
                                if (((ts2.TotalSeconds > 0) && (ts2.TotalSeconds <= dipdly)) || ((ts2_1.TotalSeconds > 0) && (ts2_1.TotalSeconds <= dipdly)))
                                {
                                    if (r2priority == 0)
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = true;
                                    }
                                    else if ((r4priority == 0) && (r2priority == 1))
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = false;
                                    }
                                }
                                if (((ts3.TotalSeconds > 0) && (ts3.TotalSeconds <= dipdly)) || ((ts3_1.TotalSeconds > 0) && (ts3_1.TotalSeconds <= dipdly)))
                                {
                                    if (r3priority == 0)
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = true;
                                    }
                                    else if ((r3priority == 1) && (r4priority == 0))
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = false;
                                    }
                                }
                                if (((ts4.TotalSeconds > 0) && (ts4.TotalSeconds <= dipdly)) || ((ts4_1.TotalSeconds > 0) && (ts4_1.TotalSeconds <= dipdly)))
                                {
                                    if (r5priority == 0)
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = true;
                                    }
                                    else if ((r4priority == 0) && (r5priority == 1))
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = false;
                                    }
                                }
                                if (((ts5.TotalSeconds > 0) && (ts5.TotalSeconds <= dipdly)) || ((ts5_1.TotalSeconds > 0) && (ts5_1.TotalSeconds <= dipdly)))
                                {
                                    if (r6priority == 0)
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = true;
                                    }
                                    else if ((r4priority == 0) && (r6priority == 1))
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = false;
                                    }
                                }
                                if (((ts6.TotalSeconds > 0) && (ts6.TotalSeconds <= dipdly)) || ((ts6_1.TotalSeconds > 0) && (ts6_1.TotalSeconds <= dipdly)))
                                {
                                    if (r7priority == 0)
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = true;
                                    }
                                    else if ((r4priority == 0) && (r7priority == 1))
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = false;
                                    }
                                }
                                if (((ts7.TotalSeconds > 0) && (ts7.TotalSeconds <= dipdly)) || ((ts7_1.TotalSeconds > 0) && (ts7_1.TotalSeconds <= dipdly)))
                                {
                                    if (r8priority == 0)
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = true;
                                    }
                                    else if ((r4priority == 0) && (r8priority == 1))
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = false;
                                    }
                                }
                                if (((ts8.TotalSeconds > 0) && (ts8.TotalSeconds <= dipdly)) || ((ts8_1.TotalSeconds > 0) && (ts8_1.TotalSeconds <= dipdly)))
                                {
                                    if (r9priority == 0)
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = true;
                                    }
                                    else if ((r4priority == 0) && (r9priority == 1))
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p4protorun_flg = false;
                                    }
                                }
                            }
                        }
                        catch (Exception d3)
                        {
                            RequiredVariables.writeerrorlogfile("While checking priority tasks scheduling in p4proto check rack", "In Check_priority_times in Form_RunProto");
                        }
                        break;
                    }
                case 5:
                    {
                        try
                        {
                            if ((r2priority == 0) && (r3priority == 0) && (r4priority == 0) && (r1priority == 0) && (r6priority == 0) && (r7priority == 0) && (r8priority == 0) && (r9priority == 0))
                                p5protorun_flg = true;
                            else
                            {
                                //New code added on 15-11-2023 as checked for priority
                                ts1 = r5_incub.Subtract(r1_incub);
                                ts2 = r5_incub.Subtract(r2_incub);
                                ts3 = r5_incub.Subtract(r3_incub);
                                ts4 = r5_incub.Subtract(r4_incub);
                                ts5 = r5_incub.Subtract(r6_incub);
                                ts6 = r5_incub.Subtract(r7_incub);
                                ts7 = r5_incub.Subtract(r8_incub);
                                ts8 = r5_incub.Subtract(r9_incub);

                                ts1_1 = r1_incub.Subtract(r5_incub);
                                ts2_1 = r2_incub.Subtract(r5_incub);
                                ts3_1 = r3_incub.Subtract(r5_incub);
                                ts4_1 = r4_incub.Subtract(r5_incub);
                                ts5_1 = r6_incub.Subtract(r5_incub);
                                ts6_1 = r7_incub.Subtract(r5_incub);
                                ts7_1 = r8_incub.Subtract(r5_incub);
                                ts8_1 = r9_incub.Subtract(r5_incub);

                                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds <= dipdly)) || ((ts1_1.TotalSeconds > 0) && (ts1_1.TotalSeconds <= dipdly)))
                                {
                                    if (r1priority == 0)
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = true;
                                    }
                                    else if ((r5priority == 0) && (r1priority == 1))
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = false;
                                    }
                                }
                                if (((ts2.TotalSeconds > 0) && (ts2.TotalSeconds <= dipdly)) || ((ts2_1.TotalSeconds > 0) && (ts2_1.TotalSeconds <= dipdly)))
                                {
                                    if (r2priority == 0)
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = true;
                                    }
                                    else if ((r5priority == 0) && (r2priority == 1))
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = false;
                                    }
                                }
                                if (((ts3.TotalSeconds > 0) && (ts3.TotalSeconds <= dipdly)) || ((ts3_1.TotalSeconds > 0) && (ts3_1.TotalSeconds <= dipdly)))
                                {
                                    if (r3priority == 0)
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = true;
                                    }
                                    else if ((r5priority == 0) && (r3priority == 1))
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = false;
                                    }
                                }
                                if (((ts4.TotalSeconds > 0) && (ts4.TotalSeconds <= dipdly)) || ((ts4_1.TotalSeconds > 0) && (ts4_1.TotalSeconds <= dipdly)))
                                {
                                    if (r4priority == 0)
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = true;
                                    }
                                    else if ((r5priority == 0) && (r4priority == 1))
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = false;
                                    }
                                }
                                if (((ts5.TotalSeconds > 0) && (ts5.TotalSeconds <= dipdly)) || ((ts5_1.TotalSeconds > 0) && (ts5_1.TotalSeconds <= dipdly)))
                                {
                                    if (r6priority == 0)
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = true;
                                    }
                                    else if ((r5priority == 0) && (r6priority == 1))
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = false;
                                    }
                                }
                                if (((ts6.TotalSeconds > 0) && (ts6.TotalSeconds <= dipdly)) || ((ts6_1.TotalSeconds > 0) && (ts6_1.TotalSeconds <= dipdly)))
                                {
                                    if (r7priority == 0)
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = true;
                                    }
                                    else if ((r5priority == 0) && (r7priority == 1))
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = false;
                                    }
                                }
                                if (((ts7.TotalSeconds > 0) && (ts7.TotalSeconds <= dipdly)) || ((ts7_1.TotalSeconds > 0) && (ts7_1.TotalSeconds <= dipdly)))
                                {
                                    if (r8priority == 0)
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = true;
                                    }
                                    else if ((r5priority == 0) && (r8priority == 1))
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = false;
                                    }
                                }
                                if (((ts8.TotalSeconds > 0) && (ts8.TotalSeconds <= dipdly)) || ((ts8_1.TotalSeconds > 0) && (ts8_1.TotalSeconds <= dipdly)))
                                {
                                    if (r9priority == 0)
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = true;
                                    }
                                    else if ((r5priority == 0) && (r9priority == 1))
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p5protorun_flg = false;
                                    }
                                }
                            }
                        }
                        catch (Exception d3)
                        {
                            RequiredVariables.writeerrorlogfile("While checking priority tasks scheduling in p5proto check rack", "In Check_priority_times in Form_RunProto");
                        }
                        break;
                    }
                case 6:
                    {
                        try
                        {
                            if ((r2priority == 0) && (r3priority == 0) && (r4priority == 0) && (r5priority == 0) && (r1priority == 0) && (r7priority == 0) && (r8priority == 0) && (r9priority == 0))
                                p6protorun_flg = true;
                            else
                            {
                                //New code added on 15-11-2023 as checked for priority
                                ts1 = r6_incub.Subtract(r1_incub);
                                ts2 = r6_incub.Subtract(r2_incub);
                                ts3 = r6_incub.Subtract(r3_incub);
                                ts4 = r6_incub.Subtract(r4_incub);
                                ts5 = r6_incub.Subtract(r5_incub);
                                ts6 = r6_incub.Subtract(r7_incub);
                                ts7 = r6_incub.Subtract(r8_incub);
                                ts8 = r6_incub.Subtract(r9_incub);

                                ts1_1 = r1_incub.Subtract(r6_incub);
                                ts2_1 = r2_incub.Subtract(r6_incub);
                                ts3_1 = r3_incub.Subtract(r6_incub);
                                ts4_1 = r4_incub.Subtract(r6_incub);
                                ts5_1 = r5_incub.Subtract(r6_incub);
                                ts6_1 = r7_incub.Subtract(r6_incub);
                                ts7_1 = r8_incub.Subtract(r6_incub);
                                ts8_1 = r9_incub.Subtract(r6_incub);

                                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds <= dipdly)) || ((ts1_1.TotalSeconds > 0) && (ts1_1.TotalSeconds <= dipdly)))
                                {
                                    if (r1priority == 0)
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = true;
                                    }
                                    else if ((r6priority == 0) && (r1priority == 1))
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = false;
                                    }
                                }
                                if (((ts2.TotalSeconds > 0) && (ts2.TotalSeconds <= dipdly)) || ((ts2_1.TotalSeconds > 0) && (ts2_1.TotalSeconds <= dipdly)))
                                {
                                    if (r2priority == 0)
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = true;
                                    }
                                    else if ((r6priority == 0) && (r2priority == 1))
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = false;
                                    }
                                }
                                if (((ts3.TotalSeconds > 0) && (ts3.TotalSeconds <= dipdly)) || ((ts3_1.TotalSeconds > 0) && (ts3_1.TotalSeconds <= dipdly)))
                                {
                                    if (r3priority == 0)
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = true;
                                    }
                                    else if ((r3priority == 1) && (r6priority == 0))
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = false;
                                    }
                                }
                                if (((ts4.TotalSeconds > 0) && (ts4.TotalSeconds <= dipdly)) || ((ts4_1.TotalSeconds > 0) && (ts4_1.TotalSeconds <= dipdly)))
                                {
                                    if (r4priority == 0)
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = true;
                                    }
                                    else if ((r6priority == 0) && (r4priority == 1))
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = false;
                                    }
                                }
                                if (((ts5.TotalSeconds > 0) && (ts5.TotalSeconds <= dipdly)) || ((ts5_1.TotalSeconds > 0) && (ts5_1.TotalSeconds <= dipdly)))
                                {
                                    if (r5priority == 0)
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = true;
                                    }
                                    else if ((r6priority == 0) && (r5priority == 1))
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = false;
                                    }
                                }
                                if (((ts6.TotalSeconds > 0) && (ts6.TotalSeconds <= dipdly)) || ((ts6_1.TotalSeconds > 0) && (ts6_1.TotalSeconds <= dipdly)))
                                {
                                    if (r7priority == 0)
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = true;
                                    }
                                    else if ((r6priority == 0) && (r7priority == 1))
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = false;
                                    }
                                }
                                if (((ts7.TotalSeconds > 0) && (ts7.TotalSeconds <= dipdly)) || ((ts7_1.TotalSeconds > 0) && (ts7_1.TotalSeconds <= dipdly)))
                                {
                                    if (r8priority == 0)
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = true;
                                    }
                                    else if ((r6priority == 0) && (r8priority == 1))
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = false;
                                    }
                                }
                                if (((ts8.TotalSeconds > 0) && (ts8.TotalSeconds <= dipdly)) || ((ts8_1.TotalSeconds > 0) && (ts8_1.TotalSeconds <= dipdly)))
                                {
                                    if (r9priority == 0)
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = true;
                                    }
                                    else if ((r6priority == 0) && (r9priority == 1))
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = false;
                                    }
                                }
                            }
                        }
                        catch (Exception d3)
                        {
                            RequiredVariables.writeerrorlogfile("While checking priority tasks scheduling in p6proto check rack", "In Check_priority_times in Form_RunProto");
                        }
                        break;
                    }
                case 7:   //All three cases has to implement tommorow and check
                    {
                        try
                        {
                            if ((r2priority == 0) && (r3priority == 0) && (r4priority == 0) && (r5priority == 0) && (r1priority == 0) && (r6priority == 0) && (r8priority == 0) && (r9priority == 0))
                                p7protorun_flg = true;
                            else
                            {
                                //New code added on 15-11-2023 as checked for priority
                                ts1 = r7_incub.Subtract(r1_incub);
                                ts2 = r7_incub.Subtract(r2_incub);
                                ts3 = r7_incub.Subtract(r3_incub);
                                ts4 = r7_incub.Subtract(r4_incub);
                                ts5 = r7_incub.Subtract(r5_incub);
                                ts6 = r7_incub.Subtract(r6_incub);
                                ts7 = r7_incub.Subtract(r8_incub);
                                ts8 = r7_incub.Subtract(r9_incub);

                                ts1_1 = r1_incub.Subtract(r7_incub);
                                ts2_1 = r2_incub.Subtract(r7_incub);
                                ts3_1 = r3_incub.Subtract(r7_incub);
                                ts4_1 = r4_incub.Subtract(r7_incub);
                                ts5_1 = r5_incub.Subtract(r7_incub);
                                ts6_1 = r6_incub.Subtract(r7_incub);
                                ts7_1 = r8_incub.Subtract(r7_incub);
                                ts8_1 = r9_incub.Subtract(r7_incub);

                                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds <= dipdly)) || ((ts1_1.TotalSeconds > 0) && (ts1_1.TotalSeconds <= dipdly)))
                                {
                                    if (r1priority == 0)
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = true;
                                    }
                                    else if ((r7priority == 0) && (r1priority == 1))
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = false;
                                    }
                                }
                                if (((ts2.TotalSeconds > 0) && (ts2.TotalSeconds <= dipdly)) || ((ts2_1.TotalSeconds > 0) && (ts2_1.TotalSeconds <= dipdly)))
                                {
                                    if (r2priority == 0)
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = true;
                                    }
                                    else if ((r7priority == 0) && (r2priority == 1))
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = false;
                                    }
                                }
                                if (((ts3.TotalSeconds > 0) && (ts3.TotalSeconds <= dipdly)) || ((ts3_1.TotalSeconds > 0) && (ts3_1.TotalSeconds <= dipdly)))
                                {
                                    if (r3priority == 0)
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = true;
                                    }
                                    else if ((r3priority == 1) && (r7priority == 0))
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = false;
                                    }
                                }
                                if (((ts4.TotalSeconds > 0) && (ts4.TotalSeconds <= dipdly)) || ((ts4_1.TotalSeconds > 0) && (ts4_1.TotalSeconds <= dipdly)))
                                {
                                    if (r4priority == 0)
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = true;
                                    }
                                    else if ((r7priority == 0) && (r4priority == 1))
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = false;
                                    }
                                }
                                if (((ts5.TotalSeconds > 0) && (ts5.TotalSeconds <= dipdly)) || ((ts5_1.TotalSeconds > 0) && (ts5_1.TotalSeconds <= dipdly)))
                                {
                                    if (r5priority == 0)
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = true;
                                    }
                                    else if ((r7priority == 0) && (r5priority == 1))
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = false;
                                    }
                                }
                                if (((ts6.TotalSeconds > 0) && (ts6.TotalSeconds <= dipdly)) || ((ts6_1.TotalSeconds > 0) && (ts6_1.TotalSeconds <= dipdly)))
                                {
                                    if (r6priority == 0)
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = true;
                                    }
                                    else if ((r6priority == 1) && (r7priority == 0))
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = false;
                                    }
                                }
                                if (((ts7.TotalSeconds > 0) && (ts7.TotalSeconds <= dipdly)) || ((ts7_1.TotalSeconds > 0) && (ts7_1.TotalSeconds <= dipdly)))
                                {
                                    if (r8priority == 0)
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p6protorun_flg = true;
                                    }
                                    else if ((r7priority == 0) && (r8priority == 1))
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = false;
                                    }
                                }
                                if (((ts8.TotalSeconds > 0) && (ts8.TotalSeconds <= dipdly)) || ((ts8_1.TotalSeconds > 0) && (ts8_1.TotalSeconds <= dipdly)))
                                {
                                    if (r9priority == 0)
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = true;
                                    }
                                    else if ((r7priority == 0) && (r9priority == 1))
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p7protorun_flg = false;
                                    }
                                }
                            }
                        }
                        catch (Exception d3)
                        {
                            RequiredVariables.writeerrorlogfile("While checking priority tasks scheduling in p6proto check rack", "In Check_priority_times in Form_RunProto");
                        }
                        break;
                    }
                case 8:
                    {
                        try
                        {
                            if ((r2priority == 0) && (r3priority == 0) && (r4priority == 0) && (r5priority == 0) && (r1priority == 0) && (r7priority == 0) && (r6priority == 0) && (r9priority == 0))
                                p8protorun_flg = true;
                            else
                            {
                                //New code added on 27-11-2023 as checked for priority
                                ts1 = r8_incub.Subtract(r1_incub);
                                ts2 = r8_incub.Subtract(r2_incub);
                                ts3 = r8_incub.Subtract(r3_incub);
                                ts4 = r8_incub.Subtract(r4_incub);
                                ts5 = r8_incub.Subtract(r5_incub);
                                ts6 = r8_incub.Subtract(r6_incub);
                                ts7 = r8_incub.Subtract(r7_incub);
                                ts8 = r8_incub.Subtract(r9_incub);

                                ts1_1 = r1_incub.Subtract(r8_incub);
                                ts2_1 = r2_incub.Subtract(r8_incub);
                                ts3_1 = r3_incub.Subtract(r8_incub);
                                ts4_1 = r4_incub.Subtract(r8_incub);
                                ts5_1 = r5_incub.Subtract(r8_incub);
                                ts6_1 = r6_incub.Subtract(r8_incub);
                                ts7_1 = r7_incub.Subtract(r8_incub);
                                ts8_1 = r9_incub.Subtract(r8_incub);

                                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds <= dipdly)) || ((ts1_1.TotalSeconds > 0) && (ts1_1.TotalSeconds <= dipdly)))
                                {
                                    if (r1priority == 0)
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = true;
                                    }
                                    else if ((r8priority == 0) && (r1priority == 1))
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = false;
                                    }
                                }
                                if (((ts2.TotalSeconds > 0) && (ts2.TotalSeconds <= dipdly)) || ((ts2_1.TotalSeconds > 0) && (ts2_1.TotalSeconds <= dipdly)))
                                {
                                    if (r2priority == 0)
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = true;
                                    }
                                    else if ((r8priority == 0) && (r2priority == 1))
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = false;
                                    }
                                }
                                if (((ts3.TotalSeconds > 0) && (ts3.TotalSeconds <= dipdly)) || ((ts3_1.TotalSeconds > 0) && (ts3_1.TotalSeconds <= dipdly)))
                                {
                                    if (r3priority == 0)
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = true;
                                    }
                                    else if ((r3priority == 1) && (r8priority == 0))
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = false;
                                    }
                                }
                                if (((ts4.TotalSeconds > 0) && (ts4.TotalSeconds <= dipdly)) || ((ts4_1.TotalSeconds > 0) && (ts4_1.TotalSeconds <= dipdly)))
                                {
                                    if (r4priority == 0)
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = true;
                                    }
                                    else if ((r8priority == 0) && (r4priority == 1))
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = false;
                                    }
                                }
                                if (((ts5.TotalSeconds > 0) && (ts5.TotalSeconds <= dipdly)) || ((ts5_1.TotalSeconds > 0) && (ts5_1.TotalSeconds <= dipdly)))
                                {
                                    if (r5priority == 0)
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = true;
                                    }
                                    else if ((r8priority == 0) && (r5priority == 1))
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = false;
                                    }
                                }
                                if (((ts6.TotalSeconds > 0) && (ts6.TotalSeconds <= dipdly)) || ((ts6_1.TotalSeconds > 0) && (ts6_1.TotalSeconds <= dipdly)))
                                {
                                    if (r6priority == 0)
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = true;
                                    }
                                    else if ((r6priority == 1) && (r7priority == 0))
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = false;
                                    }
                                }
                                if (((ts7.TotalSeconds > 0) && (ts7.TotalSeconds <= dipdly)) || ((ts7_1.TotalSeconds > 0) && (ts7_1.TotalSeconds <= dipdly)))
                                {
                                    if (r7priority == 0)
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = true;
                                    }
                                    else if ((r8priority == 0) && (r7priority == 1))
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = false;
                                    }
                                }
                                if (((ts8.TotalSeconds > 0) && (ts8.TotalSeconds <= dipdly)) || ((ts8_1.TotalSeconds > 0) && (ts8_1.TotalSeconds <= dipdly)))
                                {
                                    if (r9priority == 0)
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = true;
                                    }
                                    else if ((r8priority == 0) && (r9priority == 1))
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p8protorun_flg = false;
                                    }
                                }
                            }
                        }
                        catch (Exception d3)
                        {
                            RequiredVariables.writeerrorlogfile("While checking priority tasks scheduling in p6proto check rack", "In Check_priority_times in Form_RunProto");
                        }
                        break;
                    }
                case 9:
                    {
                        try
                        {
                            if ((r2priority == 0) && (r3priority == 0) && (r4priority == 0) && (r5priority == 0) && (r1priority == 0) && (r7priority == 0) && (r8priority == 0) && (r6priority == 0))
                                p9protorun_flg = true;
                            else
                            {
                                //New code added on 27-11-2023 as checked for priority
                                ts1 = r9_incub.Subtract(r1_incub);
                                ts2 = r9_incub.Subtract(r2_incub);
                                ts3 = r9_incub.Subtract(r3_incub);
                                ts4 = r9_incub.Subtract(r4_incub);
                                ts5 = r9_incub.Subtract(r5_incub);
                                ts6 = r9_incub.Subtract(r6_incub);
                                ts7 = r9_incub.Subtract(r7_incub);
                                ts8 = r9_incub.Subtract(r8_incub);

                                ts1_1 = r1_incub.Subtract(r9_incub);
                                ts2_1 = r2_incub.Subtract(r9_incub);
                                ts3_1 = r3_incub.Subtract(r9_incub);
                                ts4_1 = r4_incub.Subtract(r9_incub);
                                ts5_1 = r5_incub.Subtract(r9_incub);
                                ts6_1 = r6_incub.Subtract(r9_incub);
                                ts7_1 = r7_incub.Subtract(r9_incub);
                                ts8_1 = r8_incub.Subtract(r9_incub);

                                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds <= dipdly)) || ((ts1_1.TotalSeconds > 0) && (ts1_1.TotalSeconds <= dipdly)))
                                {
                                    if (r1priority == 0)
                                    {
                                        r1_incub = r1_incub.AddSeconds(dipdly);
                                        tmr_r1_incub.Enabled = true;
                                        tmr_r1_incub.Interval = 1000;
                                        r1_taskcomp = r1_taskcomp.AddSeconds(dipdly);
                                        r1_incub_Woff = r1_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = true;
                                    }
                                    else if ((r9priority == 0) && (r1priority == 1))
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = false;
                                    }
                                }
                                if (((ts2.TotalSeconds > 0) && (ts2.TotalSeconds <= dipdly)) || ((ts2_1.TotalSeconds > 0) && (ts2_1.TotalSeconds <= dipdly)))
                                {
                                    if (r2priority == 0)
                                    {
                                        r2_incub = r2_incub.AddSeconds(dipdly);
                                        tmr_r2_incub.Enabled = true;
                                        tmr_r2_incub.Interval = 1000;
                                        r2_taskcomp = r2_taskcomp.AddSeconds(dipdly);
                                        r2_incub_Woff = r2_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = true;
                                    }
                                    else if ((r9priority == 0) && (r2priority == 1))
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = false;
                                    }
                                }
                                if (((ts3.TotalSeconds > 0) && (ts3.TotalSeconds <= dipdly)) || ((ts3_1.TotalSeconds > 0) && (ts3_1.TotalSeconds <= dipdly)))
                                {
                                    if (r3priority == 0)
                                    {
                                        r3_incub = r3_incub.AddSeconds(dipdly);
                                        tmr_r3_incub.Enabled = true;
                                        tmr_r3_incub.Interval = 1000;
                                        r3_taskcomp = r3_taskcomp.AddSeconds(dipdly);
                                        r3_incub_Woff = r3_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = true;
                                    }
                                    else if ((r3priority == 1) && (r9priority == 0))
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = false;
                                    }
                                }
                                if (((ts4.TotalSeconds > 0) && (ts4.TotalSeconds <= dipdly)) || ((ts4_1.TotalSeconds > 0) && (ts4_1.TotalSeconds <= dipdly)))
                                {
                                    if (r4priority == 0)
                                    {
                                        r4_incub = r4_incub.AddSeconds(dipdly);
                                        tmr_r4_incub.Enabled = true;
                                        tmr_r4_incub.Interval = 1000;
                                        r4_taskcomp = r4_taskcomp.AddSeconds(dipdly);
                                        r4_incub_Woff = r4_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = true;
                                    }
                                    else if ((r9priority == 0) && (r4priority == 1))
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = false;
                                    }
                                }
                                if (((ts5.TotalSeconds > 0) && (ts5.TotalSeconds <= dipdly)) || ((ts5_1.TotalSeconds > 0) && (ts5_1.TotalSeconds <= dipdly)))
                                {
                                    if (r5priority == 0)
                                    {
                                        r5_incub = r5_incub.AddSeconds(dipdly);
                                        tmr_r5_incub.Enabled = true;
                                        tmr_r5_incub.Interval = 1000;
                                        r5_taskcomp = r5_taskcomp.AddSeconds(dipdly);
                                        r5_incub_Woff = r5_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = true;
                                    }
                                    else if ((r9priority == 0) && (r5priority == 1))
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = false;
                                    }
                                }
                                if (((ts6.TotalSeconds > 0) && (ts6.TotalSeconds <= dipdly)) || ((ts6_1.TotalSeconds > 0) && (ts6_1.TotalSeconds <= dipdly)))
                                {
                                    if (r6priority == 0)
                                    {
                                        r6_incub = r6_incub.AddSeconds(dipdly);
                                        tmr_r6_incub.Enabled = true;
                                        tmr_r6_incub.Interval = 1000;
                                        r6_taskcomp = r6_taskcomp.AddSeconds(dipdly);
                                        r6_incub_Woff = r6_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = true;
                                    }
                                    else if ((r6priority == 1) && (r9priority == 0))
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = false;
                                    }
                                }
                                if (((ts7.TotalSeconds > 0) && (ts7.TotalSeconds <= dipdly)) || ((ts7_1.TotalSeconds > 0) && (ts7_1.TotalSeconds <= dipdly)))
                                {
                                    if (r7priority == 0)
                                    {
                                        r7_incub = r7_incub.AddSeconds(dipdly);
                                        tmr_r7_incub.Enabled = true;
                                        tmr_r7_incub.Interval = 1000;
                                        r7_taskcomp = r7_taskcomp.AddSeconds(dipdly);
                                        r7_incub_Woff = r7_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = true;
                                    }
                                    else if ((r8priority == 0) && (r7priority == 1))
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = false;
                                    }
                                }
                                if (((ts8.TotalSeconds > 0) && (ts8.TotalSeconds <= dipdly)) || ((ts8_1.TotalSeconds > 0) && (ts8_1.TotalSeconds <= dipdly)))
                                {
                                    if (r8priority == 0)
                                    {
                                        r8_incub = r8_incub.AddSeconds(dipdly);
                                        tmr_r8_incub.Enabled = true;
                                        tmr_r8_incub.Interval = 1000;
                                        r8_taskcomp = r8_taskcomp.AddSeconds(dipdly);
                                        r8_incub_Woff = r8_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = true;
                                    }
                                    else if ((r8priority == 0) && (r9priority == 1))
                                    {
                                        r9_incub = r9_incub.AddSeconds(dipdly);
                                        tmr_r9_incub.Enabled = true;
                                        tmr_r9_incub.Interval = 1000;
                                        r9_taskcomp = r9_taskcomp.AddSeconds(dipdly);
                                        r9_incub_Woff = r9_incub_Woff.AddSeconds(dipdly);
                                        p9protorun_flg = false;
                                    }
                                }
                            }
                        }
                        catch (Exception d3)
                        {
                            RequiredVariables.writeerrorlogfile("While checking priority tasks scheduling in p6proto check rack", "In Check_priority_times in Form_RunProto");
                        }
                        break;
                    }
            }

        }
        #endregion
        #region othertimers
        private void tmr_move_RA_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;
            if (d1 > move_RA_Time)
            {
                tmr_move_RA.Enabled = false;
                //check_And_MoveRA();
            }
        }
        string placedJar; int Rno;   //Declared on 12112024 1450
        private void check_And_MoveRA()
        {
            string[] RA1_Handeling_Jars = { "J13", "J12", "J11", "J10", "W3", "W2", "W1", "J9", "J14", "J15", "J16", "J17", "W4", "W5", "W6", "J18", "J33", "J32", "U1", "U2", "U3", "U4", "U5", "U6" };
            string[] RA2_Handeling_Jars = { "H1", "H2", "H3", "L1", "L2", "L3", "J1", "J2", "J3", "J4", "J5", "J6", "J7", "J8", "J19", "J20", "J21", "J22", "J23", "J24", "J25", "J26", "J27", "J28", "J29", "J30", "J31" };
            Boolean placedinRAhandling = false;
            int RANo = 0;
            string cmdstr = "";
            //Comparing the Jars placed and move accordingly
            for (int i = 0; i < RA1_Handeling_Jars.Length; i++)
            {
                if (placedJar == RA1_Handeling_Jars[i].ToString())
                {
                    placedinRAhandling = true;
                    RANo = 1;
                    break;
                }
            }

            for (int i = 0; i < RA2_Handeling_Jars.Length; i++)
            {
                if (placedJar == RA2_Handeling_Jars[i].ToString())
                {
                    placedinRAhandling = true;
                    RANo = 2;
                    break;
                }
            }

            if (RANo != Rno)
            {
                cmdstr = "";
                RA_Move_issued = true;
                if (Rno == 1)
                {
                    //Move RA1 to J13 position
                    //W1 position details 42974,800 ,0
                    Communication.RA_No = 1;
                    cmdstr = "64754,800 ,0";
                    //moveRA1tohome();
                }
                else if (Rno == 2)
                {
                    //Move RA2 to heater1 position
                    //J7 position details 32084,800 ,0
                    Communication.RA_No = 2;
                    cmdstr = "2688,800 ,0";
                    //moveRA2tohome();
                }
                RA_Move_issued = true;
                snd_rcvCmd(Communication.RA_MOVE, cmdstr);
                tmr_Cut.Enabled = true;
                tmr_Cut.Interval = 500;

            }

        }
        private void tmr_RespFail_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;
            if (Force_Stopped_WaterValve == true)
            {
                tmr_RespFail.Enabled = false;
            }
            if (d1 > device_resp_Check_time)
            {
                tmr_RespFail.Enabled = false;
                Communication.SequnceNo--;
                //Resend the same command again to device to get the details from device 
                snd_rcvCmd(sent_func_code, framed_Data);
            }
            else
            {
                if (pGotByteFlag == true)
                {
                    tmr_RespFail.Enabled = false;
                }
            }
        }

        private void tmr_Racks_Loaded_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
            TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
            TimeSpan ts7 = new TimeSpan(); TimeSpan ts8 = new TimeSpan(); TimeSpan ts9 = new TimeSpan();

            if ((d1 >= Nxt_Racks_Sensing_Time))
            {
                tmr_Racks_Loaded.Enabled = false;

                if (Nxt_Racks_Sensing_Time > r1_incub)
                    ts1 = Nxt_Racks_Sensing_Time.Subtract(r1_incub);
                else
                    ts1 = r1_incub.Subtract(Nxt_Racks_Sensing_Time);

                if (Nxt_Racks_Sensing_Time > r2_incub)
                    ts2 = Nxt_Racks_Sensing_Time.Subtract(r2_incub);
                else
                    ts2 = r2_incub.Subtract(Nxt_Racks_Sensing_Time);

                if (Nxt_Racks_Sensing_Time > r3_incub)
                    ts3 = Nxt_Racks_Sensing_Time.Subtract(r3_incub);
                else
                    ts3 = r3_incub.Subtract(Nxt_Racks_Sensing_Time);

                if (Nxt_Racks_Sensing_Time > r4_incub)
                    ts4 = Nxt_Racks_Sensing_Time.Subtract(r4_incub);
                else
                    ts4 = r4_incub.Subtract(Nxt_Racks_Sensing_Time);

                if (Nxt_Racks_Sensing_Time > r5_incub)
                    ts5 = Nxt_Racks_Sensing_Time.Subtract(r5_incub);
                else
                    ts5 = r5_incub.Subtract(Nxt_Racks_Sensing_Time);

                if (Nxt_Racks_Sensing_Time > r6_incub)
                    ts6 = Nxt_Racks_Sensing_Time.Subtract(r6_incub);
                else
                    ts6 = r6_incub.Subtract(Nxt_Racks_Sensing_Time);

                if (Nxt_Racks_Sensing_Time > r7_incub)
                    ts7 = Nxt_Racks_Sensing_Time.Subtract(r7_incub);
                else
                    ts7 = r7_incub.Subtract(Nxt_Racks_Sensing_Time);

                if (Nxt_Racks_Sensing_Time > r8_incub)
                    ts8 = Nxt_Racks_Sensing_Time.Subtract(r8_incub);
                else
                    ts8 = r8_incub.Subtract(Nxt_Racks_Sensing_Time);

                if (Nxt_Racks_Sensing_Time > r9_incub)
                    ts9 = Nxt_Racks_Sensing_Time.Subtract(r9_incub);
                else
                    ts9 = r9_incub.Subtract(Nxt_Racks_Sensing_Time);

                int delaytimeval = 36;

                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds < delaytimeval)) || ((ts2.TotalSeconds > 0) && (ts2.TotalSeconds < delaytimeval)) || ((ts3.TotalSeconds > 0) && (ts3.TotalSeconds < delaytimeval)) || ((ts4.TotalSeconds > 0) && (ts4.TotalSeconds < delaytimeval)) || ((ts5.TotalSeconds > 0) && (ts5.TotalSeconds < delaytimeval)) || ((ts6.TotalSeconds > 0) && (ts6.TotalSeconds < delaytimeval)) || ((ts7.TotalSeconds > 0) && (ts7.TotalSeconds < delaytimeval)) || ((ts8.TotalSeconds > 0) && (ts8.TotalSeconds < delaytimeval)) || ((ts9.TotalSeconds > 0) && (ts9.TotalSeconds < delaytimeval)))
                {
                    Nxt_Racks_Sensing_Time = Nxt_Racks_Sensing_Time.AddSeconds(delaytimeval);
                    tmr_Racks_Loaded.Enabled = true;
                    tmr_Racks_Loaded.Interval = 1000;
                    return;
                }
                recheck_Racks_Loaded = true;
                loadingjar_lvlintiated = true;
                Recheck_Rack_Sensing_Started = true;
                check_racks_using_lvlsence("L");
            }
        }

        private void tmr_update_Tick(object sender, EventArgs e)
        {
            tmr_update.Enabled = false;
            if (ProtoRunStatus.Rows.Count > 0)
            {
                saveDataTable("ProtocolRun"); //New function calling to save the data to server using bulk copy added on 18-12-2023
            }

        }
        private void tmr_nextrack_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;
            int delaytimeval = 0;
            TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
            TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
            TimeSpan ts7 = new TimeSpan(); TimeSpan ts8 = new TimeSpan(); TimeSpan ts9 = new TimeSpan();
            if (d1 >= nxtrackloading)
            {
                tmr_nextrack.Enabled = false;

                if (TempReadingStarted == true)
                {
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(18);
                    System.Threading.Thread.Sleep(200);
                }

                if (nxtrackloading > r1_incub)
                    ts1 = nxtrackloading.Subtract(r1_incub);
                else
                    ts1 = r1_incub.Subtract(nxtrackloading);

                if (nxtrackloading > r2_incub)
                    ts2 = nxtrackloading.Subtract(r2_incub);
                else
                    ts2 = r2_incub.Subtract(nxtrackloading);

                if (nxtrackloading > r3_incub)
                    ts3 = nxtrackloading.Subtract(r3_incub);
                else
                    ts3 = r3_incub.Subtract(nxtrackloading);

                if (nxtrackloading > r4_incub)
                    ts4 = nxtrackloading.Subtract(r4_incub);
                else
                    ts4 = r4_incub.Subtract(nxtrackloading);

                if (nxtrackloading > r5_incub)
                    ts5 = nxtrackloading.Subtract(r5_incub);
                else
                    ts5 = r5_incub.Subtract(nxtrackloading);

                if (nxtrackloading > r6_incub)
                    ts6 = nxtrackloading.Subtract(r6_incub);
                else
                    ts6 = r6_incub.Subtract(nxtrackloading);

                if (nxtrackloading > r7_incub)
                    ts7 = nxtrackloading.Subtract(r7_incub);
                else
                    ts7 = r7_incub.Subtract(nxtrackloading);

                if (nxtrackloading > r8_incub)
                    ts8 = nxtrackloading.Subtract(r8_incub);
                else
                    ts8 = r8_incub.Subtract(nxtrackloading);

                if (nxtrackloading > r9_incub)
                    ts9 = nxtrackloading.Subtract(r9_incub);
                else
                    ts9 = r9_incub.Subtract(nxtrackloading);

                if (heatingreqflg == true)
                    delaytimeval = 27;  //27 seconds as on 270120251845//Previously 45  before  //previously 63
                else if (heatingreqflg == false)
                {
                    ////delaytimeval = 27;
                    if (maxevttime >= 300)  //This statement added on 26-04-2024 after testing h & e app continously with device
                        delaytimeval = 27;    //Previously 45
                    else
                        delaytimeval = 18; //Working fine 45 Seconds   //27 Seconds
                }
                //// Below statement commented on 17-10-2024 in order to load next 3 racks to machine as we are getting more delay to load 7,8,9 racks
                ////if ((R1_protostart == true) && (R2_protostart == true) && (R3_protostart == true) && (R4_protostart == true) && (R5_protostart == true) && (R6_protostart == true))
                ////{
                ////    nxtrackloading = nxtrackloading.AddSeconds(delaytimeval);
                ////    tmr_nextrack.Enabled = true;
                ////    tmr_nextrack.Interval = 1000;
                ////    return;
                ////}
                //// Above statement commented on 17-10-2024 in order to load next 3 racks to machine

                //if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds < delaytimeval)) || ((ts2.TotalSeconds > 0) && (ts2.TotalSeconds < delaytimeval)) || ((ts3.TotalSeconds > 0) && (ts3.TotalSeconds < delaytimeval)))
                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds < delaytimeval)) || ((ts2.TotalSeconds > 0) && (ts2.TotalSeconds < delaytimeval)) || ((ts3.TotalSeconds > 0) && (ts3.TotalSeconds < delaytimeval)) || ((ts4.TotalSeconds > 0) && (ts4.TotalSeconds < delaytimeval)) || ((ts5.TotalSeconds > 0) && (ts5.TotalSeconds < delaytimeval)) || ((ts6.TotalSeconds > 0) && (ts6.TotalSeconds < delaytimeval)) || ((ts7.TotalSeconds > 0) && (ts7.TotalSeconds < delaytimeval)) || ((ts8.TotalSeconds > 0) && (ts8.TotalSeconds < delaytimeval)) || ((ts9.TotalSeconds > 0) && (ts9.TotalSeconds < delaytimeval)))
                {
                    nxtrackloading = nxtrackloading.AddSeconds(delaytimeval);
                    tmr_nextrack.Enabled = true;
                    tmr_nextrack.Interval = 1000;
                    return;
                }

                ////if ((ts1.TotalSeconds < 27) || (ts2.TotalSeconds < 27) || (ts3.TotalSeconds < 27))
                ////{
                ////    nxtrackloading = nxtrackloading.AddSeconds(27);
                ////    tmr_nextrack.Enabled = true;
                ////    tmr_nextrack.Interval = 1000;
                ////    return;
                ////}

                if (heatingreqflg == false)
                {
                    //if (rackinloading[0] == 1)
                    //{
                    //    if (continuetestflg == false)
                    //    {
                    //        r1inx = 0;
                    //        protocolinitiateflg_R1 = true;
                    //        protocolrun_R1();
                    //    }
                    //    else if (continuetestflg == true)
                    //    {
                    //        r4inx = 0;
                    //        protocolinitiateflg_R4 = true;
                    //        protocolrun_R4();
                    //    }
                    //}
                    //else if (rackinloading[1] == 1)
                    //{
                    //    if (continuetestflg == false)
                    //    {
                    //        r2inx = 0;
                    //        protocolinitiateflg_R2 = true;
                    //        protocolrun_R2();
                    //    }
                    //    else if (continuetestflg == true)
                    //    {
                    //        r5inx = 0;
                    //        protocolinitiateflg_R5 = true;
                    //        protocolrun_R5();
                    //    }
                    //}
                    //else if (rackinloading[2] == 1)
                    //{
                    //    if (continuetestflg == false)
                    //    {
                    //        r3inx = 0;
                    //        protocolinitiateflg_R3 = true;
                    //        protocolrun_R3();
                    //    }
                    //    else if (continuetestflg == true)
                    //    {
                    //        r6inx = 0;
                    //        protocolinitiateflg_R6 = true;
                    //        protocolrun_R6();
                    //    }
                    //}
                    if ((rackinloading[0] == 1) || (rackinloading[1] == 1) || (rackinloading[2] == 1))
                    { 
                        if (rackinloading[0] == 1)
                        {
                            if ((R1_protostart == false) && (r1inx == 0) && (protocolinitiateflg_R1 == false))
                            {
                                r1inx = 0;
                                protocolinitiateflg_R1 = true;
                                protocolStartedflg_R1 = false;
                                protocolrun_R1();
                            }
                            else if ((R4_protostart == false) && (r4inx == 0) && (protocolinitiateflg_R4 == false))
                            {
                                r4inx = 0;
                                protocolinitiateflg_R4 = true; protocolStartedflg_R4 = false;
                                protocolrun_R4();
                            }
                            else if ((R7_protostart == false) && (r7inx == 0) && (protocolinitiateflg_R7 == false))
                            {
                                r7inx = 0;
                                protocolinitiateflg_R7 = true; protocolStartedflg_R7 = false;
                                protocolrun_R7();
                            }
                        }
                        else if (rackinloading[1] == 1)
                        {
                            if ((R2_protostart == false) && (r2inx == 0) && (protocolinitiateflg_R2 == false))
                            {
                                r2inx = 0;
                                protocolinitiateflg_R2 = true; protocolStartedflg_R2 = false;
                                protocolrun_R2();
                            }
                            else if ((R5_protostart == false) && (r5inx == 0) && (protocolinitiateflg_R5 == false))
                            {
                                r5inx = 0;
                                protocolinitiateflg_R5 = true; protocolStartedflg_R5 = false;
                                protocolrun_R5();
                            }
                            else if ((R8_protostart == false) && (r8inx == 0) && (protocolinitiateflg_R8 == false))
                            {
                                r8inx = 0;
                                protocolinitiateflg_R8 = true; protocolStartedflg_R8 = false;
                                protocolrun_R8();
                            }
                        }
                        else if (rackinloading[2] == 1)
                        {
                            if ((R3_protostart == false) && (r3inx == 0) && (protocolinitiateflg_R3 == false))
                            {
                                r3inx = 0;
                                protocolinitiateflg_R3 = true; protocolStartedflg_R3 = false;
                                protocolrun_R3();
                            }
                            else if ((R6_protostart == false) && (r6inx == 0) && (protocolinitiateflg_R6 == false))
                            {
                                r6inx = 0;
                                protocolinitiateflg_R6 = true; protocolStartedflg_R6 = false;
                                protocolrun_R6();
                            }
                            else if ((R9_protostart == false) && (r9inx == 0) && (protocolinitiateflg_R9 == false))
                            {
                                r9inx = 0;
                                protocolinitiateflg_R9 = true; protocolStartedflg_R9 = false;
                                protocolrun_R9();
                            }
                        }
                    }
                    else if ((rackinloading[0] == 0) && (rackinloading[1] == 0) && (rackinloading[2] == 0))
                    {
                        /*Commented to test continuty 12112024_1832*/
                        btn_Continue.Enabled = true;
                        continuetask();  /*Added on 24112023 1821*/
                        /*Commented to test continuty 12112024_1832*/

                        ////continue_Home = true;
                        ////movetohome();
                    }
                }
                else if (heatingreqflg == true)
                {
                    if ((rackinloading[0] == 1) || (rackinloading[1] == 1) || (rackinloading[2] == 1))
                    {
                        open_htrdoor_toload_Nxtrack();
                    }
                    else if ((rackinloading[0] == 0) && (rackinloading[1] == 0) && (rackinloading[2] == 0))
                    {
                        ////continue_Home = true;  //Added for testing on 12112024_1831
                        ////movetohome();   //Added for testing on 12112024_1831

                        /*Commented to test continuty 12112024_1832*/
                        btn_Continue.Enabled = true;
                        continuetask();  /*Added on 24112023 1821*/
                        /*Commented to test continuty 12112024_1832*/
                    }
                    ////else if ((rackinheater[0] == 1) || (rackinheater[1] == 1) || (rackinheater[2] == 1))
                    ////    open_htrdoor();
                }
            }
            else
            {
                lbl_NxtRack.Text = "Next Rack Loading Elsptime-" + d1.ToString().Substring(10) + " Waiting Time-" + nxtrackloading.ToString().Substring(10);
            }
        }
        private void tmr_temp_Tick(object sender, EventArgs e)
        {
            Application.DoEvents();
            TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
            TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
            TimeSpan ts7 = new TimeSpan(); TimeSpan ts8 = new TimeSpan(); TimeSpan ts9 = new TimeSpan();

            TimeSpan ts1_1 = new TimeSpan(); TimeSpan ts2_1 = new TimeSpan(); TimeSpan ts3_1 = new TimeSpan();
            TimeSpan ts4_1 = new TimeSpan(); TimeSpan ts5_1 = new TimeSpan(); TimeSpan ts6_1 = new TimeSpan();
            TimeSpan ts7_1 = new TimeSpan(); TimeSpan ts8_1 = new TimeSpan(); TimeSpan ts9_1 = new TimeSpan();
            DateTime d7, d2, d3, d4, d5, d6, d8, d9, d10, dtmp;   //This was declared on 11-12-2023 
            dtmp = System.DateTime.Now;
            d7 = r1_incub.AddSeconds(-10);
            d2 = r2_incub.AddSeconds(-10);
            d3 = r3_incub.AddSeconds(-10);
            d4 = r4_incub.AddSeconds(-10);
            d5 = r5_incub.AddSeconds(-10);
            d6 = r6_incub.AddSeconds(-10);

            d8 = r7_incub.AddSeconds(-10);
            d9 = r8_incub.AddSeconds(-10);
            d10 = r9_incub.AddSeconds(-10);

            ts1 = dtmp.Subtract(d7); ts1_1 = d7.Subtract(dtmp);
            ts2 = dtmp.Subtract(d2); ts2_1 = d2.Subtract(dtmp);
            ts3 = dtmp.Subtract(d3); ts3_1 = d3.Subtract(dtmp);
            ts4 = dtmp.Subtract(d4); ts4_1 = d4.Subtract(dtmp);
            ts5 = dtmp.Subtract(d5); ts5_1 = d5.Subtract(dtmp);
            ts6 = dtmp.Subtract(d6); ts6_1 = d6.Subtract(dtmp);

            ts7 = dtmp.Subtract(d8); ts7_1 = d8.Subtract(dtmp);
            ts8 = dtmp.Subtract(d9); ts8_1 = d9.Subtract(dtmp);
            ts9 = dtmp.Subtract(d10); ts9_1 = d10.Subtract(dtmp);

            tmr_temp.Enabled = false;

            if ((R1_pickcmdissue == true) || (R2_pickcmdissue == true) || (R3_pickcmdissue == true) || (R4_pickcmdissue == true) || (R5_pickcmdissue == true) || (R6_pickcmdissue == true) || (R7_pickcmdissue == true) || (R8_pickcmdissue == true) || (R9_pickcmdissue == true) || (cmd_Exec_Comp == false) || (Recheck_Rack_Sensing_Started == true) || (htr_door_opencmd_toload_Nxtrack == true) || (htr_door_opencmd_intiate == true) || (htr_door_opencmd_continue_intiate == true))
            {
                temp_restartincub = System.DateTime.Now;
                temp_restartincub = temp_restartincub.AddSeconds(5);
                tmr_tempstart.Enabled = true;
                tmr_temp.Enabled = false;
                tmr_temp_incub.Enabled = false;
                return;
            }
            if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds <= 8)) || ((ts1_1.TotalSeconds > 0) && (ts1_1.TotalSeconds <= 8)) || ((ts2.TotalSeconds > 0) && (ts2.TotalSeconds <= 8)) || ((ts2_1.TotalSeconds > 0) && (ts2_1.TotalSeconds <= 8)) || ((ts3.TotalSeconds > 0) && (ts3.TotalSeconds <= 8)) || ((ts3_1.TotalSeconds > 0) && (ts3_1.TotalSeconds <= 8)) || ((ts4.TotalSeconds > 0) && (ts4.TotalSeconds <= 8)) || ((ts4_1.TotalSeconds > 0) && (ts4_1.TotalSeconds <= 8)) || ((ts5.TotalSeconds > 0) && (ts5.TotalSeconds <= 8)) || ((ts5_1.TotalSeconds > 0) && (ts5_1.TotalSeconds <= 8)) || ((ts6.TotalSeconds > 0) && (ts6.TotalSeconds <= 8)) || ((ts6_1.TotalSeconds > 0) && (ts6_1.TotalSeconds <= 8)) || ((ts7_1.TotalSeconds > 0) && (ts7_1.TotalSeconds <= 8)) || ((ts8_1.TotalSeconds > 0) && (ts8_1.TotalSeconds <= 8)) || ((ts9_1.TotalSeconds > 0) && (ts9_1.TotalSeconds <= 8)))
            {
                temp_restartincub = temp_restartincub.AddSeconds(18);
                tmr_tempstart.Enabled = true;
                tmr_temp.Enabled = false;
                tmr_temp_incub.Enabled = false;
                return;
            }
            //Above code has  to test


            if ((Readtmpintiated == true) && (TempRead == true))
            {
                Readtmpintiated = false;
                TempRead = false;
                if ((Temp_Attained == true) && (incubtime_Temp_start == false))
                {
                    incubtime_Temp_start = true;
                    ////TimeSpan d1 = new TimeSpan();
                    ////d1 = System.DateTime.Now.TimeOfDay;
                    ////d1 = d1.Add(TimeSpan.FromSeconds(incubtime_Temp));
                    //////incubationdelay_Temp(d1);
                    ////temp_incub = System.DateTime.Now;
                    ////temp_incub = temp_incub.AddSeconds(incubtime_Temp);
                    ////tmr_temp_incub.Enabled = true;
                    ////tmr_temp_incub.Interval = 5000;

                    /*Below code added on 07-01-2025 to switch off the water valves*/
                    valonflg = false;
                    valoffflg = true;
                    Intialize_Wash_Jars = true;
                    watervalveonpff("W1", 0);
                    temp_restartincub = temp_restartincub.AddSeconds(30);
                    tmr_tempstart.Enabled = true;
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                    /*Above code added on 07-01-2025 to switch off the water valves*/
                }
                else
                {
                    readtemperature();
                }
            }
        }
        private void tmr_temp_incub_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
            TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
            TimeSpan ts7 = new TimeSpan(); TimeSpan ts8 = new TimeSpan(); TimeSpan ts9 = new TimeSpan();

            if (d1 >= temp_incub)
            {
                lbl_disp2.Text = "";
                tmr_temp_incub.Enabled = false;
                if (temp_incub > r1_incub)
                    ts1 = temp_incub.Subtract(r1_incub);
                else
                    ts1 = r1_incub.Subtract(temp_incub);

                if (temp_incub > r2_incub)
                    ts2 = temp_incub.Subtract(r2_incub);
                else
                    ts2 = r2_incub.Subtract(temp_incub);

                if (temp_incub > r3_incub)
                    ts3 = temp_incub.Subtract(r3_incub);
                else
                    ts3 = r3_incub.Subtract(temp_incub);

                if (temp_incub > r4_incub)
                    ts4 = temp_incub.Subtract(r4_incub);
                else
                    ts4 = r4_incub.Subtract(temp_incub);

                if (temp_incub > r5_incub)
                    ts5 = temp_incub.Subtract(r5_incub);
                else
                    ts5 = r5_incub.Subtract(temp_incub);

                if (temp_incub > r6_incub)
                    ts6 = temp_incub.Subtract(r6_incub);
                else
                    ts6 = r6_incub.Subtract(temp_incub);

                if (temp_incub > r7_incub)
                    ts7 = temp_incub.Subtract(r7_incub);
                else
                    ts7 = r7_incub.Subtract(temp_incub);

                if (temp_incub > r8_incub)
                    ts8 = temp_incub.Subtract(r8_incub);
                else
                    ts8 = r8_incub.Subtract(temp_incub);

                if (temp_incub > r9_incub)
                    ts9 = temp_incub.Subtract(r9_incub);
                else
                    ts9 = r9_incub.Subtract(temp_incub);

                int delaytimeval = 27;

                if ((R1_pickcmdissue == true) || (R2_pickcmdissue == true) || (R3_pickcmdissue == true) || (R4_pickcmdissue == true) || (R5_pickcmdissue == true) || (R6_pickcmdissue == true) || (R7_pickcmdissue == true) || (R8_pickcmdissue == true) || (R9_pickcmdissue == true) || (Recheck_Rack_Sensing_Started == true))  // This If statement added after checking the comparision with protocol
                {
                    temp_incub = temp_incub.AddSeconds(delaytimeval);
                    tmr_temp_incub.Enabled = true;
                    tmr_temp_incub.Interval = 5000;
                    return;
                }

                //if ((ts1.TotalSeconds < delaytimeval) || (ts2.TotalSeconds < delaytimeval) || (ts3.TotalSeconds < delaytimeval))
                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds < delaytimeval)) || ((ts2.TotalSeconds > 0) && (ts2.TotalSeconds < delaytimeval)) || ((ts3.TotalSeconds > 0) && (ts3.TotalSeconds < delaytimeval)) || ((ts4.TotalSeconds > 0) && (ts4.TotalSeconds < delaytimeval)) || ((ts5.TotalSeconds > 0) && (ts5.TotalSeconds < delaytimeval)) || ((ts6.TotalSeconds > 0) && (ts6.TotalSeconds < delaytimeval)) || ((ts7.TotalSeconds > 0) && (ts7.TotalSeconds < delaytimeval)) || ((ts8.TotalSeconds > 0) && (ts8.TotalSeconds < delaytimeval)) || ((ts9.TotalSeconds > 0) && (ts9.TotalSeconds < delaytimeval)))
                {
                    temp_incub = temp_incub.AddSeconds(delaytimeval);
                    tmr_temp_incub.Enabled = true;
                    tmr_temp_incub.Interval = 5000;
                    return;
                }
                else
                {
                    ////r1inx = 0;  -- commented on 25112023 11:11
                    /* Below is old working code commented on 26-07-2024*/
                    Temp_Attained = false;
                    incubtime_Temp_start = false;
                    TempReadingStarted = false;
                    tmr_temp_incub.Enabled = false;
                    Force_Stopped_WaterValve = false;
                    stopheaters(); //Stopping Heaters
                    /* Above is old working code commented on 26-07-2024 */

                    ////Temp_Attained = true;  //Updated on 26-07-2024
                    ////TempReadingStarted = true; //Updated on 26-07-2024
                    ////open_htrdoor(); //opening heater doors //Updated on 26-07-2024
                    H1.TaskProcess = "";
                    H2.TaskProcess = "";
                    H3.TaskProcess = "";
                }
            }
            else
            {
                lbl_disp2.Text = "Heater Elasped time " + d1.ToString().Substring(10) + " Incubtime " + temp_incub.ToString().Substring(10);
                readtemperature();
                for (int i = 0; i < rackinheater.Length; i++)
                {
                    if (rackinheater[i] == 1)
                    {
                        if (i == 0)
                        {
                            updateheatertimings("H1", "R" + h1_cnt.ToString(), true, 1);
                        }
                        else if (i == 1)
                        {
                            updateheatertimings("H2", "R" + h2_cnt.ToString(), true, 2);
                        }
                        else if (i == 2)
                        {
                            updateheatertimings("H3", "R" + h3_cnt.ToString(), true, 3);
                        }
                    }
                }
            }
        }
        private void tmr_tempstart_Tick(object sender, EventArgs e)
        {
            DateTime d1 = System.DateTime.Now;

            if ((Settmpintiated == true) && (TempSet == true))
            {
                tmr_tempstart.Enabled = false;
                Settmpintiated = false;
                TempSet = false;
                if (Process_Continued == false)
                    disable_allflags();
                TempReadingStarted = true;
                //readtemperature();  /*This was commented on 14102024 1541 as feedback got by mukesh*/
                // New code added on 14102024 1540 as feedbcak got by mukesh                

                temp_restartincub = System.DateTime.Now;
                temp_restartincub = temp_restartincub.AddSeconds(5);
                tmr_tempstart.Enabled = true;
                tmr_tempstart.Interval = 1000;  //Added on 17102024 as feedback got from mukesh
                // New code added on 14102024 1540 as feedbcak got by mukesh
                return;
            }

            if ((d1 >= temp_restartincub) && (Settmpintiated == false) && (TempSet == false))
            {
                tmr_tempstart.Enabled = false;
                //if((recheck_Racks_Loaded==true) && (Racks_Reloadedto_Loadingjars==false))
                //{
                //    temp_restartincub = temp_restartincub.AddSeconds(10);
                //    tmr_tempstart.Enabled = true;
                //    tmr_tempstart.Interval = 1000;
                //    return;
                //}
                if ((R1_pickcmdissue == true) || (R2_pickcmdissue == true) || (R3_pickcmdissue == true) || (R4_pickcmdissue == true) || (R5_pickcmdissue == true) || (R6_pickcmdissue == true) || (R7_pickcmdissue == true) || (R8_pickcmdissue == true) || (R9_pickcmdissue == true) || (cmd_Exec_Comp == false) || (normaljar_lvlintiated = true) || (unloadJars_lvlintiated = true))//||(heaterjar_lvlintiated=true)
                {
                    temp_restartincub = temp_restartincub.AddSeconds(5);
                    tmr_tempstart.Enabled = true;
                    tmr_tempstart.Interval = 1000;
                    return;
                }
                else
                {
                    readtemperature();
                }
            }
        }
        private void tmr_Continue_Tick(object sender, EventArgs e)
        {
            int delaytimeval = 0;
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan(); TimeSpan ts2 = new TimeSpan(); TimeSpan ts3 = new TimeSpan();
            TimeSpan ts4 = new TimeSpan(); TimeSpan ts5 = new TimeSpan(); TimeSpan ts6 = new TimeSpan();
            TimeSpan ts7 = new TimeSpan(); TimeSpan ts8 = new TimeSpan(); TimeSpan ts9 = new TimeSpan();
            if (d1 >= continuetest)
            {
                tmr_Continue.Enabled = false;

                //if ((continuetestflg == false) && (R1_protostart == true)) /*below code Added on 27-12-2023 not enableing to take another rack from Loading Jar*/
                //{
                //    continuetest = continuetest.AddSeconds(60);
                //    tmr_Continue.Enabled = true;
                //    tmr_Continue.Interval = 1000;
                //    return;
                //}


                if (continuetest > r1_incub)
                    ts1 = continuetest.Subtract(r1_incub);
                else
                    ts1 = r1_incub.Subtract(continuetest);

                if (continuetest > r2_incub)
                    ts2 = continuetest.Subtract(r2_incub);
                else
                    ts2 = r2_incub.Subtract(continuetest);

                if (continuetest > r3_incub)
                    ts3 = continuetest.Subtract(r3_incub);
                else
                    ts3 = r3_incub.Subtract(continuetest);

                if (continuetest > r4_incub)
                    ts4 = continuetest.Subtract(r4_incub);
                else
                    ts4 = r4_incub.Subtract(continuetest);

                if (continuetest > r5_incub)
                    ts5 = continuetest.Subtract(r5_incub);
                else
                    ts5 = r5_incub.Subtract(continuetest);

                if (continuetest > r6_incub)
                    ts6 = continuetest.Subtract(r6_incub);
                else
                    ts6 = r6_incub.Subtract(continuetest);

                if (continuetest > r7_incub)
                    ts7 = continuetest.Subtract(r7_incub);
                else
                    ts7 = r7_incub.Subtract(continuetest);

                if (continuetest > r8_incub)
                    ts8 = continuetest.Subtract(r8_incub);
                else
                    ts8 = r8_incub.Subtract(continuetest);

                if (continuetest > r9_incub)
                    ts9 = continuetest.Subtract(r9_incub);
                else
                    ts9 = r9_incub.Subtract(continuetest);

                if (heatingreqflg == true)
                    delaytimeval = 27; //36 seconds as on 27012025_1848 //Actually given 63 seconds, Modified to 60 seconds, again modified to 45 seconds to reduce the next racks picking time
                else if (heatingreqflg == false)
                    delaytimeval = 27;

                if (((ts1.TotalSeconds > 0) && (ts1.TotalSeconds < delaytimeval)) || ((ts2.TotalSeconds > 0) && (ts2.TotalSeconds < delaytimeval)) || ((ts3.TotalSeconds > 0) && (ts3.TotalSeconds < delaytimeval)) || ((ts4.TotalSeconds > 0) && (ts4.TotalSeconds < delaytimeval)) || ((ts5.TotalSeconds > 0) && (ts5.TotalSeconds < delaytimeval)) || ((ts6.TotalSeconds > 0) && (ts6.TotalSeconds < delaytimeval)) || ((ts7.TotalSeconds > 0) && (ts7.TotalSeconds < delaytimeval)) || ((ts8.TotalSeconds > 0) && (ts8.TotalSeconds < delaytimeval)) || ((ts9.TotalSeconds > 0) && (ts9.TotalSeconds < delaytimeval)))
                {
                    continuetest = continuetest.AddSeconds(delaytimeval);
                    tmr_Continue.Enabled = true;
                    tmr_Continue.Interval = 1000;
                    return;
                }

                ulcnt = 0;
                btn_Continue.Enabled = false;
                unloadJars_lvlintiated = false;
                unloadjar_racksensed = false;
                heaterjar_racksensed = false;
                heaterjar_lvlintiated = false;
                loadingjar_lvlintiated = true;
                loadingjar_racksensed = false;
                normaljar_lvlintiated = false;
                normaljar_racksensed = false;
                lbl_disp2.Text = "";
                if (heatingreqflg == false)
                    check_racks_using_lvlsence("L");
                else
                {
                    open_htrdoor_continuemode();
                }
            }
            else
            {
                lbl_disp2.Text = "Waiting to Sense Loading Jar Please be Patience till " + continuetest.ToString().Substring(10) + " Elasping Time " + d1.ToString().Substring(10);
            }
        }
        private void tmr_Cut_Tick(object sender, EventArgs e)
        {
            if ((htr_on == true) && (htr_on_intiate == true))
            {
                tmr_Cut.Enabled = false;
                htr_on = false;
                htr_on_intiate = false;
                Heater_Switched_OnState = true;
                System.Threading.Thread.Sleep(300);
                ////if (Process_Continued == false)
                ////    disable_allflags();
                ////tstproto = false;
                ////settemperature();
                if (tstproto == true)
                {
                    /*Below code blocked to close the heater door and start the temperature rreading*/
                    ////valonflg = false;
                    ////valoffflg = true;
                    ////Intialize_Wash_Jars = true;
                    ////watervalveonpff("W1", 0);
                    ////TempReadingStarted = true;
                    ////temp_restartincub = System.DateTime.Now;
                    ////temp_restartincub = temp_restartincub.AddSeconds(10);
                    ////tmr_tempstart.Enabled = true;
                    ////tmr_tempstart.Interval = 1000;
                    /*Below code added on 07-0-2025*/
                    proto_htrclose_intiate = false;
                    close_htrdoor();
                }
            }
            if ((htr_door_close == true) && (htr_door_closecmd_intiate == true))
            {
                tmr_Cut.Enabled = false;
                htr_door_closecmd_intiate = false;
                htr_door_close = false;
                if (proto_htrclose_intiate == false)
                {
                    readtemperature();
                    ////if (Process_Continued == false)
                    ////    disable_allflags();
                    ////startheaters();
                }
                else if (proto_htrclose_intiate == true)
                {
                    rackloadingtoJar = false;
                    if (protocolinitiateflg_R1 == true)
                        protocolrun_R1();
                    else if (protocolinitiateflg_R2 == true)
                        protocolrun_R2();
                    else if (protocolinitiateflg_R3 == true)
                        protocolrun_R3();
                    else if (protocolinitiateflg_R4 == true)
                        protocolrun_R4();
                    else if (protocolinitiateflg_R5 == true)
                        protocolrun_R5();
                    else if (protocolinitiateflg_R6 == true)
                        protocolrun_R6();
                    else if (protocolinitiateflg_R7 == true)
                        protocolrun_R7();
                    else if (protocolinitiateflg_R8 == true)
                        protocolrun_R8();
                    else if (protocolinitiateflg_R9 == true)
                        protocolrun_R9();
                }
            }
            if ((Settmpintiated == true) && (TempSet == true) && (tstproto == false))
            {
                tmr_Cut.Enabled = false;
                Settmpintiated = false;
                TempSet = false;
                if (Process_Continued == false)
                    disable_allflags();
                ////TempReadingStarted = true;
                ////temp_restartincub = System.DateTime.Now;
                ////temp_restartincub = temp_restartincub.AddSeconds(10);
                ////tmr_tempstart.Enabled = true;
                ////tmr_tempstart.Interval = 1000;
                //After swithing ON heater and setting temperature opening water valves
                W1_On_State = false;
                valonflg = true;
                valoffflg = false;
                Intialize_Wash_Jars = true;
                watervalveonpff("W1", 1);
            }
            if ((Settmpintiated == true) && (TempSet == true) && (tstproto == true))
            {
                tmr_Cut.Enabled = false;
                Settmpintiated = false;
                TempSet = false;
                ////tstproto = false;
                ////if (Process_Continued == false)
                ////    disable_allflags();

                //After swithing ON heater and setting temperature opening water valves
                if (heatingreqflg == true)
                    startheaters();
            }
            #region WashJar Valve opening & Closing
            if ((Intialize_Wash_Jars == true))
            {
                if (W1_On_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W1_On_State = false;
                    valonflg = true;
                    watervalveonpff("W2", 1);
                }
                else if (W2_On_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W2_On_State = false;
                    valonflg = true;
                    watervalveonpff("W3", 1);
                }
                else if (W3_On_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W3_On_State = false;
                    valonflg = true;
                    watervalveonpff("W4", 1);
                }
                else if (W4_On_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W4_On_State = false;
                    valonflg = true;
                    watervalveonpff("W5", 1);
                }
                else if (W5_On_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W5_On_State = false;
                    valonflg = true;
                    watervalveonpff("W6", 1);
                }
                else if (W6_On_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W6_On_State = false;
                    Intialize_Wash_Jars = false;
                    //Update code to intialize the system
                    DeviceIntialize = true;
                    //call rackholding function
                    //ra_holding_racks();   //-- Temporarly commented for testing
                    intiateunloadjars();
                }
                else if (W1_Off_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W1_Off_State = false;
                    valoffflg = true;
                    watervalveonpff("W2", 0);
                }
                else if (W2_Off_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W2_Off_State = false;
                    valoffflg = true;
                    watervalveonpff("W3", 0);
                }
                else if (W3_Off_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W3_Off_State = false;
                    valoffflg = true;
                    watervalveonpff("W4", 0);
                }
                else if (W4_Off_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W4_Off_State = false;
                    valoffflg = true;
                    watervalveonpff("W5", 0);
                }
                else if (W5_Off_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W5_Off_State = false;
                    valoffflg = true;
                    watervalveonpff("W6", 0);
                }
                else if (W6_Off_State == true)
                {
                    tmr_Cut.Enabled = false;
                    W6_Off_State = false;
                    if (Force_Stopped_WaterValve == true)
                    {
                        Force_Stopped_WaterValve = false;
                        string str1 = "";
                        str1 = System.DateTime.Now.Millisecond.ToString();
                        for (int s = str1.Length; s < 3; s++)
                            str1 = "0" + str1;
                        string dtrstr = "";
                        dtrstr = DateTime.Now.ToString() + "." + str1;
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", dtrstr, monVal, "Protorun Stopped", 0, m_Runid); //This function added on 11-01-2024 to updated the protocol run stopped.
                    }
                    else
                    {   //Start intialize the protostart
                        tstproto = true;  //heatingreqflg  
                        only_homeissued = false;
                        Intialize_Wash_Jars = false;
                        move_to_home(0);//movetohome();
                        //Starting temperature reading
                        TempReadingStarted = true;
                        temp_restartincub = System.DateTime.Now;
                        temp_restartincub = temp_restartincub.AddSeconds(10);
                        tmr_tempstart.Enabled = true;
                        tmr_tempstart.Interval = 1000;
                    }
                }
            }
            #endregion

            //This has to check with device Added on 12-11-2024 1446
            if ((rareached == true) && (RA_Move_issued == true))
            {
                rareached = false;
                RA_Move_issued = false;
                tmr_Cut.Enabled = false;
            }
            //The above code has to check with device Added on 12-11-2024 1446

            //This has to check with device Added on 25-07-2024 1849
            if ((rareached == true) && (RA_Move_Intiate == true))
            {
                rareached = false;
                RA_Move_Intiate = false;
                RA_Move_issued = true;
                tmr_Cut.Enabled = false;
                R1_pickcmdissue = false;
                R2_pickcmdissue = false;
                R3_pickcmdissue = false;
                R4_pickcmdissue = false;
                R5_pickcmdissue = false;
                R6_pickcmdissue = false;
            }
            //The above code has to check with device Added on 25-07-2024 1849

            if ((door_status_close == true) && (door_status_intiate == true))
            {
                tmr_Cut.Enabled = false;
                door_status_close = false;
                door_status_intiate = false;
                ra_holding_racks();
            }
            if ((door_status_open == true) && (door_status_intiate == true))
            {
                tmr_Cut.Enabled = false;
                door_status_open = false;
                door_status_intiate = false;
                MessageBox.Show(" Loading & Unloading Jars Door is opened \r\n Please close the Loading & Unloading Jars Door to avoid danger", "H & E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            if ((ra_holdtstaus == true) && (ra_holdcmdsent == true))
            {
                tmr_Cut.Enabled = false;
                ra_holdtstaus = false;
                ra_holdcmdsent = false;
                MessageBox.Show("Please remove the Racks from Robotic Arms", "H & E Communication", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else if ((ra_holdtstaus == false) && (ra_holdcmdsent == true))
            {
                tmr_Cut.Enabled = false;
                ra_holdtstaus = false;
                ra_holdcmdsent = false;
                if (Process_Continued == false)
                    disable_allflags();
                intiateunloadjars();
            }

            #region Home Command Issue
            ////if ((Homecmdissued == true) && (RA1_Homecmdissued == true) && (RA_Move_issued == true))
            ////{
            ////    Homecmdissued = false;
            ////    RA1_Homecmdissued = false;
            ////    tmr_Cut.Enabled = false;
            ////    homecnt++;
            ////    if (homecnt < 2)
            ////    {
            ////        System.Threading.Thread.Sleep(2000);
            ////        moveRA1tohome();
            ////    }
            ////    else if (homecnt == 2)
            ////    {
            ////        RA_Move_issued = false;
            ////        System.Threading.Thread.Sleep(2000);
            ////        homecnt = 0;
            ////        ulcnt = 0;
            ////    }
            ////    //RA_Move_issued = false;
            ////    //System.Threading.Thread.Sleep(2000);
            ////    //homecnt = 0;
            ////    //ulcnt = 0;
            ////}
            ////if ((Homecmdissued == true) && (RA2_Homecmdissued == true) && (RA_Move_issued == true))
            ////{
            ////    Homecmdissued = false;
            ////    RA2_Homecmdissued = false;
            ////    tmr_Cut.Enabled = false;
            ////    homecnt++;
            ////    if (homecnt < 2)
            ////    {
            ////        System.Threading.Thread.Sleep(2000);
            ////        moveRA2tohome();
            ////    }
            ////    else if (homecnt == 2)
            ////    {
            ////        RA_Move_issued = false;
            ////        System.Threading.Thread.Sleep(2000);
            ////        homecnt = 0;
            ////        ulcnt = 0;
            ////    }
            ////    ////RA_Move_issued = false;
            ////    ////System.Threading.Thread.Sleep(2000);
            ////    ////homecnt = 0;
            ////    ////ulcnt = 0;
            ////}
            if ((Homecmdissued == true) && (only_homeissued == true))
            {
                Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(3000);
                    move_to_home(0);//movetohome();
                }
                else if (homecnt == 2)
                {
                    System.Threading.Thread.Sleep(2000);
                    homecnt = 0;
                    //check_UnloadingJars();
                    ulcnt = 0;
                    if (Process_Continued == false)
                        disable_allflags();
                }
            }
            if ((Homecmdissued == true) && (Both_Z_Homecmdissued == true) && (unloadJars_lvlintiated == false))
            {
                Homecmdissued = false;
                Both_Z_Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(1500);
                    move_to_home(3);//BothZaxistohome();
                }
                else if (homecnt == 2)
                {
                    Both_Z_ReachedHome = true;
                    System.Threading.Thread.Sleep(1500);
                    homecnt = 0;
                    ulcnt = 0;
                }
            }
            if ((Homecmdissued == true) && (unloadJars_lvlintiated == true) && (Both_Z_Homecmdissued == true))
            {
                Homecmdissued = false;
                Both_Z_Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                if (homecnt < 3)
                {
                    System.Threading.Thread.Sleep(2000);
                    Both_Z_Homecmdissued = true;
                    move_to_home(0);//movetohome();
                }
                else if (homecnt == 3)
                {
                    System.Threading.Thread.Sleep(2000);
                    homecnt = 0;
                    //check_UnloadingJars();
                    ulcnt = 0;
                    if (Process_Continued == false)
                        disable_allflags();
                    unloadJars_lvlintiated = true;
                    check_racks_using_lvlsence("U");
                }
            }
            if ((Homecmdissued == true) && (noracksin_loadingjars == true))
            {
                Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(2000);
                    move_to_home(0);//movetohome();
                }
                else if (homecnt == 2)
                {
                    noracksin_loadingjars = false;
                    System.Threading.Thread.Sleep(2000);
                    homecnt = 0;
                    ulcnt = 0;
                }
            }
            if ((Homecmdissued == true) && (unloadJars_lvlintiated == true))
            {
                Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(2000);
                    move_to_home(0);//movetohome();
                }
                else if (homecnt == 2)
                {
                    System.Threading.Thread.Sleep(2000);
                    homecnt = 0;
                    //check_UnloadingJars();
                    ulcnt = 0;
                    if (Process_Continued == false)
                        disable_allflags();
                    unloadJars_lvlintiated = true;
                    check_racks_using_lvlsence("U");
                }
            }
            if ((Homecmdissued == true) && (tstproto == true))
            {
                Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(2000);
                    move_to_home(0); //movetohome();
                }
                else if (homecnt == 2)
                {
                    System.Threading.Thread.Sleep(1000);
                    homecnt = 0;
                    ulcnt = 0;
                    if (Process_Continued == false)
                        disable_allflags();
                    if (heatingreqflg == true)
                    {
                        heaterjar_lvlintiated = true;
                        check_racks_using_lvlsence("H");
                    }
                    else if (heatingreqflg == false)
                    {
                        loadingjar_lvlintiated = true;
                        check_racks_using_lvlsence("L");
                    }
                }
            }

            if ((Homecmdissued == true) && (continue_Home == true))
            {
                Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(2000);
                    move_to_home(0); //movetohome();
                }
                else if (homecnt == 2)
                {
                    System.Threading.Thread.Sleep(1000);
                    continue_Home = false;
                    homecnt = 0;
                    ulcnt = 0;
                    btn_Continue.Enabled = true;
                    continuetask();
                }
            }

            if ((Homecmdissued == true) && (htrdoorintiate == true))
            {
                Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(5000);
                    move_to_home(0); //movetohome();
                }
                else if (homecnt == 2)
                {
                    System.Threading.Thread.Sleep(5000);
                    homecnt = 0;
                    //check_UnloadingJars();
                    if (Process_Continued == false)
                        disable_allflags();
                    ulcnt = 0;
                    htrdoorintiate = false;
                    proto_htrclose_intiate = false;
                    close_htrdoor();
                }
            }
            //Below code updated on 05-12-2023 1448 after discussion with Bhasker for levelsensing
            if ((Homecmdissued == true) && (normaljar_racksensed == true))
            {
                Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(5000);
                    move_to_home(6);// BothYZaxistohome();
                }
                else if (homecnt == 2)
                {
                    System.Threading.Thread.Sleep(5000);

                    //Normal Jars
                    if (Process_Continued == false)
                        disable_allflags();
                    homecnt = 0;
                    ulcnt = 0;
                    normaljar_racksensed = false;
                    HtrRacks_ULJars = false;
                    NMRacks_ULJars = true;
                    inxSlno = 0;
                    Jarloaddetails = false;
                    LoadRacksfrom_NormalJars_toUnloadJars();
                }
            }
            if ((Homecmdissued == true) && (heaterjar_racksensed == true))
            {
                Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(3000);
                    move_to_home(6);//BothYZaxistohome();
                }
                else if (homecnt == 2)
                {
                    System.Threading.Thread.Sleep(3000);
                    if (Process_Continued == false)
                        disable_allflags();
                    homecnt = 0;
                    ulcnt = 0;
                    heaterjar_racksensed = false;
                    HtrRacks_ULJars = true;
                    NMRacks_ULJars = false;
                    inxSlno = 0;
                    Jarloaddetails = false;
                    LoadRacksfrom_HeaterJars_toUnloadJars();
                }
            }
            //Below if added on 22-12-2023 1521
            if ((gethomeissued_flg == true) && (gethomestatus_flg == true) && (loadingjar_lvlintiated == true) && (loadingjar_racksensed == true))
            {
                gethomeissued_flg = false;
                gethomestatus_flg = false;
                SetText(homestatusval);
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(1000);
                    //BothYZaxistohome();
                    move_to_home(0); //movetohome();
                }
            }
            //Above if added on 22-12-2023 1521
            if ((Homecmdissued == true) && (loadingjar_lvlintiated == true) && (loadingjar_racksensed == true))
            {
                Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                //Add code to get the home status of 8 motors
                //////if(homecnt<2)gethome_status();
                //New code has to added to get the home status
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(2000);
                    move_to_home(0); //movetohome();
                }
                if (homecnt == 2)
                {
                    System.Threading.Thread.Sleep(2000);
                    if (Process_Continued == false)
                        disable_allflags();
                    homecnt = 0;
                    ulcnt = 0;
                    loadingjar_lvlintiated = false;
                    loadingjar_racksensed = false;
                    sensed = false;
                    HtrRacks_ULJars = false;
                    inxSlno = 0;
                    loading_racks = true;
                    Jarloaddetails = false;
                    rackloadingtoJar = false;
                    /*
                    if (heatingreqflg == true)
                        LoadRackstoHeaterJars();
                    else if (heatingreqflg == false)
                    {
                        if (rackinloading[0] == 1)
                        {
                            if (continuetestflg == false)
                            {
                                if (R1_protostart == false)
                                {
                                    r1inx = 0;
                                    protocolinitiateflg_R1 = true;
                                    protocolrun_R1();
                                }
                                else if (R1_protostart == true) ///*below code Added on 27-12-2023 not enableing to take another rack from Loading Jar
                                {                                    
                                    r7inx = 0;
                                    protocolinitiateflg_R7 = true;
                                    protocolrun_R7();

                                }
                            }
                            else if (continuetestflg == true)
                            {
                                r4inx = 0;
                                protocolinitiateflg_R4 = true;
                                protocolrun_R4();
                            }
                        }
                        else if (rackinloading[1] == 1)
                        {
                            if (continuetestflg == false)
                            {
                                if (R2_protostart == false)
                                {
                                    r2inx = 0;
                                    protocolinitiateflg_R2 = true;
                                    protocolrun_R2();
                                }
                                else if (R2_protostart == true) //*below code Added on 27-12-2023 not enableing to take another rack from Loading Jar
                                {                                    
                                    r8inx = 0;
                                    protocolinitiateflg_R8 = true;
                                    protocolrun_R8();
                                }
                            }
                            else if (continuetestflg == true)
                            {
                                r5inx = 0;
                                protocolinitiateflg_R5 = true;
                                protocolrun_R5();
                            }
                        }
                        else if (rackinloading[2] == 1)
                        {
                            if (continuetestflg == false)
                            {
                                if (R3_protostart == false)
                                {
                                    r3inx = 0;
                                    protocolinitiateflg_R3 = true;
                                    protocolrun_R3();
                                }
                                else if (R3_protostart == true) //*below code Added on 27-12-2023 not enableing to take another rack from Loading Jar
                                {                                   
                                    r9inx = 0;
                                    protocolinitiateflg_R9 = true;
                                    protocolrun_R9();
                                }
                            }
                            else if (continuetestflg == true)
                            {
                                r6inx = 0;
                                protocolinitiateflg_R6 = true;
                                protocolrun_R6();
                            }
                        }
                    }*/
                    if (rackinloading[0] == 1)
                    {
                        if ((R1_protostart == false))
                        {
                            r1inx = 0;
                            protocolinitiateflg_R1 = true;
                            protocolrun_R1();
                        }
                        else if ((R4_protostart == false))
                        {
                            r4inx = 0;
                            protocolinitiateflg_R4 = true;
                            protocolrun_R4();
                        }
                        else if ((R7_protostart == false))
                        {
                            r7inx = 0;
                            protocolinitiateflg_R7 = true;
                            protocolrun_R7();
                        }
                    }
                    else if (rackinloading[1] == 1)
                    {
                        if ((R2_protostart == false))
                        {
                            r2inx = 0;
                            protocolinitiateflg_R2 = true;
                            protocolrun_R2();
                        }
                        else if ((R5_protostart == false))
                        {
                            r5inx = 0;
                            protocolinitiateflg_R5 = true;
                            protocolrun_R5();
                        }
                        else if ((R8_protostart == false))
                        {
                            r8inx = 0;
                            protocolinitiateflg_R8 = true;
                            protocolrun_R8();
                        }
                    }
                    else if (rackinloading[2] == 1)
                    {
                        if ((R3_protostart == false))
                        {
                            r3inx = 0;
                            protocolinitiateflg_R3 = true;
                            protocolrun_R3();
                        }
                        else if ((R6_protostart == false))
                        {
                            r6inx = 0;
                            protocolinitiateflg_R6 = true;
                            protocolrun_R6();
                        }
                        else if ((R9_protostart == false))
                        {
                            r9inx = 0;
                            protocolinitiateflg_R9 = true;
                            protocolrun_R9();
                        }
                    }
                }
            }
            //Above code updated on 05-12-2023 1448 after discussion with Bhasker for levelsensing
            //Below code added on 08-11-2024 1622
            if ((Homecmdissued == true) && (Both_Z_Homecmdissued == true) && (loadingjar_lvlintiated == true) && (loadingjar_racksensed == true))
            {
                Both_Z_Homecmdissued = false;
                Homecmdissued = false;
                tmr_Cut.Enabled = false;
                homecnt++;
                //Add code to get the home status of 8 motors
                //////if(homecnt<2)gethome_status();
                //New code has to added to get the home status
                if (homecnt < 2)
                {
                    System.Threading.Thread.Sleep(2000);
                    Both_Z_Homecmdissued = true;
                    move_to_home(0); //movetohome();
                }
                if (homecnt == 2)
                {
                    System.Threading.Thread.Sleep(2000);
                    if (Process_Continued == false)
                        disable_allflags();
                    homecnt = 0;
                    ulcnt = 0;
                    loadingjar_lvlintiated = false;
                    loadingjar_racksensed = false;
                    sensed = false;
                    HtrRacks_ULJars = false;
                    inxSlno = 0;
                    loading_racks = false;
                    Jarloaddetails = false;
                    rackloadingtoJar = false;
                    recheck_Racks_Loaded = false;
                    Racks_Reloadedto_Loadingjars = true;
                }
            }
            //Above code added on 08-11-2024 1622

            #endregion

            #region Heater On/Off
            if ((htr_off == true) && (htr_off_intiate == true) && (Force_Stopped_WaterValve == true))
            {
                tmr_Cut.Enabled = false;
                htr_off = false;
                htr_off_intiate = false;
                System.Threading.Thread.Sleep(300);
                Intialize_Wash_Jars = true;
                valoffflg = true;
                watervalveonpff("W1", 0);
            }
            if ((htr_off == true) && (htr_off_intiate == true) && (Force_Stopped_WaterValve == false))
            {
                tmr_Cut.Enabled = false;
                htr_off = false;
                htr_off_intiate = false;
                Heater_Switched_OnState = false;
                System.Threading.Thread.Sleep(300);
                if (Process_Continued == false)
                    disable_allflags();
                open_htrdoor(); //opening heater doors
            }
            if ((htr_door_open == true) && (htr_door_opencmd_intiate == true))
            {
                tmr_Cut.Enabled = false;
                htr_door_opencmd_intiate = false;
                htr_door_open = false;
                //New code updated on 15-01-2025 1833
                if ((R1_protostart == true) && (r1inx == 1) && (((H1_incub_complete == true) && (JarName_R1 == "H1")) || ((H2_incub_complete == true) && (JarName_R1 == "H2")) || ((H3_incub_complete == true) && (JarName_R1 == "H3"))))
                {
                    protocolinitiateflg_R1 = true;
                    protocolrun_R1();
                }
                else if ((R2_protostart == true) && (r2inx == 1) && (((H1_incub_complete == true) && (JarName_R2 == "H1")) || ((H2_incub_complete == true) && (JarName_R2 == "H2")) || ((H3_incub_complete == true) && (JarName_R2 == "H3"))))
                {
                    protocolinitiateflg_R2 = true;
                    protocolrun_R2();
                }
                else if ((R3_protostart == true) && (r3inx == 1) && (((H1_incub_complete == true) && (JarName_R3 == "H1")) || ((H2_incub_complete == true) && (JarName_R3 == "H2")) || ((H3_incub_complete == true) && (JarName_R3 == "H3"))))
                {
                    protocolinitiateflg_R3 = true;
                    protocolrun_R3();
                }
                else if ((R4_protostart == true) && (r4inx == 1) && (((H1_incub_complete == true) && (JarName_R4 == "H1")) || ((H2_incub_complete == true) && (JarName_R4 == "H2")) || ((H3_incub_complete == true) && (JarName_R4 == "H3"))))
                {
                    protocolinitiateflg_R4 = true;
                    protocolrun_R4();
                }
                else if ((R5_protostart == true) && (r5inx == 1) && (((H1_incub_complete == true) && (JarName_R5 == "H1")) || ((H2_incub_complete == true) && (JarName_R5 == "H2")) || ((H3_incub_complete == true) && (JarName_R5 == "H3"))))
                {
                    protocolinitiateflg_R5 = true;
                    protocolrun_R5();
                }
                else if ((R6_protostart == true) && (r6inx == 1) && (((H1_incub_complete == true) && (JarName_R6 == "H1")) || ((H2_incub_complete == true) && (JarName_R6 == "H2")) || ((H3_incub_complete == true) && (JarName_R6 == "H3"))))
                {
                    protocolinitiateflg_R6 = true;
                    protocolrun_R6();
                }
                else if ((R7_protostart == true) && (r7inx == 1) && (((H1_incub_complete == true) && (JarName_R7 == "H1")) || ((H2_incub_complete == true) && (JarName_R7 == "H2")) || ((H3_incub_complete == true) && (JarName_R7 == "H3"))))
                {
                    protocolinitiateflg_R7 = true;
                    protocolrun_R7();
                }
                else if ((R8_protostart == true) && (r8inx == 1) && (((H1_incub_complete == true) && (JarName_R8 == "H1")) || ((H2_incub_complete == true) && (JarName_R8 == "H2")) || ((H3_incub_complete == true) && (JarName_R8 == "H3"))))
                {
                    protocolinitiateflg_R8 = true;
                    protocolrun_R8();
                }
                else if ((R9_protostart == true) && (r9inx == 1) && (((H1_incub_complete == true) && (JarName_R9 == "H1")) || ((H2_incub_complete == true) && (JarName_R9 == "H2")) || ((H3_incub_complete == true) && (JarName_R9 == "H3"))))
                {
                    protocolinitiateflg_R9 = true;
                    protocolrun_R9();
                }
                //Below code commented on 15-01-2025 1833
                //Checking racks available in heater jars and then starting the protocol
                ////for (int i = 0; i < rackinheater.Length; i++)
                ////{
                ////    if (rackinheater[i] == 1)
                ////    {
                ////        rackloadingtoJar = false;
                ////        ////if ((protocolinitiateflg_R1 == false) && (protocolinitiateflg_R2 == false) && (protocolinitiateflg_R3 == false) && (protocolinitiateflg_R4 == false) && (protocolinitiateflg_R5 == false) && (protocolinitiateflg_R6 == false) && (protocolinitiateflg_R7 == false) && (protocolinitiateflg_R8 == false) && (protocolinitiateflg_R9 == false))
                ////        ////    disable_allflags();
                ////        if ((i == 0) && (Rackin_H1 == false))
                ////        {
                ////            if (continuetestflg == false)
                ////            {
                ////                if ((R1_protostart == true) && (r1inx == 1))
                ////                {
                ////                    //R1_cnt = h1_cnt;
                ////                    //r1inx = 0;
                ////                    protocolinitiateflg_R1 = true;
                ////                    protocolrun_R1();
                ////                }
                ////                else if ((R7_protostart == true) && (r7inx == 1))
                ////                {
                ////                    //R7_cnt = h1_cnt;
                ////                    //r7inx = 0;
                ////                    protocolinitiateflg_R7 = true;
                ////                    protocolrun_R7();
                ////                }
                ////            }
                ////            else if (continuetestflg == true)
                ////            {
                ////                //R4_cnt = h1_cnt;
                ////                //r4inx = 0;
                ////                if ((R4_protostart == true) && (r4inx == 1))
                ////                {
                ////                    protocolinitiateflg_R4 = true;
                ////                    protocolrun_R4();
                ////                }
                ////            }
                ////        }
                ////        else if (i == 1)
                ////        {
                ////            if (continuetestflg == false)
                ////            {
                ////                if ((R2_protostart == true) && (r2inx == 1))
                ////                {
                ////                    //R2_cnt = h2_cnt;
                ////                    //r2inx = 0;
                ////                    protocolinitiateflg_R2 = true;
                ////                    protocolrun_R2();
                ////                }
                ////                else if ((R8_protostart == true) && (r8inx == 1))
                ////                {
                ////                    //R8_cnt = h2_cnt;
                ////                    //r8inx = 0;
                ////                    protocolinitiateflg_R8 = true;
                ////                    protocolrun_R8();
                ////                }
                ////            }
                ////            else if (continuetestflg == true)
                ////            {
                ////                //R5_cnt = h2_cnt;
                ////                //r5inx = 0;
                ////                if ((R5_protostart == true) && (r5inx == 1))
                ////                {
                ////                    protocolinitiateflg_R5 = true;
                ////                    protocolrun_R5();
                ////                }
                ////            }
                ////        }
                ////        else if (i == 2)
                ////        {
                ////            if (continuetestflg == false)
                ////            {
                ////                if ((R3_protostart == true) && (r3inx == 1))
                ////                {
                ////                    //R3_cnt = h3_cnt;
                ////                    //r3inx = 0;
                ////                    protocolinitiateflg_R3 = true;
                ////                    protocolrun_R3();
                ////                }
                ////                else if ((R9_protostart == true) && (r9inx == 1))
                ////                {
                ////                    //R9_cnt = h3_cnt;
                ////                    //r9inx = 0;
                ////                    protocolinitiateflg_R9 = true;
                ////                    protocolrun_R9();
                ////                }
                ////            }
                ////            else if (continuetestflg == true)
                ////            {
                ////                //R6_cnt = h3_cnt;
                ////                //r6inx = 0;
                ////                if ((R6_protostart == true) && (r6inx == 1))
                ////                {
                ////                    protocolinitiateflg_R6 = true;
                ////                    protocolrun_R6();
                ////                }
                ////            }
                ////        }
                ////        break;
                ////    }
                ////}
            }
            if ((htr_door_open == true) && (htr_door_opencmd_continue_intiate == true))
            {
                tmr_Cut.Enabled = false;
                htr_door_opencmd_continue_intiate = false;
                htr_door_open = false;
                check_racks_using_lvlsence("L");  //Previously we used this function directorly.
                //Below if else statement added to reduce the time to load the racks and get the better through put code added on 09-11-2024
                ////if (Racks_Reloadedto_Loadingjars==true)  //This Statement added on 09112024 1319 inorder to load already sensed racks to heater jars
                ////{
                ////    recheck_Racks_Loaded = false;
                ////    Racks_Reloadedto_Loadingjars = false;
                ////    homecnt = 0;
                ////    ulcnt = 0;
                ////    loadingjar_lvlintiated = false;
                ////    loadingjar_racksensed = false;
                ////    sensed = false;
                ////    HtrRacks_ULJars = false;
                ////    inxSlno = 0;
                ////    loading_racks = true;
                ////    Jarloaddetails = false;
                ////    rackloadingtoJar = false;
                ////    LoadRackstoHeaterJars();
                ////}
                ////else
                ////{
                ////    check_racks_using_lvlsence("L"); 
                ////}
                //Above Statement added on 09112024 1319 inorder to load already sensed racks to heater jars
            }


            ////if ((Settmpintiated == true) && (TempSet == true) && (Intialize_Wash_Jars==false))
            ////{
            ////    tmr_Cut.Enabled = false;
            ////    Settmpintiated = false;
            ////    TempSet = false;
            ////    if (Process_Continued == false)
            ////        disable_allflags();
            ////    TempReadingStarted = true;
            ////    //readtemperature();  /*This was commented on 14102024 1541 as feedback got by mukesh*/
            ////    // New code added on 14102024 1540 as feedbcak got by mukesh                 

            ////    temp_restartincub = System.DateTime.Now;
            ////    temp_restartincub = temp_restartincub.AddSeconds(5);
            ////    tmr_tempstart.Enabled = true;
            ////    tmr_tempstart.Interval = 1000;  //Added on 17102024 as feedback got from mukesh
            ////    // New code added on 14102024 1540 as feedbcak got by mukesh
            ////}           
            #endregion
            if (rareached == true)
            {
                rareached = false;
                tmr_Cut.Enabled = false;
                if ((sensed == true) && (unloadJars_lvlintiated == true) && (heaterjar_lvlintiated == false) && (loadingjar_lvlintiated == false) && (normaljar_lvlintiated == false))
                {
                    check_racks_using_lvlsence("U");
                }
                else if ((sensed == true) && (heaterjar_lvlintiated == true) && (unloadJars_lvlintiated == false) && (loadingjar_lvlintiated == false) && (normaljar_lvlintiated == false))
                {
                    check_racks_using_lvlsence("H");
                }
                else if ((sensed == true) && (heaterjar_lvlintiated == false) && (unloadJars_lvlintiated == false) && (loadingjar_lvlintiated == true) && (normaljar_lvlintiated == false))
                {
                    check_racks_using_lvlsence("L");
                }
                else if ((sensed == true) && (heaterjar_lvlintiated == false) && (unloadJars_lvlintiated == false) && (loadingjar_lvlintiated == false) && (normaljar_lvlintiated == true))
                {
                    check_racks_using_lvlsence("N");
                }
                else
                {
                    if ((topickupflg == false) && (toplaceflg == false))
                    {
                        //SetText("RA Reached Jar " + inxSlno.ToString() + " Position");
                        SetText("RA Reached " + JarName + " Position");
                    }
                    else if (topickupflg == true)
                    {
                        //SetText("RA Picked the Rack from" + inxSlno.ToString() +" Jar");
                        SetText("RA Picked the Rack from Jar " + JarName);
                        topickupflg = false;
                        pickedflg = true;
                        if ((loading_racks == true) && (protocolinitiateflg == false) && (HtrRacks_ULJars == false) && (NMRacks_ULJars == false))
                            LoadRackstoHeaterJars();
                        else if ((HtrRacks_ULJars == true) && (loading_racks == false) && (protocolinitiateflg == false) && (NMRacks_ULJars == false))
                            LoadRacksfrom_HeaterJars_toUnloadJars();
                        else if ((HtrRacks_ULJars == false) && (loading_racks == false) && (protocolinitiateflg == false) && (NMRacks_ULJars == true))
                            LoadRacksfrom_NormalJars_toUnloadJars();
                    }
                    else if (toplaceflg == true)
                    {
                        //SetText("RA Placed the Rack in" + inxSlno.ToString() + " Jar");
                        SetText("RA Placed the Rack in Jar " + JarName);
                        toplaceflg = false;
                        placedflg = true;
                        TimeSpan d1 = new TimeSpan();
                        if ((HtrRacks_ULJars == true) && (loading_racks == false) && (NMRacks_ULJars == false))
                        {
                            LoadRacksfrom_HeaterJars_toUnloadJars();
                        }
                        else if ((HtrRacks_ULJars == false) && (loading_racks == true) && (NMRacks_ULJars == false))
                        {
                            rackloadingtoJar = false;
                            LoadRackstoHeaterJars();
                        }
                        else if ((HtrRacks_ULJars == false) && (loading_racks == false) && (NMRacks_ULJars == true))
                        {
                            LoadRacksfrom_NormalJars_toUnloadJars();
                        }
                    }
                }
            }
        }

        private void tmr_refresh_Tick(object sender, EventArgs e)
        {
            load_detailstoZoomPanel(tmrrefjarno);
        }
        private void tmr_portstatus_Tick(object sender, EventArgs e)
        {
            try
            {
                Application.DoEvents();
                if (Communication.portopened == false)
                {
                    //Below code commented on 17-04-2024 1029
                    if (mport.IsOpen)
                        mport.Close();
                    init_port();
                    ////cmd_Exec_Comp = true;
                }
                else
                {
                    if (!mport.IsOpen)
                        mport.Open();
                }
            }
            catch (Exception d3)
            {
                Communication.writeCommunicationErrorlog(" After communication fail retrying to establish communicatio with device  in tmr_portstatus function in Form_RunProto form");
            }
            finally
            {
                tmr_portstatus.Enabled = false;
                //if (!mport.IsOpen)
                //    mport.Open();
            }
        }
        private void tmr_opencmd_toload_Nxtrack_Tick(object sender, EventArgs e)
        {
            try
            {
                if ((htr_door_open == true) && (htr_door_opencmd_toload_Nxtrack == true))
                {
                    tmr_opencmd_toload_Nxtrack.Enabled = false;
                    htr_door_opencmd_toload_Nxtrack = false;
                    htr_door_open = false;
                    if (rackinloading[0] == 1)
                    {
                        if ((R1_protostart == false) && (r1inx == 0) && (protocolinitiateflg_R1 == false))
                        {
                            r1inx = 0;
                            protocolinitiateflg_R1 = true;
                            protocolStartedflg_R1 = false;
                            protocolrun_R1();
                        }                        
                        else if ((R4_protostart == false) && (r4inx == 0) && (protocolinitiateflg_R4 == false))
                        {
                            r4inx = 0;
                            protocolinitiateflg_R4 = true; protocolStartedflg_R4 = false;
                            protocolrun_R4();
                        }                        
                        else if ((R7_protostart == false) && (r7inx == 0) && (protocolinitiateflg_R7 == false))
                        {
                            r7inx = 0;
                            protocolinitiateflg_R7 = true; protocolStartedflg_R7 = false;
                            protocolrun_R7();
                        }
                    }
                    else if (rackinloading[1] == 1)
                    {
                        if ((R2_protostart == false) && (r2inx == 0) && (protocolinitiateflg_R2 == false))
                        {
                            r2inx = 0;
                            protocolinitiateflg_R2 = true; protocolStartedflg_R2 = false;
                            protocolrun_R2();
                        }                        
                        else if ((R5_protostart == false) && (r5inx == 0) && (protocolinitiateflg_R5 == false))
                        {
                            r5inx = 0;
                            protocolinitiateflg_R5 = true; protocolStartedflg_R5 = false;
                            protocolrun_R5();
                        }                        
                        else if ((R8_protostart == false) && (r8inx == 0) && (protocolinitiateflg_R8 == false))
                        {
                            r8inx = 0;
                            protocolinitiateflg_R8 = true; protocolStartedflg_R8 = false;
                            protocolrun_R8();
                        }                        
                    }
                    else if (rackinloading[2] == 1)
                    {
                        if ((R3_protostart == false) && (r3inx == 0) && (protocolinitiateflg_R3 == false))
                        {
                            r3inx = 0;
                            protocolinitiateflg_R3 = true; protocolStartedflg_R3 = false;
                            protocolrun_R3();
                        }                        
                        else if ((R6_protostart == false) && (r6inx == 0) && (protocolinitiateflg_R6 == false))
                        {
                            r6inx = 0;
                            protocolinitiateflg_R6 = true; protocolStartedflg_R6 = false;
                            protocolrun_R6();
                        }                                                
                        else if ((R9_protostart == false) && (r9inx == 0) && (protocolinitiateflg_R9 == false))
                        {
                            r9inx = 0;
                            protocolinitiateflg_R9 = true; protocolStartedflg_R9 = false;
                            protocolrun_R9();
                        }
                    }                    
                }
            }
            catch (Exception d3)
            {

            }
        }

        #endregion
        #region Prototimers
        int Overlaptime = 0; //declared on 26-11-2024 1728
        private void tmr_r1_Tick(object sender, EventArgs e)
        {
            try
            {
                Application.DoEvents();
                int jno = 0;
                if ((htr_door_close == true) && (htr_door_closecmd_intiate == true))
                {
                    tmr_r1.Enabled = false;
                    htr_door_closecmd_intiate = false;
                    htr_door_close = false;
                    if ((proto_htrclose_intiate == true) && (protocolinitiateflg_R1 == true))
                    {
                        protocolrun_R1();
                    }
                }
                if (rareached == true)
                {
                    rareached = false;
                    tmr_r1.Enabled = false;

                    if ((topickupflg_R1 == false) && (toplaceflg_R1 == false) && (todipflg_R1 == false))
                    {
                        //SetText("RA Reached Jar " + inxSlno.ToString() + " Position");
                        SetText("RA Reached to " + JarName_R1 + " With Rack " + R1_cnt.ToString());
                    }
                    else if ((todipflg_R1 == true))  //&& (rack_dip == true)
                    {
                        SetText("RA Dipped the Rack " + R1_cnt.ToString() + " in Jar " + JarName_R1);
                        todipflg_R1 = false;
                        rack_dip = false;
                        dippedflg_R1 = true;
                        r1priority = 0;
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R1, JarName_R1, "R" + R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Completed", 0f, m_Runid);
                        if (protocolinitiateflg_R1 == true)
                            protocolrun_R1();
                    }
                    //else if ((todipflg_R1 == true) && (rack_dip_start == true))
                    //{
                    //    SetText("Rack " + R1_cnt.ToString() + " Dipping Started in Jar " + JarName_R1);
                    //    rack_dip_start = false;
                    //    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R1, JarName_R1, "R" + R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Started", 0f, m_Runid);                        
                    //}
                    else if (topickupflg_R1 == true)
                    {
                        //SetText("RA Picked the Rack from" + inxSlno.ToString() +" Jar");
                        SetText("RA Picked the Rack " + R1_cnt.ToString() + " from Jar " + JarName_R1);
                        topickupflg_R1 = false;
                        pickedflg_R1 = true;
                        r1priority = 1;
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R1, JarName_R1, "R" + R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Picked From", 0f, m_Runid);
                        update_jardetails_runtime(JarName_R1, "R" + R1_cnt.ToString(), true, false, r1_taskcomp.ToString().Substring(11));
                        jno = Convert.ToInt32(JarName_R1.Substring(1));
                        if (JarName_R1.Contains("J"))
                            rackinjars[jno - 1] = 0;
                        else if (JarName_R1.Contains("W"))
                            rackinwaterjars[jno - 1] = 0;
                        else if (JarName_R1.Contains("L"))
                            rackinloading[jno - 1] = 0;
                        else if (JarName_R1.Contains("H"))
                            rackinheater[jno - 1] = 0;
                        if (JarName_R1 == "H1") { H1.TaskProcess = ""; Rackin_H1 = false; }
                        else if (JarName_R1 == "H2") { H2.TaskProcess = ""; Rackin_H2 = false; }
                        else if (JarName_R1 == "H3") { H3.TaskProcess = ""; Rackin_H3 = false; }

                        if (protocolinitiateflg_R1 == true)
                            protocolrun_R1();
                    }
                    else if (toplaceflg_R1 == true)
                    {
                        //SetText("RA Placed the Rack in" + inxSlno.ToString() + " Jar");
                        SetText("RA Placed the Rack " + R1_cnt.ToString() + " in Jar " + JarName_R1);
                        toplaceflg_R1 = false;
                        placedflg_R1 = true;
                        R1_pickcmdissue = false;
                        if (incubtime_R1 > 30)
                            r1priority = 0;
                        else
                            r1priority = 1;

                        update_jardetails_runtime(JarName_R1, "R" + R1_cnt.ToString(), false, true, r1_taskcomp.ToString().Substring(11));
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R1, JarName_R1, "R" + R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Placed In", 0f, m_Runid);
                        jno = Convert.ToInt32(JarName_R1.Substring(1));
                        if (JarName_R1.Contains("J"))
                            rackinjars[jno - 1] = 1;
                        else if (JarName_R1.Contains("W"))
                            rackinwaterjars[jno - 1] = 1;
                        else if (JarName_R1.Contains("H"))
                        {
                            rackinheater[jno - 1] = 1;
                            //Below code updated on 08-01-2025
                            if (JarName_R1 == "H1") { Rackin_H1 = true; H1_incub_complete = false; }
                            else if (JarName_R1 == "H2") { Rackin_H2 = true; H2_incub_complete = false; }
                            else if (JarName_R1 == "H3") { Rackin_H3 = true; H3_incub_complete = false; }
                        }

                        //////code added on 17-11-2023 for Robotic arm status
                        ////if (RA1_Busystate == true)
                        ////    RA1_Busystate = false;
                        ////if (RA2_Busystate == true)
                        ////    RA2_Busystate = false;

                        ////TimeSpan d1 = new TimeSpan();
                        ////d1 = System.DateTime.Now.TimeOfDay;
                        ////d1 = d1.Add(TimeSpan.FromSeconds(incubtime_R1));
                        ////incubationdelay_R1(d1);  Temporarly disable for testing
                        r1_incub = System.DateTime.Now;
                        r1_incub = r1_incub.AddSeconds(incubtime_R1);
                        tmr_r1_incub.Enabled = true;
                        tmr_r1_incub.Interval = 1000;

                        /////*Added to check both arms usage*/
                        ////placedJar = JarName_R1;  Rno = R1_RNo;
                        ////move_RA_Time = System.DateTime.Now;
                        ////move_RA_Time.AddSeconds(2);
                        ////tmr_move_RA.Enabled = true;
                        ////tmr_move_RA.Interval = 500;
                        /////*Added to check both arms usage*/

                        r1_incub_WOn = System.DateTime.Now;
                        if (incubtime_R1 > 18)
                            r1_incub_WOn = r1_incub_WOn.AddSeconds(incubtime_R1 - 18);
                        else
                            r1_incub_WOn = r1_incub_WOn.AddSeconds(incubtime_R1);

                        r1_incub_Woff = System.DateTime.Now;
                        r1_incub_Woff = r1_incub_Woff.AddSeconds(18);

                        r1_priorChk = System.DateTime.Now;
                        r1_priorChk = r1_priorChk.AddSeconds(incubtime_R1 - 5);
                        //Code Updated on 20122023 1304
                        if ((water_valves_on_off_state[0] == 1) && (JarName_R1 == "W1") && (W1_On_State == false))
                            W1_On_State = true;
                        else if ((water_valves_on_off_state[1] == 1) && (JarName_R1 == "W2") && (W2_On_State == false))
                            W2_On_State = true;
                        else if ((water_valves_on_off_state[2] == 1) && (JarName_R1 == "W3") && (W3_On_State == false))
                            W3_On_State = true;
                        else if ((water_valves_on_off_state[3] == 1) && (JarName_R1 == "W4") && (W4_On_State == false))
                            W4_On_State = true;
                        else if ((water_valves_on_off_state[4] == 1) && (JarName_R1 == "W5") && (W5_On_State == false))
                            W5_On_State = true;
                        else if ((water_valves_on_off_state[5] == 1) && (JarName_R1 == "W6") && (W6_On_State == false))
                            W6_On_State = true;
                        //Code Updated on 20122023 1304

                        if (r1inx == 1)
                        {
                            if ((rackinloading[1] == 1) || (rackinloading[2] == 1))   //Temporarly commented on 24112023 1557
                            {
                                if (heatingreqflg == true)
                                {
                                    htrdoorintiate = false;
                                    proto_htrclose_intiate = false;
                                    close_htrdoor();
                                    temp_incub = System.DateTime.Now.AddSeconds(incubtime_R1);
                                    if (incubtime_R1 > nxtracktime)
                                        Overlaptime = incubtime_R1 - nxtracktime;
                                    else if (incubtime_R1 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R1;
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }
                                else
                                {
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                tmr_nextrack.Enabled = true;
                                tmr_nextrack.Interval = 1000;
                            }
                            else if ((rackinloading[1] == 0) && (rackinloading[2] == 0))   //Temporarly commented on 24112023 1557
                            {
                                tmr_nextrack.Enabled = true;
                                nxtrackloading = System.DateTime.Now;
                                if (heatingreqflg == true)
                                {
                                    //nxtrackloading = nxtrackloading.AddSeconds(63);
                                    if (incubtime_R1 > nxtracktime)
                                        Overlaptime = incubtime_R1 - nxtracktime;
                                    else if (incubtime_R1 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R1;
                                    Overlaptime = Overlaptime;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }
                                else
                                {
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                tmr_nextrack.Interval = 1000;
                            }
                            else
                            {
                                tmr_nextrack.Enabled = false;
                            }
                        }
                    }
                    else if ((pickedflg_R1 == true) && (r1inx == 1) && proto_htrclose_intiate == true)
                    {
                        if (protocolinitiateflg_R1 == true)
                            protocolrun_R1();
                    }
                }
            }
            catch (Exception d3)
            {
                Communication.writeCommunicationErrorlog(d3.ToString());
            }
        }
        private void tmr_r2_Tick(object sender, EventArgs e)
        {
            try
            {
                Application.DoEvents();
                int jno = 0;
                if ((htr_door_close == true) && (htr_door_closecmd_intiate == true))
                {
                    tmr_r2.Enabled = false;
                    htr_door_closecmd_intiate = false;
                    htr_door_close = false;
                    if ((proto_htrclose_intiate == true) && (protocolinitiateflg_R2 == true))
                    {
                        protocolrun_R2();
                    }
                }
                if (rareached == true)
                {
                    rareached = false;
                    tmr_r2.Enabled = false;

                    if ((topickupflg_R2 == false) && (toplaceflg_R2 == false) && (todipflg_R2 == false))
                    {
                        //SetText("RA Reached Jar " + inxSlno.ToString() + " Position");
                        SetText("RA Reached to " + JarName_R2 + " With Rack " + R2_cnt.ToString());
                    }
                    else if ((todipflg_R2 == true)) //&& (rack_dip == true)
                    {
                        SetText("RA Dipped the Rack " + R2_cnt.ToString() + " in Jar " + JarName_R2);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R2, JarName_R2, "R" + R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Completed", 0f, m_Runid);
                        todipflg_R2 = false;
                        rack_dip = false;
                        dippedflg_R2 = true;
                        r2priority = 0;
                        if (protocolinitiateflg_R2 == true)
                            protocolrun_R2();
                    }
                    //else if ((todipflg_R2 == true) && (rack_dip_start == true))
                    //{
                    //    SetText("Rack " + R2_cnt.ToString() + " Dipping Started in Jar " + JarName_R2);
                    //    rack_dip_start = false;
                    //    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R2, JarName_R2, "R" + R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Started", 0f, m_Runid);
                    //}
                    else if (topickupflg_R2 == true)
                    {
                        //SetText("RA Picked the Rack from" + inxSlno.ToString() +" Jar");
                        SetText("RA Picked the Rack " + R2_cnt.ToString() + " from Jar " + JarName_R2);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R2, JarName_R2, "R" + R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Picked From", 0f, m_Runid);
                        topickupflg_R2 = false;
                        pickedflg_R2 = true;
                        r2priority = 1;
                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R2.Substring(1));
                        if (JarName_R2.Contains("J"))
                            rackinjars[jno - 1] = 0;
                        else if (JarName_R2.Contains("W"))
                            rackinwaterjars[jno - 1] = 0;
                        else if (JarName_R2.Contains("L"))
                            rackinloading[jno - 1] = 0;
                        else if (JarName_R2.Contains("H"))
                            rackinheater[jno - 1] = 0;
                        if (JarName_R2 == "H1") { H1.TaskProcess = ""; Rackin_H1 = false; }
                        else if (JarName_R2 == "H2") { H2.TaskProcess = ""; Rackin_H2 = false; }
                        else if (JarName_R2 == "H3") { H3.TaskProcess = ""; Rackin_H3 = false; }
                        /*Added on 20-12-2023 1621*/
                        update_jardetails_runtime(JarName_R2, "R" + R2_cnt.ToString(), true, false, r2_taskcomp.ToString().Substring(11));
                        if (protocolinitiateflg_R2 == true)
                            protocolrun_R2();
                    }
                    else if (toplaceflg_R2 == true)
                    {
                        //SetText("RA Placed the Rack in" + inxSlno.ToString() + " Jar");
                        SetText("RA Placed the Rack " + R2_cnt.ToString() + " in Jar " + JarName_R2);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R2, JarName_R2, "R" + R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Placed In", 0f, m_Runid);
                        toplaceflg_R2 = false;
                        placedflg_R2 = true;
                        R2_pickcmdissue = false;  //Added on 19-12-2023 1231 to operate water valves
                        if (incubtime_R2 > 30)
                            r2priority = 0;
                        else
                            r2priority = 1;

                        update_jardetails_runtime(JarName_R2, "R" + R2_cnt.ToString(), false, true, r2_taskcomp.ToString().Substring(11));

                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R2.Substring(1));
                        if (JarName_R2.Contains("J"))
                            rackinjars[jno - 1] = 1;
                        else if (JarName_R2.Contains("W"))
                            rackinwaterjars[jno - 1] = 1;
                        else if (JarName_R2.Contains("H"))
                        {
                            rackinheater[jno - 1] = 1;
                            //Below code updated on 08-01-2025
                            if (JarName_R2 == "H1") { Rackin_H1 = true; H1_incub_complete = false; }
                            else if (JarName_R2 == "H2") { Rackin_H2 = true; H2_incub_complete = false; }
                            else if (JarName_R2 == "H3") { Rackin_H3 = true; H3_incub_complete = false; }
                        }

                        /*Added on 20-12-2023 1621*/

                        ////TimeSpan d1 = new TimeSpan();
                        ////d1 = System.DateTime.Now.TimeOfDay;
                        ////d1 = d1.Add(TimeSpan.FromSeconds(incubtime_R2));
                        ////incubationdelay_R1(d1);  Temporarly disable for testing

                        //////code added on 17-11-2023 for Robotic arm status
                        ////if (RA1_Busystate == true)
                        ////    RA1_Busystate = false;
                        ////if (RA2_Busystate == true)
                        ////    RA2_Busystate = false;

                        r2_incub = System.DateTime.Now;
                        r2_incub = r2_incub.AddSeconds(incubtime_R2);
                        tmr_r2_incub.Enabled = true;
                        tmr_r2_incub.Interval = 1000;
                        /////*Added to check both arms usage*/
                        ////placedJar = JarName_R2; Rno = R2_RNo;
                        ////move_RA_Time = System.DateTime.Now;
                        ////move_RA_Time.AddSeconds(2);
                        ////tmr_move_RA.Enabled = true;
                        ////tmr_move_RA.Interval = 500;
                        /////*Added to check both arms usage*/
                        r2_incub_WOn = System.DateTime.Now;
                        if (incubtime_R2 > 18)
                            r2_incub_WOn = r2_incub_WOn.AddSeconds(incubtime_R2 - 18);
                        else
                            r2_incub_WOn = r2_incub_WOn.AddSeconds(incubtime_R2);

                        r2_incub_Woff = System.DateTime.Now;
                        r2_incub_Woff = r2_incub_Woff.AddSeconds(18);

                        r2_priorChk = System.DateTime.Now;
                        r2_priorChk = r2_priorChk.AddSeconds(incubtime_R2 - 5);

                        //Code Updated on 20122023 1304
                        if ((water_valves_on_off_state[0] == 1) && (JarName_R2 == "W1") && (W1_On_State == false))
                            W1_On_State = true;
                        else if ((water_valves_on_off_state[1] == 1) && (JarName_R2 == "W2") && (W2_On_State == false))
                            W2_On_State = true;
                        else if ((water_valves_on_off_state[2] == 1) && (JarName_R2 == "W3") && (W3_On_State == false))
                            W3_On_State = true;
                        else if ((water_valves_on_off_state[3] == 1) && (JarName_R2 == "W4") && (W4_On_State == false))
                            W4_On_State = true;
                        else if ((water_valves_on_off_state[4] == 1) && (JarName_R2 == "W5") && (W5_On_State == false))
                            W5_On_State = true;
                        else if ((water_valves_on_off_state[5] == 1) && (JarName_R2 == "W6") && (W6_On_State == false))
                            W6_On_State = true;
                        //Code Updated on 20122023 1304

                        if (r2inx == 1)
                        {
                            if ((rackinloading[2] == 1))   //Temporarly commented on 24112023 1557
                            {
                                if (heatingreqflg == true)
                                {
                                    htrdoorintiate = false;
                                    proto_htrclose_intiate = false;
                                    close_htrdoor();
                                    if (incubtime_R2 > nxtracktime)
                                        Overlaptime = incubtime_R2 - nxtracktime;
                                    else if (incubtime_R2 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R2;
                                    ////Overlaptime = Overlaptime + 120 ;//Adding 2minites to pick 3rd rack from loading Jar
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }
                                else
                                {
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                tmr_nextrack.Enabled = true;
                                tmr_nextrack.Interval = 1000;
                            }
                            else if ((rackinloading[2] == 0))   //Temporarly commented on 24112023 1557
                            {
                                tmr_nextrack.Enabled = true;
                                nxtrackloading = System.DateTime.Now;
                                if (heatingreqflg == false)
                                {
                                    //nxtrackloading = nxtrackloading.AddSeconds(63);
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                else
                                {
                                    if (incubtime_R2 > nxtracktime)
                                        Overlaptime = incubtime_R2 - nxtracktime;
                                    else if (incubtime_R2 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R2;
                                    //Overlaptime = Overlaptime + 120;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }

                                tmr_nextrack.Interval = 1000;
                            }
                            else
                            {
                                tmr_nextrack.Enabled = false;
                            }
                        }

                    }
                    else if ((pickedflg_R2 == true) && (r2inx == 1) && proto_htrclose_intiate == true)
                    {
                        if (protocolinitiateflg_R2 == true)
                            protocolrun_R2();
                    }
                }
            }
            catch (Exception d3)
            {
                Communication.writeCommunicationErrorlog(d3.ToString());
            }
        }
        private void tmr_r3_Tick(object sender, EventArgs e)
        {
            try
            {
                Application.DoEvents();
                int jno = 0;
                if ((htr_door_close == true) && (htr_door_closecmd_intiate == true))
                {
                    tmr_r3.Enabled = false;
                    htr_door_closecmd_intiate = false;
                    htr_door_close = false;
                    if ((proto_htrclose_intiate == true) && (protocolinitiateflg_R3 == true))
                    {
                        protocolrun_R3();
                    }
                }
                if (rareached == true)
                {
                    rareached = false;
                    tmr_r3.Enabled = false;
                    if ((topickupflg_R3 == false) && (toplaceflg_R3 == false) && (todipflg_R3 == false))
                    {
                        //SetText("RA Reached Jar " + inxSlno.ToString() + " Position");
                        SetText("RA Reached to " + JarName_R3 + " With Rack " + R3_cnt.ToString());
                    }
                    else if ((todipflg_R3 == true)) // && (rack_dip == true)
                    {
                        SetText("RA Dipped the Rack " + R3_cnt.ToString() + " in Jar " + JarName_R3);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R3, JarName_R3, "R" + R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Completed", 0f, m_Runid);
                        todipflg_R3 = false;
                        rack_dip = false;
                        dippedflg_R3 = true;
                        r3priority = 0;
                        if (protocolinitiateflg_R3 == true)
                            protocolrun_R3();
                    }
                    else if (topickupflg_R3 == true)
                    {
                        //SetText("RA Picked the Rack from" + inxSlno.ToString() +" Jar");
                        SetText("RA Picked the Rack " + R3_cnt.ToString() + " from Jar " + JarName_R3);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R3, JarName_R3, "R" + R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Picked From", 0f, m_Runid);
                        topickupflg_R3 = false;
                        pickedflg_R3 = true;
                        r3priority = 1;
                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R3.Substring(1));
                        if (JarName_R3.Contains("J"))
                            rackinjars[jno - 1] = 0;
                        else if (JarName_R3.Contains("W"))
                            rackinwaterjars[jno - 1] = 0;
                        else if (JarName_R3.Contains("L"))
                            rackinloading[jno - 1] = 0;
                        else if (JarName_R3.Contains("H"))
                            rackinheater[jno - 1] = 0;
                        if (JarName_R3 == "H1") { H1.TaskProcess = ""; Rackin_H1 = false; }
                        else if (JarName_R3 == "H2") { H2.TaskProcess = ""; Rackin_H2 = false; }
                        else if (JarName_R3 == "H3") { H3.TaskProcess = ""; Rackin_H3 = false; }
                        update_jardetails_runtime(JarName_R3, "R" + R3_cnt.ToString(), true, false, r3_taskcomp.ToString().Substring(11));
                        /*Added on 20-12-2023 1621*/
                        if (protocolinitiateflg_R3 == true)
                            protocolrun_R3();
                    }
                    else if (toplaceflg_R3 == true)
                    {
                        //SetText("RA Placed the Rack in" + inxSlno.ToString() + " Jar");
                        SetText("RA Placed the Rack " + R3_cnt.ToString() + " in Jar " + JarName_R3);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R3, JarName_R3, "R" + R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Placed In", 0f, m_Runid);
                        toplaceflg_R3 = false;
                        placedflg_R3 = true;
                        R3_pickcmdissue = false;  //Added on 19-12-2023 1231 to operate water valves
                        if (incubtime_R3 > 30)
                            r3priority = 0;
                        else
                            r3priority = 1;
                        update_jardetails_runtime(JarName_R3, "R" + R3_cnt.ToString(), false, true, r3_taskcomp.ToString().Substring(11));
                        //////code added on 17-11-2023 for Robotic arm status
                        ////if (RA1_Busystate == true)
                        ////    RA1_Busystate = false;
                        ////if (RA2_Busystate == true)
                        ////    RA2_Busystate = false;

                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R3.Substring(1));
                        if (JarName_R3.Contains("J"))
                            rackinjars[jno - 1] = 1;
                        else if (JarName_R3.Contains("W"))
                            rackinwaterjars[jno - 1] = 1;
                        else if (JarName_R3.Contains("H"))
                        {
                            rackinheater[jno - 1] = 1;
                            //Below code updated on 08-01-2025
                            if (JarName_R3 == "H1") { Rackin_H1 = true; H1_incub_complete = false; }
                            else if (JarName_R3 == "H2") { Rackin_H2 = true; H2_incub_complete = false; }
                            else if (JarName_R3 == "H3") { Rackin_H3 = true; H3_incub_complete = false; }
                        }
                        /*Added on 20-12-2023 1621*/

                        ////TimeSpan d1 = new TimeSpan();
                        ////d1 = System.DateTime.Now.TimeOfDay;
                        ////d1 = d1.Add(TimeSpan.FromSeconds(incubtime_R3));
                        ////incubationdelay_R1(d1);  Temporarly disable for testing
                        r3_incub = System.DateTime.Now;
                        r3_incub = r3_incub.AddSeconds(incubtime_R3);
                        tmr_r3_incub.Enabled = true;
                        tmr_r3_incub.Interval = 1000;
                        /////*Added to check both arms usage*/
                        ////placedJar = JarName_R3; Rno = R3_RNo;
                        ////move_RA_Time = System.DateTime.Now;
                        ////move_RA_Time.AddSeconds(2);
                        ////tmr_move_RA.Enabled = true;
                        ////tmr_move_RA.Interval = 500;
                        /////*Added to check both arms usage*/
                        r3_incub_WOn = System.DateTime.Now;
                        if (incubtime_R3 > 18)
                            r3_incub_WOn = r3_incub_WOn.AddSeconds(incubtime_R3 - 18);
                        else
                            r3_incub_WOn = r3_incub_WOn.AddSeconds(incubtime_R3);

                        r3_incub_Woff = System.DateTime.Now;
                        r3_incub_Woff = r3_incub_Woff.AddSeconds(18);

                        r3_priorChk = System.DateTime.Now;
                        r3_priorChk = r3_priorChk.AddSeconds(incubtime_R3 - 5);

                        //Code Updated on 20122023 1304
                        if ((water_valves_on_off_state[0] == 1) && (JarName_R3 == "W1") && (W1_On_State == false))
                            W1_On_State = true;
                        else if ((water_valves_on_off_state[1] == 1) && (JarName_R3 == "W2") && (W2_On_State == false))
                            W2_On_State = true;
                        else if ((water_valves_on_off_state[2] == 1) && (JarName_R3 == "W3") && (W3_On_State == false))
                            W3_On_State = true;
                        else if ((water_valves_on_off_state[3] == 1) && (JarName_R3 == "W4") && (W4_On_State == false))
                            W4_On_State = true;
                        else if ((water_valves_on_off_state[4] == 1) && (JarName_R3 == "W5") && (W5_On_State == false))
                            W5_On_State = true;
                        else if ((water_valves_on_off_state[5] == 1) && (JarName_R3 == "W6") && (W6_On_State == false))
                            W6_On_State = true;
                        //Code Updated on 20122023 1304

                        if (r3inx == 1)
                        {
                            tmr_nextrack.Enabled = true;
                            nxtrackloading = System.DateTime.Now;
                            if (heatingreqflg == false)
                            {
                                nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                            }
                            else
                            {
                                //nxtrackloading = nxtrackloading.AddSeconds(63);
                                htrdoorintiate = false;
                                proto_htrclose_intiate = false;
                                close_htrdoor();
                                if (incubtime_R3 > nxtracktime)
                                    Overlaptime = incubtime_R3 - nxtracktime;
                                else if (incubtime_R3 < nxtracktime)
                                    Overlaptime = nxtracktime - incubtime_R3;
                                //Overlaptime = Overlaptime + 120;
                                nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                            }
                            tmr_nextrack.Interval = 1000;
                        }
                    }
                    else if ((pickedflg_R3 == true) && (r3inx == 1) && proto_htrclose_intiate == true)
                    {
                        if (protocolinitiateflg_R3 == true)
                            protocolrun_R3();
                    }
                }
            }
            catch (Exception d3)
            {
                Communication.writeCommunicationErrorlog(d3.ToString());
            }
        }
        private void tmr_r4_Tick(object sender, EventArgs e)
        {
            try
            {
                Application.DoEvents();
                int jno = 0;
                if ((htr_door_close == true) && (htr_door_closecmd_intiate == true))
                {
                    tmr_r4.Enabled = false;
                    htr_door_closecmd_intiate = false;
                    htr_door_close = false;
                    if ((proto_htrclose_intiate == true) && (protocolinitiateflg_R4 == true))
                    {
                        protocolrun_R4();
                    }
                }
                if (rareached == true)
                {
                    rareached = false;
                    tmr_r4.Enabled = false;

                    if ((topickupflg_R4 == false) && (toplaceflg_R4 == false) && (todipflg_R4 == false))
                    {
                        //SetText("RA Reached Jar " + inxSlno.ToString() + " Position");
                        SetText("RA Reached to " + JarName_R4 + " With Rack " + R4_cnt.ToString());
                    }
                    else if ((todipflg_R4 == true)) //&& (rack_dip == true)
                    {
                        SetText("RA Dipped the Rack " + R4_cnt.ToString() + " in Jar " + JarName_R4);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R4, JarName_R4, "R" + R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Completed", 0f, m_Runid);
                        todipflg_R4 = false;
                        rack_dip = false;
                        dippedflg_R4 = true;
                        r4priority = 0;
                        if (protocolinitiateflg_R4 == true)
                            protocolrun_R4();
                    }
                    ////else if ((todipflg_R4 == true) && (rack_dip_start == true))
                    ////{
                    ////    SetText("Rack " + R4_cnt.ToString() + " Dipping Started in Jar " + JarName_R4);
                    ////    rack_dip_start = false;
                    ////    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R4, JarName_R4, "R" + R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Started", 0f, m_Runid);
                    ////}
                    else if (topickupflg_R4 == true)
                    {
                        //SetText("RA Picked the Rack from" + inxSlno.ToString() +" Jar");
                        SetText("RA Picked the Rack " + R4_cnt.ToString() + " from Jar " + JarName_R4);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R4, JarName_R4, "R" + R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Picked From", 0f, m_Runid);
                        topickupflg_R4 = false;
                        pickedflg_R4 = true;
                        r4priority = 1;
                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R4.Substring(1));
                        if (JarName_R4.Contains("J"))
                            rackinjars[jno - 1] = 0;
                        else if (JarName_R4.Contains("W"))
                            rackinwaterjars[jno - 1] = 0;
                        else if (JarName_R4.Contains("L"))
                            rackinloading[jno - 1] = 0;
                        else if (JarName_R4.Contains("H"))
                            rackinheater[jno - 1] = 0;
                        if (JarName_R4 == "H1") { H1.TaskProcess = ""; Rackin_H1 = false; }
                        else if (JarName_R4 == "H2") { H2.TaskProcess = ""; Rackin_H2 = false; }
                        else if (JarName_R4 == "H3") { H3.TaskProcess = ""; Rackin_H3 = false; }
                        update_jardetails_runtime(JarName_R4, "R" + R4_cnt.ToString(), true, false, r4_taskcomp.ToString().Substring(11));
                        /*Added on 20-12-2023 1621*/
                        if (protocolinitiateflg_R4 == true)
                            protocolrun_R4();
                    }
                    else if (toplaceflg_R4 == true)
                    {
                        //SetText("RA Placed the Rack in" + inxSlno.ToString() + " Jar");
                        SetText("RA Placed the Rack " + R4_cnt.ToString() + " in Jar " + JarName_R4);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R4, JarName_R4, "R" + R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Placed In", 0f, m_Runid);
                        toplaceflg_R4 = false;
                        placedflg_R4 = true;
                        R4_pickcmdissue = false;  //Added on 19-12-2023 1231 to operate water valves                        
                        if (incubtime_R4 > 30)
                            r4priority = 0;
                        else
                            r4priority = 1;
                        update_jardetails_runtime(JarName_R4, "R" + R4_cnt.ToString(), false, true, r4_taskcomp.ToString().Substring(11));
                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R4.Substring(1));
                        if (JarName_R4.Contains("J"))
                            rackinjars[jno - 1] = 1;
                        else if (JarName_R4.Contains("W"))
                            rackinwaterjars[jno - 1] = 0;
                        else if (JarName_R4.Contains("H"))
                        {
                            rackinheater[jno - 1] = 1;
                            //Below code updated on 08-01-2025
                            if (JarName_R4 == "H1") { Rackin_H1 = true; H1_incub_complete = false; }
                            if (JarName_R4 == "H2") { Rackin_H2 = true; H2_incub_complete = false; }
                            if (JarName_R4 == "H3") { Rackin_H3 = true; H3_incub_complete = false; }
                        }
                        /*Added on 20-12-2023 1621*/
                        //////code added on 17-11-2023 for Robotic arm status
                        ////if (RA1_Busystate == true)
                        ////    RA1_Busystate = false;
                        ////if (RA2_Busystate == true)
                        ////    RA2_Busystate = false;

                        r4_incub = System.DateTime.Now;
                        r4_incub = r4_incub.AddSeconds(incubtime_R4);
                        tmr_r4_incub.Enabled = true;
                        tmr_r4_incub.Interval = 1000;
                        /////*Added to check both arms usage*/
                        ////placedJar = JarName_R4; Rno = R4_RNo;
                        ////move_RA_Time = System.DateTime.Now;
                        ////move_RA_Time.AddSeconds(2);
                        ////tmr_move_RA.Enabled = true;
                        ////tmr_move_RA.Interval = 500;
                        /////*Added to check both arms usage*/
                        r4_incub_WOn = System.DateTime.Now;
                        if (incubtime_R4 > 18)
                            r4_incub_WOn = r4_incub_WOn.AddSeconds(incubtime_R4 - 18);
                        else
                            r4_incub_WOn = r4_incub_WOn.AddSeconds(incubtime_R4);

                        r4_incub_Woff = System.DateTime.Now;
                        r4_incub_Woff = r4_incub_Woff.AddSeconds(18);

                        r4_priorChk = System.DateTime.Now;
                        r4_priorChk = r4_priorChk.AddSeconds(incubtime_R4 - 5);
                        //Code Updated on 20122023 1304
                        if ((water_valves_on_off_state[0] == 1) && (JarName_R4 == "W1") && (W1_On_State == false))
                            W1_On_State = true;
                        else if ((water_valves_on_off_state[1] == 1) && (JarName_R4 == "W2") && (W2_On_State == false))
                            W2_On_State = true;
                        else if ((water_valves_on_off_state[2] == 1) && (JarName_R4 == "W3") && (W3_On_State == false))
                            W3_On_State = true;
                        else if ((water_valves_on_off_state[3] == 1) && (JarName_R4 == "W4") && (W4_On_State == false))
                            W4_On_State = true;
                        else if ((water_valves_on_off_state[4] == 1) && (JarName_R4 == "W5") && (W5_On_State == false))
                            W5_On_State = true;
                        else if ((water_valves_on_off_state[5] == 1) && (JarName_R4 == "W6") && (W6_On_State == false))
                            W6_On_State = true;
                        //Code Updated on 20122023 1304
                        if (r4inx == 1)
                        {
                            if ((rackinloading[1] == 1) || (rackinloading[2] == 1))   //Temporarly commented on 24112023 1557
                            {
                                if (heatingreqflg == true)
                                {
                                    htrdoorintiate = false;
                                    proto_htrclose_intiate = false;
                                    close_htrdoor();
                                    if (incubtime_R4 > nxtracktime)
                                        Overlaptime = incubtime_R4 - nxtracktime;
                                    else if (incubtime_R4 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R4;
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }
                                else
                                {
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                tmr_nextrack.Enabled = true;
                                tmr_nextrack.Interval = 1000;
                            }
                            else if ((rackinloading[1] == 0) && (rackinloading[2] == 0))   //Temporarly commented on 24112023 1557
                            {
                                tmr_nextrack.Enabled = true;
                                nxtrackloading = System.DateTime.Now;
                                if (heatingreqflg == false)
                                {
                                    //nxtrackloading = nxtrackloading.AddSeconds(63);
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                else
                                {
                                    htrdoorintiate = false;
                                    proto_htrclose_intiate = false;
                                    close_htrdoor();
                                    if (incubtime_R4 > nxtracktime)
                                        Overlaptime = incubtime_R4 - nxtracktime;
                                    else if (incubtime_R4 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R4;
                                    //Overlaptime = Overlaptime + 120;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }
                                tmr_nextrack.Interval = 1000;
                            }
                            else
                            {
                                tmr_nextrack.Enabled = false;
                            }
                        }
                    }
                    else if ((pickedflg_R4 == true) && (r4inx == 1) && proto_htrclose_intiate == true)
                    {
                        if (protocolinitiateflg_R4 == true)
                            protocolrun_R4();
                    }
                }
            }
            catch (Exception d3)
            {
                Communication.writeCommunicationErrorlog(d3.ToString());
            }
        }
        private void tmr_r5_Tick(object sender, EventArgs e)
        {
            try
            {
                Application.DoEvents();
                int jno = 0;
                if ((htr_door_close == true) && (htr_door_closecmd_intiate == true))
                {
                    tmr_r5.Enabled = false;
                    htr_door_closecmd_intiate = false;
                    htr_door_close = false;
                    if ((proto_htrclose_intiate == true) && (protocolinitiateflg_R5 == true))
                    {
                        protocolrun_R5();
                    }
                }
                if (rareached == true)
                {
                    rareached = false;
                    tmr_r5.Enabled = false;

                    if ((topickupflg_R5 == false) && (toplaceflg_R5 == false) && (todipflg_R5 == false))
                    {
                        //SetText("RA Reached Jar " + inxSlno.ToString() + " Position");
                        SetText("RA Reached to " + JarName_R5 + " With Rack " + R5_cnt.ToString());
                    }
                    else if ((todipflg_R5 == true)) //&& (rack_dip == true)
                    {
                        SetText("RA Dipped the Rack " + R5_cnt.ToString() + " in Jar " + JarName_R5);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R5, JarName_R5, "R" + R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Completed", 0f, m_Runid);
                        todipflg_R5 = false;
                        rack_dip = false;
                        dippedflg_R5 = true;
                        r5priority = 0;
                        if (protocolinitiateflg_R5 == true)
                            protocolrun_R5();
                    }
                    ////else if ((todipflg_R5 == true) && (rack_dip_start == true))
                    ////{
                    ////    SetText("Rack " + R5_cnt.ToString() + " Dipping Started in Jar " + JarName_R5);
                    ////    rack_dip_start = false;
                    ////    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R5, JarName_R5, "R" + R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Started", 0f, m_Runid);
                    ////}
                    else if (topickupflg_R5 == true)
                    {
                        //SetText("RA Picked the Rack from" + inxSlno.ToString() +" Jar");
                        SetText("RA Picked the Rack " + R5_cnt.ToString() + " from Jar " + JarName_R5);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R5, JarName_R5, "R" + R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Picked From", 0f, m_Runid);
                        topickupflg_R5 = false;
                        pickedflg_R5 = true;
                        r5priority = 1;
                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R5.Substring(1));
                        if (JarName_R5.Contains("J"))
                            rackinjars[jno - 1] = 0;
                        else if (JarName_R5.Contains("W"))
                            rackinwaterjars[jno - 1] = 0;
                        else if (JarName_R5.Contains("L"))
                            rackinloading[jno - 1] = 0;
                        else if (JarName_R5.Contains("H"))
                            rackinheater[jno - 1] = 0;
                        if (JarName_R5 == "H1") { H1.TaskProcess = ""; Rackin_H1 = false; }
                        else if (JarName_R5 == "H2") { H2.TaskProcess = ""; Rackin_H2 = false; }
                        else if (JarName_R5 == "H3") { H3.TaskProcess = ""; Rackin_H3 = false; }
                        update_jardetails_runtime(JarName_R5, "R" + R5_cnt.ToString(), true, false, r5_taskcomp.ToString().Substring(11));
                        /*Added on 20-12-2023 1621*/
                        if (protocolinitiateflg_R5 == true)
                            protocolrun_R5();
                    }
                    else if (toplaceflg_R5 == true)
                    {
                        //SetText("RA Placed the Rack in" + inxSlno.ToString() + " Jar");
                        SetText("RA Placed the Rack " + R5_cnt.ToString() + " in Jar " + JarName_R5);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R5, JarName_R5, "R" + R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Placed In", 0f, m_Runid);
                        toplaceflg_R5 = false;
                        placedflg_R5 = true;
                        R5_pickcmdissue = false;  //Added on 19-12-2023 1231 to operate water valves
                        if (incubtime_R5 > 30)
                            r5priority = 0;
                        else
                            r5priority = 1;
                        update_jardetails_runtime(JarName_R5, "R" + R5_cnt.ToString(), false, true, r5_taskcomp.ToString().Substring(11));
                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R5.Substring(1));
                        if (JarName_R5.Contains("J"))
                            rackinjars[jno - 1] = 1;
                        else if (JarName_R5.Contains("W"))
                            rackinwaterjars[jno - 1] = 1;
                        else if (JarName_R5.Contains("H"))
                        {
                            rackinheater[jno - 1] = 1;
                            //Below code updated on 08-01-2025
                            if (JarName_R5 == "H1") { Rackin_H1 = true; H1_incub_complete = false; }
                            if (JarName_R5 == "H2") { Rackin_H2 = true; H2_incub_complete = false; }
                            if (JarName_R5 == "H3") { Rackin_H3 = true; H3_incub_complete = false; }
                        }
                        /*Added on 20-12-2023 1621*/

                        //////code added on 17-11-2023 for Robotic arm status
                        ////if (RA1_Busystate == true)
                        ////    RA1_Busystate = false;
                        ////if (RA2_Busystate == true)
                        ////    RA2_Busystate = false;

                        r5_incub = System.DateTime.Now;
                        r5_incub = r5_incub.AddSeconds(incubtime_R5);
                        tmr_r5_incub.Enabled = true;
                        tmr_r5_incub.Interval = 1000;
                        /////*Added to check both arms usage*/
                        ////placedJar = JarName_R5; Rno = R5_RNo;
                        ////move_RA_Time = System.DateTime.Now;
                        ////move_RA_Time.AddSeconds(2);
                        ////tmr_move_RA.Enabled = true;
                        ////tmr_move_RA.Interval = 500;
                        /////*Added to check both arms usage*/
                        r5_incub_WOn = System.DateTime.Now;
                        if (incubtime_R5 > 18)
                            r5_incub_WOn = r5_incub_WOn.AddSeconds(incubtime_R5 - 18);
                        else
                            r5_incub_WOn = r5_incub_WOn.AddSeconds(incubtime_R5);

                        r5_incub_Woff = System.DateTime.Now;
                        r5_incub_Woff = r5_incub_Woff.AddSeconds(18);
                        r5_priorChk = System.DateTime.Now;
                        r5_priorChk = r5_priorChk.AddSeconds(incubtime_R5 - 5);

                        //Code Updated on 20122023 1304
                        if ((water_valves_on_off_state[0] == 1) && (JarName_R5 == "W1") && (W1_On_State == false))
                            W1_On_State = true;
                        else if ((water_valves_on_off_state[1] == 1) && (JarName_R5 == "W2") && (W2_On_State == false))
                            W2_On_State = true;
                        else if ((water_valves_on_off_state[2] == 1) && (JarName_R5 == "W3") && (W3_On_State == false))
                            W3_On_State = true;
                        else if ((water_valves_on_off_state[3] == 1) && (JarName_R5 == "W4") && (W4_On_State == false))
                            W4_On_State = true;
                        else if ((water_valves_on_off_state[4] == 1) && (JarName_R5 == "W5") && (W5_On_State == false))
                            W5_On_State = true;
                        else if ((water_valves_on_off_state[5] == 1) && (JarName_R5 == "W6") && (W6_On_State == false))
                            W6_On_State = true;
                        //Code Updated on 20122023 1304

                        if (r5inx == 1)
                        {
                            if ((rackinloading[2] == 1))   //Temporarly commented on 24112023 1557
                            {
                                if (heatingreqflg == true)
                                {
                                    htrdoorintiate = false;
                                    proto_htrclose_intiate = false;
                                    close_htrdoor();
                                    if (incubtime_R5 > nxtracktime)
                                        Overlaptime = incubtime_R5 - nxtracktime;
                                    else if (incubtime_R5 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R5;
                                    //Overlaptime = Overlaptime + 120;
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }
                                else
                                {
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                tmr_nextrack.Enabled = true;
                                tmr_nextrack.Interval = 1000;
                            }
                            else if ((rackinloading[2] == 0))   //Temporarly commented on 24112023 1557
                            {
                                tmr_nextrack.Enabled = true;
                                nxtrackloading = System.DateTime.Now;
                                if (heatingreqflg == false)
                                {
                                    //nxtrackloading = nxtrackloading.AddSeconds(63);
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                else
                                {
                                    htrdoorintiate = false;
                                    proto_htrclose_intiate = false;
                                    close_htrdoor();
                                    if (incubtime_R5 > nxtracktime)
                                        Overlaptime = incubtime_R5 - nxtracktime;
                                    else if (incubtime_R5 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R5;
                                    ////Overlaptime = Overlaptime + 120;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }
                                tmr_nextrack.Interval = 1000;
                            }
                            else
                            {
                                tmr_nextrack.Enabled = false;
                            }
                        }
                    }
                    else if ((pickedflg_R5 == true) && (r5inx == 1) && proto_htrclose_intiate == true)
                    {
                        if (protocolinitiateflg_R5 == true)
                            protocolrun_R5();
                    }
                }
            }
            catch (Exception d3)
            {
                Communication.writeCommunicationErrorlog(d3.ToString());
            }
        }
        private void tmr_r6_Tick(object sender, EventArgs e)
        {
            try
            {
                Application.DoEvents();
                int jno = 0;
                if ((htr_door_close == true) && (htr_door_closecmd_intiate == true))
                {
                    tmr_r6.Enabled = false;
                    htr_door_closecmd_intiate = false;
                    htr_door_close = false;
                    if ((proto_htrclose_intiate == true) && (protocolinitiateflg_R6 == true))
                    {
                        protocolrun_R6();
                    }
                }
                if (rareached == true)
                {
                    rareached = false;
                    tmr_r6.Enabled = false;

                    if ((topickupflg_R6 == false) && (toplaceflg_R6 == false) && (todipflg_R6 == false))
                    {
                        //SetText("RA Reached Jar " + inxSlno.ToString() + " Position");
                        SetText("RA Reached to " + JarName_R6 + " With Rack " + R6_cnt.ToString());
                    }
                    else if ((todipflg_R6 == true)) //&& (rack_dip == true)
                    {
                        SetText("RA Dipped the Rack " + R6_cnt.ToString() + " in Jar " + JarName_R6);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R6, JarName_R6, "R" + R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Completed", 0f, m_Runid);
                        todipflg_R6 = false;
                        rack_dip = false;
                        dippedflg_R6 = true;
                        r6priority = 0;
                        if (protocolinitiateflg_R6 == true)
                            protocolrun_R6();
                    }
                    ////else if ((todipflg_R6 == true) && (rack_dip_start == true))
                    ////{
                    ////    SetText("Rack " + R6_cnt.ToString() + " Dipping Started in Jar " + JarName_R6);
                    ////    rack_dip_start = false;
                    ////    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R6, JarName_R6, "R" + R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Started", 0f, m_Runid);
                    ////}
                    else if (topickupflg_R6 == true)
                    {
                        //SetText("RA Picked the Rack from" + inxSlno.ToString() +" Jar");
                        SetText("RA Picked the Rack " + R6_cnt.ToString() + " from Jar " + JarName_R6);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R6, JarName_R6, "R" + R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Picked From", 0f, m_Runid);
                        topickupflg_R6 = false;
                        pickedflg_R6 = true;
                        r6priority = 1;
                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R6.Substring(1));
                        if (JarName_R6.Contains("J"))
                            rackinjars[jno - 1] = 0;
                        else if (JarName_R6.Contains("W"))
                            rackinwaterjars[jno - 1] = 0;
                        else if (JarName_R6.Contains("L"))
                            rackinloading[jno - 1] = 0;
                        else if (JarName_R6.Contains("H"))
                            rackinheater[jno - 1] = 0;
                        if (JarName_R6 == "H1") { H1.TaskProcess = ""; Rackin_H1 = false; }
                        else if (JarName_R6 == "H2") { H2.TaskProcess = ""; Rackin_H2 = false; }
                        else if (JarName_R6 == "H3") { H3.TaskProcess = ""; Rackin_H3 = false; }
                        update_jardetails_runtime(JarName_R6, "R" + R6_cnt.ToString(), true, false, r6_taskcomp.ToString().Substring(11));
                        /*Added on 20-12-2023 1621*/
                        if (protocolinitiateflg_R6 == true)
                            protocolrun_R6();
                    }
                    else if (toplaceflg_R6 == true)
                    {
                        //SetText("RA Placed the Rack in" + inxSlno.ToString() + " Jar");
                        SetText("RA Placed the Rack " + R6_cnt.ToString() + " in Jar " + JarName_R6);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R6, JarName_R6, "R" + R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Placed In", 0f, m_Runid);
                        toplaceflg_R6 = false;
                        placedflg_R6 = true;
                        R6_pickcmdissue = false;  //Added on 19-12-2023 1231 to operate water valves
                        if (incubtime_R6 > 30)
                            r6priority = 0;
                        else
                            r6priority = 1;
                        update_jardetails_runtime(JarName_R6, "R" + R6_cnt.ToString(), false, true, r6_taskcomp.ToString().Substring(11));
                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R6.Substring(1));
                        if (JarName_R6.Contains("J"))
                            rackinjars[jno - 1] = 1;
                        else if (JarName_R6.Contains("W"))
                            rackinwaterjars[jno - 1] = 1;
                        else if (JarName_R6.Contains("H"))
                        {
                            rackinheater[jno - 1] = 1;
                            //Below code updated on 08-01-2025
                            if (JarName_R6 == "H1") { Rackin_H1 = true; H1_incub_complete = false; }
                            if (JarName_R6 == "H2") { Rackin_H2 = true; H2_incub_complete = false; }
                            if (JarName_R6 == "H3") { Rackin_H3 = true; H3_incub_complete = false; }
                        }
                        /*Added on 20-12-2023 1621*/

                        //////code added on 17-11-2023 for Robotic arm status
                        ////if (RA1_Busystate == true)
                        ////    RA1_Busystate = false;
                        ////if (RA2_Busystate == true)
                        ////    RA2_Busystate = false;

                        r6_incub = System.DateTime.Now;
                        r6_incub = r6_incub.AddSeconds(incubtime_R6);
                        tmr_r6_incub.Enabled = true;
                        tmr_r6_incub.Interval = 1000;
                        /////*Added to check both arms usage*/
                        ////placedJar = JarName_R6; Rno = R6_RNo;
                        ////move_RA_Time = System.DateTime.Now;
                        ////move_RA_Time.AddSeconds(2);
                        ////tmr_move_RA.Enabled = true;
                        ////tmr_move_RA.Interval = 500;
                        /////*Added to check both arms usage*/
                        r6_incub_WOn = System.DateTime.Now;
                        if (incubtime_R6 > 18)
                            r6_incub_WOn = r6_incub_WOn.AddSeconds(incubtime_R6 - 18);
                        else
                            r6_incub_WOn = r6_incub_WOn.AddSeconds(incubtime_R6);

                        r6_incub_Woff = System.DateTime.Now;
                        r6_incub_Woff = r6_incub_Woff.AddSeconds(18);

                        r6_priorChk = System.DateTime.Now;
                        r6_priorChk = r6_priorChk.AddSeconds(incubtime_R6 - 5);

                        //Code Updated on 20122023 1304
                        if ((water_valves_on_off_state[0] == 1) && (JarName_R6 == "W1") && (W1_On_State == false))
                            W1_On_State = true;
                        else if ((water_valves_on_off_state[1] == 1) && (JarName_R6 == "W2") && (W2_On_State == false))
                            W2_On_State = true;
                        else if ((water_valves_on_off_state[2] == 1) && (JarName_R6 == "W3") && (W3_On_State == false))
                            W3_On_State = true;
                        else if ((water_valves_on_off_state[3] == 1) && (JarName_R6 == "W4") && (W4_On_State == false))
                            W4_On_State = true;
                        else if ((water_valves_on_off_state[4] == 1) && (JarName_R6 == "W5") && (W5_On_State == false))
                            W5_On_State = true;
                        else if ((water_valves_on_off_state[5] == 1) && (JarName_R6 == "W6") && (W6_On_State == false))
                            W6_On_State = true;
                        //Code Updated on 20122023 1304

                        if (r6inx == 1)
                        {
                            tmr_nextrack.Enabled = true;
                            nxtrackloading = System.DateTime.Now;
                            if (heatingreqflg == false)
                            {
                                nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                            }
                            else
                            {
                                htrdoorintiate = false;
                                proto_htrclose_intiate = false;
                                close_htrdoor();
                                //nxtrackloading = nxtrackloading.AddSeconds(63);
                                if (incubtime_R6 > nxtracktime)
                                    Overlaptime = incubtime_R6 - nxtracktime;
                                else if (incubtime_R6 < nxtracktime)
                                    Overlaptime = nxtracktime - incubtime_R6;
                                //Overlaptime = Overlaptime + 120;
                                nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                            }
                            tmr_nextrack.Interval = 1000;
                        }
                    }
                    else if ((pickedflg_R6 == true) && (r6inx == 1) && proto_htrclose_intiate == true)
                    {
                        if (protocolinitiateflg_R6 == true)
                            protocolrun_R6();
                    }
                }
            }
            catch (Exception d3)
            {
                Communication.writeCommunicationErrorlog(d3.ToString());
            }
        }
        private void tmr_r7_Tick(object sender, EventArgs e)
        {
            try
            {
                Application.DoEvents();
                int jno = 0;
                if ((htr_door_close == true) && (htr_door_closecmd_intiate == true))
                {
                    tmr_r7.Enabled = false;
                    htr_door_closecmd_intiate = false;
                    htr_door_close = false;
                    if ((proto_htrclose_intiate == true) && (protocolinitiateflg_R7 == true))
                    {
                        protocolrun_R7();
                    }
                }
                if (rareached == true)
                {
                    rareached = false;
                    tmr_r7.Enabled = false;

                    if ((topickupflg_R7 == false) && (toplaceflg_R7 == false) && (todipflg_R7 == false))
                    {
                        //SetText("RA Reached Jar " + inxSlno.ToString() + " Position");
                        SetText("RA Reached to " + JarName_R7 + " With Rack " + R7_cnt.ToString());
                    }
                    else if ((todipflg_R7 == true))  //&& (rack_dip == true)
                    {
                        SetText("RA Dipped the Rack " + R7_cnt.ToString() + " in Jar " + JarName_R7);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R7, JarName_R7, "R" + R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Completed", 0f, m_Runid);
                        todipflg_R7 = false;
                        rack_dip = false;
                        dippedflg_R7 = true;
                        r7priority = 0;
                        if (protocolinitiateflg_R7 == true)
                            protocolrun_R7();
                    }
                    ////else if ((todipflg_R7 == true) && (rack_dip_start == true))
                    ////{
                    ////    SetText("Rack " + R7_cnt.ToString() + " Dipping Started in Jar " + JarName_R7);
                    ////    rack_dip_start = false;
                    ////    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R7, JarName_R7, "R" + R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Started", 0f, m_Runid);
                    ////}
                    else if (topickupflg_R7 == true)
                    {
                        //SetText("RA Picked the Rack from" + inxSlno.ToString() +" Jar");
                        SetText("RA Picked the Rack " + R7_cnt.ToString() + " from Jar " + JarName_R7);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R7, JarName_R7, "R" + R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Picked From", 0f, m_Runid);
                        topickupflg_R7 = false;
                        pickedflg_R7 = true;
                        r7priority = 1;
                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R7.Substring(1));
                        if (JarName_R7.Contains("J"))
                            rackinjars[jno - 1] = 0;
                        else if (JarName_R7.Contains("W"))
                            rackinwaterjars[jno - 1] = 0;
                        else if (JarName_R7.Contains("L"))
                            rackinloading[jno - 1] = 0;
                        else if (JarName_R7.Contains("H"))
                            rackinheater[jno - 1] = 0;
                        if (JarName_R7 == "H1") { H1.TaskProcess = ""; Rackin_H1 = false; }
                        else if (JarName_R7 == "H2") { H2.TaskProcess = ""; Rackin_H2 = false; }
                        else if (JarName_R7 == "H3") { H3.TaskProcess = ""; Rackin_H3 = false; }
                        /*Added on 20-12-2023 1621*/
                        if (protocolinitiateflg_R7 == true)
                            protocolrun_R7();
                    }
                    else if (toplaceflg_R7 == true)
                    {
                        //SetText("RA Placed the Rack in" + inxSlno.ToString() + " Jar");
                        SetText("RA Placed the Rack " + R7_cnt.ToString() + " in Jar " + JarName_R7);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R7, JarName_R7, "R" + R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Placed In", 0f, m_Runid);
                        toplaceflg_R7 = false;
                        placedflg_R7 = true;
                        R7_pickcmdissue = false;  //Added on 19-12-2023 1231 to operate water valves
                        if (incubtime_R7 > 30)
                            r7priority = 0;
                        else
                            r7priority = 1;

                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R7.Substring(1));
                        if (JarName_R7.Contains("J"))
                            rackinjars[jno - 1] = 1;
                        else if (JarName_R7.Contains("W"))
                            rackinwaterjars[jno - 1] = 1;
                        else if (JarName_R7.Contains("H"))
                        {
                            rackinheater[jno - 1] = 1;
                            //Below code updated on 08-01-2025
                            if (JarName_R7 == "H1") { Rackin_H1 = true; H1_incub_complete = false; }
                            if (JarName_R7 == "H2") { Rackin_H2 = true; H2_incub_complete = false; }
                            if (JarName_R7 == "H3") { Rackin_H3 = true; H3_incub_complete = false; }
                        }
                        /*Added on 20-12-2023 1621*/

                        //////code added on 17-11-2023 for Robotic arm status
                        ////if (RA1_Busystate == true)
                        ////    RA1_Busystate = false;
                        ////if (RA2_Busystate == true)
                        ////    RA2_Busystate = false;

                        r7_incub = System.DateTime.Now;
                        r7_incub = r7_incub.AddSeconds(incubtime_R7);
                        tmr_r7_incub.Enabled = true;
                        tmr_r7_incub.Interval = 1000;

                        /////*Added to check both arms usage*/
                        ////placedJar = JarName_R7; Rno = R7_RNo;
                        ////move_RA_Time = System.DateTime.Now;
                        ////move_RA_Time.AddSeconds(2);
                        ////tmr_move_RA.Enabled = true;
                        ////tmr_move_RA.Interval = 500;
                        /////*Added to check both arms usage*/

                        r7_incub_WOn = System.DateTime.Now;
                        if (incubtime_R7 > 18)
                            r7_incub_WOn = r7_incub_WOn.AddSeconds(incubtime_R7 - 18);
                        else
                            r7_incub_WOn = r7_incub_WOn.AddSeconds(incubtime_R7);

                        r7_incub_Woff = System.DateTime.Now;
                        r7_incub_Woff = r7_incub_Woff.AddSeconds(18);
                        r7_priorChk = System.DateTime.Now;
                        r7_priorChk = r7_priorChk.AddSeconds(incubtime_R7 - 5);

                        //Code Updated on 20122023 1304
                        if ((water_valves_on_off_state[0] == 1) && (JarName_R7 == "W1") && (W1_On_State == false))
                            W1_On_State = true;
                        else if ((water_valves_on_off_state[1] == 1) && (JarName_R7 == "W2") && (W2_On_State == false))
                            W2_On_State = true;
                        else if ((water_valves_on_off_state[2] == 1) && (JarName_R7 == "W3") && (W3_On_State == false))
                            W3_On_State = true;
                        else if ((water_valves_on_off_state[3] == 1) && (JarName_R7 == "W4") && (W4_On_State == false))
                            W4_On_State = true;
                        else if ((water_valves_on_off_state[4] == 1) && (JarName_R7 == "W5") && (W5_On_State == false))
                            W5_On_State = true;
                        else if ((water_valves_on_off_state[5] == 1) && (JarName_R7 == "W6") && (W6_On_State == false))
                            W6_On_State = true;
                        //Code Updated on 20122023 1304

                        if (r7inx == 1)
                        {
                            if ((rackinloading[1] == 1) || (rackinloading[2] == 1))   //Temporarly commented on 24112023 1557
                            {
                                if (heatingreqflg == true)
                                {
                                    htrdoorintiate = false;
                                    proto_htrclose_intiate = false;
                                    close_htrdoor();
                                    if (incubtime_R7 > nxtracktime)
                                        Overlaptime = incubtime_R7 - nxtracktime;
                                    else if (incubtime_R7 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R7;
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }
                                else
                                {
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                tmr_nextrack.Enabled = true;
                                tmr_nextrack.Interval = 1000;
                            }
                            else if ((rackinloading[1] == 0) && (rackinloading[2] == 0))   //Temporarly commented on 24112023 1557
                            {
                                tmr_nextrack.Enabled = true;
                                nxtrackloading = System.DateTime.Now;
                                if (heatingreqflg == false)
                                {
                                    //nxtrackloading = nxtrackloading.AddSeconds(63);
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                else
                                {
                                    if (incubtime_R7 > nxtracktime)
                                        Overlaptime = incubtime_R7 - nxtracktime;
                                    else if (incubtime_R7 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R7;
                                    ////Overlaptime = Overlaptime + 120;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }
                                tmr_nextrack.Interval = 1000;
                            }
                            else
                            {
                                tmr_nextrack.Enabled = false;
                            }
                        }
                    }
                    else if ((pickedflg_R7 == true) && (r7inx == 1) && proto_htrclose_intiate == true)
                    {
                        if (protocolinitiateflg_R7 == true)
                            protocolrun_R7();
                    }
                }
            }
            catch (Exception d3)
            {
                Communication.writeCommunicationErrorlog(d3.ToString());
            }
        }
        private void tmr_r8_Tick(object sender, EventArgs e)
        {
            try
            {
                Application.DoEvents();
                int jno = 0;
                if ((htr_door_close == true) && (htr_door_closecmd_intiate == true))
                {
                    tmr_r8.Enabled = false;
                    htr_door_closecmd_intiate = false;
                    htr_door_close = false;
                    if ((proto_htrclose_intiate == true) && (protocolinitiateflg_R8 == true))
                    {
                        protocolrun_R8();
                    }
                }
                if (rareached == true)
                {
                    rareached = false;
                    tmr_r8.Enabled = false;

                    if ((topickupflg_R8 == false) && (toplaceflg_R8 == false) && (todipflg_R8 == false))
                    {
                        //SetText("RA Reached Jar " + inxSlno.ToString() + " Position");
                        SetText("RA Reached to " + JarName_R8 + " With Rack " + R8_cnt.ToString());
                    }
                    else if ((todipflg_R8 == true))  //&& (rack_dip == true)
                    {
                        SetText("RA Dipped the Rack " + R8_cnt.ToString() + " in Jar " + JarName_R8);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R8, JarName_R8, "R" + R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dipped In", 0f, m_Runid);
                        todipflg_R8 = false;
                        rack_dip = false;
                        dippedflg_R8 = true;
                        r8priority = 0;
                        if (protocolinitiateflg_R8 == true)
                            protocolrun_R8();
                    }
                    ////else if ((todipflg_R8 == true) && (rack_dip_start == true))
                    ////{
                    ////    SetText("Rack " + R8_cnt.ToString() + " Dipping Started in Jar " + JarName_R8);
                    ////    rack_dip_start = false;
                    ////    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R8, JarName_R8, "R" + R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Started", 0f, m_Runid);
                    ////}
                    else if (topickupflg_R8 == true)
                    {
                        //SetText("RA Picked the Rack from" + inxSlno.ToString() +" Jar");
                        SetText("RA Picked the Rack " + R8_cnt.ToString() + " from Jar " + JarName_R8);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R8, JarName_R8, "R" + R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Picked From", 0f, m_Runid);
                        topickupflg_R8 = false;
                        pickedflg_R8 = true;
                        r8priority = 1;
                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R8.Substring(1));
                        if (JarName_R8.Contains("J"))
                            rackinjars[jno - 1] = 0;
                        else if (JarName_R8.Contains("W"))
                            rackinwaterjars[jno - 1] = 0;
                        else if (JarName_R8.Contains("L"))
                            rackinloading[jno - 1] = 0;
                        else if (JarName_R8.Contains("H"))
                            rackinheater[jno - 1] = 0;
                        if (JarName_R8 == "H1") { H1.TaskProcess = ""; Rackin_H1 = false; }
                        else if (JarName_R8 == "H2") { H2.TaskProcess = ""; Rackin_H2 = false; }
                        else if (JarName_R8 == "H3") { H3.TaskProcess = ""; Rackin_H3 = false; }
                        /*Added on 20-12-2023 1621*/
                        if (protocolinitiateflg_R8 == true)
                            protocolrun_R8();
                    }
                    else if (toplaceflg_R8 == true)
                    {
                        //SetText("RA Placed the Rack in" + inxSlno.ToString() + " Jar");
                        SetText("RA Placed the Rack " + R8_cnt.ToString() + " in Jar " + JarName_R8);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R8, JarName_R8, "R" + R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Placed In", 0f, m_Runid);
                        toplaceflg_R8 = false;
                        placedflg_R8 = true;
                        R8_pickcmdissue = false;  //Added on 19-12-2023 1231 to operate water valves
                        if (incubtime_R8 > 30)
                            r8priority = 0;
                        else
                            r8priority = 1;

                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R8.Substring(1));
                        if (JarName_R8.Contains("J"))
                            rackinjars[jno - 1] = 1;
                        else if (JarName_R8.Contains("W"))
                            rackinwaterjars[jno - 1] = 1;
                        else if (JarName_R8.Contains("H"))
                        {
                            rackinheater[jno - 1] = 1;
                            //Below code updated on 08-01-2025
                            if (JarName_R8 == "H1") { Rackin_H1 = true; H1_incub_complete = false; }
                            if (JarName_R8 == "H2") { Rackin_H2 = true; H2_incub_complete = false; }
                            if (JarName_R8 == "H3") { Rackin_H3 = true; H3_incub_complete = false; }
                        }
                        /*Added on 20-12-2023 1621*/

                        //////code added on 17-11-2023 for Robotic arm status
                        ////if (RA1_Busystate == true)
                        ////    RA1_Busystate = false;
                        ////if (RA2_Busystate == true)
                        ////    RA2_Busystate = false;

                        r8_incub = System.DateTime.Now;
                        r8_incub = r8_incub.AddSeconds(incubtime_R8);
                        tmr_r8_incub.Enabled = true;
                        tmr_r8_incub.Interval = 1000;

                        /////*Added to check both arms usage*/
                        ////placedJar = JarName_R8; Rno = R8_RNo;
                        ////move_RA_Time = System.DateTime.Now;
                        ////move_RA_Time.AddSeconds(2);
                        ////tmr_move_RA.Enabled = true;
                        ////tmr_move_RA.Interval = 500;
                        /////*Added to check both arms usage*/

                        r8_incub_WOn = System.DateTime.Now;
                        if (incubtime_R8 > 18)
                            r8_incub_WOn = r8_incub_WOn.AddSeconds(incubtime_R8 - 18);
                        else
                            r8_incub_WOn = r8_incub_WOn.AddSeconds(incubtime_R8);

                        r8_incub_Woff = System.DateTime.Now;
                        r8_incub_Woff = r8_incub_Woff.AddSeconds(18);
                        r8_priorChk = System.DateTime.Now;
                        r8_priorChk = r8_priorChk.AddSeconds(incubtime_R8 - 5);

                        //Code Updated on 20122023 1304
                        if ((water_valves_on_off_state[0] == 1) && (JarName_R8 == "W1") && (W1_On_State == false))
                            W1_On_State = true;
                        else if ((water_valves_on_off_state[1] == 1) && (JarName_R8 == "W2") && (W2_On_State == false))
                            W2_On_State = true;
                        else if ((water_valves_on_off_state[2] == 1) && (JarName_R8 == "W3") && (W3_On_State == false))
                            W3_On_State = true;
                        else if ((water_valves_on_off_state[3] == 1) && (JarName_R8 == "W4") && (W4_On_State == false))
                            W4_On_State = true;
                        else if ((water_valves_on_off_state[4] == 1) && (JarName_R8 == "W5") && (W5_On_State == false))
                            W5_On_State = true;
                        else if ((water_valves_on_off_state[5] == 1) && (JarName_R8 == "W6") && (W6_On_State == false))
                            W6_On_State = true;
                        //Code Updated on 20122023 1304
                        if (r8inx == 1)
                        {
                            if ((rackinloading[2] == 1))   //Temporarly commented on 24112023 1557
                            {
                                if (heatingreqflg == true)
                                {
                                    htrdoorintiate = false;
                                    proto_htrclose_intiate = false;
                                    close_htrdoor();
                                    if (incubtime_R8 > nxtracktime)
                                        Overlaptime = incubtime_R8 - nxtracktime;
                                    else if (incubtime_R8 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R8;
                                    ////Overlaptime = Overlaptime + 120;
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }
                                else
                                {
                                    nxtrackloading = System.DateTime.Now;
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                tmr_nextrack.Enabled = true;
                                tmr_nextrack.Interval = 1000;
                            }
                            else if ((rackinloading[2] == 0))   //Temporarly commented on 24112023 1557
                            {
                                tmr_nextrack.Enabled = true;
                                nxtrackloading = System.DateTime.Now;
                                if (heatingreqflg == false)
                                {
                                    //nxtrackloading = nxtrackloading.AddSeconds(63);
                                    nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                                }
                                else
                                {
                                    if (incubtime_R8 > nxtracktime)
                                        Overlaptime = incubtime_R8 - nxtracktime;
                                    else if (incubtime_R8 < nxtracktime)
                                        Overlaptime = nxtracktime - incubtime_R8;
                                    ////Overlaptime = Overlaptime + 120;
                                    nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                                }
                                tmr_nextrack.Interval = 1000;
                            }
                            else
                            {
                                tmr_nextrack.Enabled = false;
                            }
                        }
                    }
                    else if ((pickedflg_R8 == true) && (r8inx == 1) && proto_htrclose_intiate == true)
                    {
                        if (protocolinitiateflg_R8 == true)
                            protocolrun_R8();
                    }
                }
            }
            catch (Exception d3)
            {
                Communication.writeCommunicationErrorlog(d3.ToString());
            }
        }
        private void tmr_r9_Tick(object sender, EventArgs e)
        {
            try
            {
                Application.DoEvents();
                int jno = 0;
                if ((htr_door_close == true) && (htr_door_closecmd_intiate == true))
                {
                    tmr_r9.Enabled = false;
                    htr_door_closecmd_intiate = false;
                    htr_door_close = false;
                    if ((proto_htrclose_intiate == true) && (protocolinitiateflg_R9 == true))
                    {
                        protocolrun_R9();
                    }
                }
                if (rareached == true)
                {
                    rareached = false;
                    tmr_r9.Enabled = false;

                    if ((topickupflg_R9 == false) && (toplaceflg_R9 == false) && (todipflg_R9 == false))
                    {
                        //SetText("RA Reached Jar " + inxSlno.ToString() + " Position");
                        SetText("RA Reached to " + JarName_R9 + " With Rack " + R9_cnt.ToString());
                    }
                    else if ((todipflg_R9 == true))  //&& (rack_dip == true)
                    {
                        SetText("RA Dipped the Rack " + R9_cnt.ToString() + " in Jar " + JarName_R9);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R9, JarName_R9, "R" + R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dipped In", 0f, m_Runid);
                        todipflg_R9 = false;
                        rack_dip = false;
                        dippedflg_R9 = true;
                        r9priority = 0;
                        if (protocolinitiateflg_R9 == true)
                            protocolrun_R9();
                    }
                    ////else if ((todipflg_R9 == true) && (rack_dip_start == true))
                    ////{
                    ////    SetText("Rack " + R9_cnt.ToString() + " Dipping Started in Jar " + JarName_R9);
                    ////    rack_dip_start = false;
                    ////    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R9, JarName_R9, "R" + R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Dip Started", 0f, m_Runid);
                    ////}
                    else if (topickupflg_R9 == true)
                    {
                        //SetText("RA Picked the Rack from" + inxSlno.ToString() +" Jar");
                        SetText("RA Picked the Rack " + R9_cnt.ToString() + " from Jar " + JarName_R9);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R9, JarName_R9, "R" + R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Picked From", 0f, m_Runid);
                        topickupflg_R9 = false;
                        pickedflg_R9 = true;
                        r9priority = 1;
                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R9.Substring(1));
                        if (JarName_R9.Contains("J"))
                            rackinjars[jno - 1] = 0;
                        else if (JarName_R9.Contains("W"))
                            rackinwaterjars[jno - 1] = 0;
                        else if (JarName_R9.Contains("L"))
                            rackinloading[jno - 1] = 0;
                        else if (JarName_R9.Contains("H"))
                            rackinheater[jno - 1] = 0;
                        if (JarName_R9 == "H1") { H1.TaskProcess = ""; Rackin_H1 = false; }
                        else if (JarName_R9 == "H2") { H2.TaskProcess = ""; Rackin_H2 = false; }
                        else if (JarName_R9 == "H3") { H3.TaskProcess = ""; Rackin_H3 = false; }
                        /*Added on 20-12-2023 1621*/
                        if (protocolinitiateflg_R9 == true)
                            protocolrun_R9();
                    }
                    else if (toplaceflg_R9 == true)
                    {
                        //SetText("RA Placed the Rack in" + inxSlno.ToString() + " Jar");
                        SetText("RA Placed the Rack " + R9_cnt.ToString() + " in Jar " + JarName_R9);
                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R9, JarName_R9, "R" + R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Placed In", 0f, m_Runid);
                        toplaceflg_R9 = false;
                        placedflg_R9 = true;
                        R9_pickcmdissue = false;  //Added on 19-12-2023 1231 to operate water valves
                        if (incubtime_R9 > 30)
                            r9priority = 0;
                        else
                            r9priority = 1;

                        /*Added on 20-12-2023 1621*/
                        jno = Convert.ToInt32(JarName_R9.Substring(1));
                        if (JarName_R9.Contains("J"))
                            rackinjars[jno - 1] = 1;
                        else if (JarName_R9.Contains("W"))
                            rackinwaterjars[jno - 1] = 1;
                        else if (JarName_R9.Contains("H"))
                        {
                            rackinheater[jno - 1] = 1;
                            //Below code updated on 08-01-2025
                            if (JarName_R9 == "H1") { Rackin_H1 = true; H1_incub_complete = false; }
                            if (JarName_R9 == "H2") { Rackin_H2 = true; H2_incub_complete = false; }
                            if (JarName_R9 == "H3") { Rackin_H3 = true; H3_incub_complete = false; }
                        }
                        /*Added on 20-12-2023 1621*/

                        //////code added on 17-11-2023 for Robotic arm status
                        ////if (RA1_Busystate == true)
                        ////    RA1_Busystate = false;
                        ////if (RA2_Busystate == true)
                        ////    RA2_Busystate = false;

                        r9_incub = System.DateTime.Now;
                        r9_incub = r9_incub.AddSeconds(incubtime_R9);
                        tmr_r9_incub.Enabled = true;
                        tmr_r9_incub.Interval = 1000;

                        /////*Added to check both arms usage*/
                        ////placedJar = JarName_R9; Rno = R9_RNo;
                        ////move_RA_Time = System.DateTime.Now;
                        ////move_RA_Time.AddSeconds(2);
                        ////tmr_move_RA.Enabled = true;
                        ////tmr_move_RA.Interval = 500;
                        /////*Added to check both arms usage*/

                        r9_incub_WOn = System.DateTime.Now;
                        if (incubtime_R9 > 18)
                            r9_incub_WOn = r9_incub_WOn.AddSeconds(incubtime_R9 - 18);
                        else
                            r9_incub_WOn = r9_incub_WOn.AddSeconds(incubtime_R9);

                        r9_incub_Woff = System.DateTime.Now;
                        r9_incub_Woff = r9_incub_Woff.AddSeconds(18);
                        r9_priorChk = System.DateTime.Now;
                        r9_priorChk = r9_priorChk.AddSeconds(incubtime_R9 - 5);

                        //Code Updated on 20122023 1304
                        if ((water_valves_on_off_state[0] == 1) && (JarName_R9 == "W1") && (W1_On_State == false))
                            W1_On_State = true;
                        else if ((water_valves_on_off_state[1] == 1) && (JarName_R9 == "W2") && (W2_On_State == false))
                            W2_On_State = true;
                        else if ((water_valves_on_off_state[2] == 1) && (JarName_R9 == "W3") && (W3_On_State == false))
                            W3_On_State = true;
                        else if ((water_valves_on_off_state[3] == 1) && (JarName_R9 == "W4") && (W4_On_State == false))
                            W4_On_State = true;
                        else if ((water_valves_on_off_state[4] == 1) && (JarName_R9 == "W5") && (W5_On_State == false))
                            W5_On_State = true;
                        else if ((water_valves_on_off_state[5] == 1) && (JarName_R9 == "W6") && (W6_On_State == false))
                            W6_On_State = true;
                        //Code Updated on 20122023 1304

                        if (r9inx == 1)
                        {
                            tmr_nextrack.Enabled = true;
                            nxtrackloading = System.DateTime.Now;
                            if (heatingreqflg == false)
                            {
                                nxtrackloading = nxtrackloading.AddSeconds(nxtracktime + 18);
                            }
                            else
                            {
                                htrdoorintiate = false;
                                proto_htrclose_intiate = false;
                                close_htrdoor();
                                //nxtrackloading = nxtrackloading.AddSeconds(63);
                                if (incubtime_R9 > nxtracktime)
                                    Overlaptime = incubtime_R9 - nxtracktime;
                                else if (incubtime_R9 < nxtracktime)
                                    Overlaptime = nxtracktime - incubtime_R9;
                                ////Overlaptime = Overlaptime + 120;
                                nxtrackloading = nxtrackloading.AddSeconds(Overlaptime);
                            }

                            tmr_nextrack.Interval = 1000;
                        }
                    }
                    else if ((pickedflg_R9 == true) && (r7inx == 0) && proto_htrclose_intiate == true)
                    {
                        if (protocolinitiateflg_R9 == true)
                            protocolrun_R9();
                    }
                }
            }
            catch (Exception d3)
            {
                Communication.writeCommunicationErrorlog(d3.ToString());
            }
        }

        #endregion
        #endregion
        #region Protols details & runnings
        private DataTable FetchprotoMaster()
        {
            DataTable dt = new DataTable();
            SqlConnection cn = new SqlConnection(RequiredVariables.DBConnStr);
            string sqlstr = "";
            sqlstr = "select * from ProtocolMaster order by Slno";
            SqlCommand cmd = new SqlCommand(sqlstr, cn);
            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            sda.Fill(dt);
            if (cn.State == ConnectionState.Open) cn.Close();
            sda.Dispose();
            cmd.Dispose();
            return dt;
        }
        private async void loadprotomaster()
        {
            string sqlstr = "";
            DataTable dt1 = new DataTable();
            dt1 = await Task.Run(() => FetchprotoMaster());
            if (dt1.Rows.Count > 0)
            {
                cbo_protocol.Items.Clear();
                cbo_protocol.Items.Add("Select");
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    cbo_protocol.Items.Add(dt1.Rows[i]["ProtocolName"].ToString());
                }
                cbo_protocol.SelectedIndex = 0;
            }
        }
        private void loadprotocoldetails_db(string protoname)
        {
            string sqlstr = "";
            int cmpval = 1, timeval = 0; ;

            //Adding details to protocol data table
            R1Protorun = new DataTable("R1Proto");
            R1Protorun.Columns.Add("SlNo", Type.GetType("System.Int32"));
            R1Protorun.Columns.Add("JarNo", Type.GetType("System.String"));
            R1Protorun.Columns.Add("RegName", Type.GetType("System.String"));
            R1Protorun.Columns.Add("RegShortName", Type.GetType("System.String"));  //New Field Added on 13-03-2024
            R1Protorun.Columns.Add("RegColorval", Type.GetType("System.Int32"));  //New Field Added on 13-03-2024
            R1Protorun.Columns.Add("Incubtime", Type.GetType("System.Int32"));
            R1Protorun.Columns.Add("Dips", Type.GetType("System.Int32"));
            R1Protorun.Columns.Add("Priority", Type.GetType("System.Int32"));

            R2Protorun = new DataTable("R2Proto");
            R2Protorun.Columns.Add("SlNo", Type.GetType("System.Int32"));
            R2Protorun.Columns.Add("JarNo", Type.GetType("System.String"));
            R2Protorun.Columns.Add("RegName", Type.GetType("System.String"));
            R2Protorun.Columns.Add("RegShortName", Type.GetType("System.String"));  //New Field Added on 13-03-2024
            R2Protorun.Columns.Add("RegColorval", Type.GetType("System.Int32"));  //New Field Added on 13-03-2024
            R2Protorun.Columns.Add("Incubtime", Type.GetType("System.Int32"));
            R2Protorun.Columns.Add("Dips", Type.GetType("System.Int32"));
            R2Protorun.Columns.Add("Priority", Type.GetType("System.Int32"));

            R3Protorun = new DataTable("R3Proto");
            R3Protorun.Columns.Add("SlNo", Type.GetType("System.Int32"));
            R3Protorun.Columns.Add("JarNo", Type.GetType("System.String"));
            R3Protorun.Columns.Add("RegName", Type.GetType("System.String"));
            R3Protorun.Columns.Add("RegShortName", Type.GetType("System.String"));  //New Field Added on 13-03-2024
            R3Protorun.Columns.Add("RegColorval", Type.GetType("System.Int32"));  //New Field Added on 13-03-2024
            R3Protorun.Columns.Add("Incubtime", Type.GetType("System.Int32"));
            R3Protorun.Columns.Add("Dips", Type.GetType("System.Int32"));
            R3Protorun.Columns.Add("Priority", Type.GetType("System.Int32"));

            R4Protorun = new DataTable("R4Proto");
            R4Protorun.Columns.Add("SlNo", Type.GetType("System.Int32"));
            R4Protorun.Columns.Add("JarNo", Type.GetType("System.String"));
            R4Protorun.Columns.Add("RegName", Type.GetType("System.String"));
            R4Protorun.Columns.Add("RegShortName", Type.GetType("System.String"));  //New Field Added on 13-03-2024
            R4Protorun.Columns.Add("RegColorval", Type.GetType("System.Int32"));  //New Field Added on 13-03-2024
            R4Protorun.Columns.Add("Incubtime", Type.GetType("System.Int32"));
            R4Protorun.Columns.Add("Dips", Type.GetType("System.Int32"));
            R4Protorun.Columns.Add("Priority", Type.GetType("System.Int32"));

            R5Protorun = new DataTable("R5Proto");
            R5Protorun.Columns.Add("SlNo", Type.GetType("System.Int32"));
            R5Protorun.Columns.Add("JarNo", Type.GetType("System.String"));
            R5Protorun.Columns.Add("RegName", Type.GetType("System.String"));
            R5Protorun.Columns.Add("RegShortName", Type.GetType("System.String"));  //New Field Added on 13-03-2024
            R5Protorun.Columns.Add("RegColorval", Type.GetType("System.Int32"));  //New Field Added on 13-03-2024
            R5Protorun.Columns.Add("Incubtime", Type.GetType("System.Int32"));
            R5Protorun.Columns.Add("Dips", Type.GetType("System.Int32"));
            R5Protorun.Columns.Add("Priority", Type.GetType("System.Int32"));

            R6Protorun = new DataTable("R6Proto");
            R6Protorun.Columns.Add("SlNo", Type.GetType("System.Int32"));
            R6Protorun.Columns.Add("JarNo", Type.GetType("System.String"));
            R6Protorun.Columns.Add("RegName", Type.GetType("System.String"));
            R6Protorun.Columns.Add("RegShortName", Type.GetType("System.String"));  //New Field Added on 13-03-2024
            R6Protorun.Columns.Add("RegColorval", Type.GetType("System.Int32"));  //New Field Added on 13-03-2024
            R6Protorun.Columns.Add("Incubtime", Type.GetType("System.Int32"));
            R6Protorun.Columns.Add("Dips", Type.GetType("System.Int32"));
            R6Protorun.Columns.Add("Priority", Type.GetType("System.Int32"));

            //New Datatable added for continous mode on 26-12-2023
            R7Protorun = new DataTable("R7Proto");
            R7Protorun.Columns.Add("SlNo", Type.GetType("System.Int32"));
            R7Protorun.Columns.Add("JarNo", Type.GetType("System.String"));
            R7Protorun.Columns.Add("RegName", Type.GetType("System.String"));
            R7Protorun.Columns.Add("RegShortName", Type.GetType("System.String"));  //New Field Added on 13-03-2024
            R7Protorun.Columns.Add("RegColorval", Type.GetType("System.Int32"));  //New Field Added on 13-03-2024
            R7Protorun.Columns.Add("Incubtime", Type.GetType("System.Int32"));
            R7Protorun.Columns.Add("Dips", Type.GetType("System.Int32"));
            R7Protorun.Columns.Add("Priority", Type.GetType("System.Int32"));

            //New Datatable added for continous mode
            R8Protorun = new DataTable("R8Proto");
            R8Protorun.Columns.Add("SlNo", Type.GetType("System.Int32"));
            R8Protorun.Columns.Add("JarNo", Type.GetType("System.String"));
            R8Protorun.Columns.Add("RegName", Type.GetType("System.String"));
            R8Protorun.Columns.Add("RegShortName", Type.GetType("System.String"));  //New Field Added on 13-03-2024
            R8Protorun.Columns.Add("RegColorval", Type.GetType("System.Int32"));  //New Field Added on 13-03-2024
            R8Protorun.Columns.Add("Incubtime", Type.GetType("System.Int32"));
            R8Protorun.Columns.Add("Dips", Type.GetType("System.Int32"));
            R8Protorun.Columns.Add("Priority", Type.GetType("System.Int32"));

            //New Datatable added for continous mode
            R9Protorun = new DataTable("R9Proto");
            R9Protorun.Columns.Add("SlNo", Type.GetType("System.Int32"));
            R9Protorun.Columns.Add("JarNo", Type.GetType("System.String"));
            R9Protorun.Columns.Add("RegName", Type.GetType("System.String"));
            R9Protorun.Columns.Add("RegShortName", Type.GetType("System.String"));  //New Field Added on 13-03-2024
            R9Protorun.Columns.Add("RegColorval", Type.GetType("System.Int32"));  //New Field Added on 13-03-2024
            R9Protorun.Columns.Add("Incubtime", Type.GetType("System.Int32"));
            R9Protorun.Columns.Add("Dips", Type.GetType("System.Int32"));
            R9Protorun.Columns.Add("Priority", Type.GetType("System.Int32"));

            if (con.ConnectionString == "") con.ConnectionString = RequiredVariables.DBConnStr;
            sqlstr = "";
            if (facusrprotocoltype == "FP")
                sqlstr = "select Slno,JarNo, Temp_Reagent, IncubationTime,No_of_Dips from FactoryProtocolDetails where ProtocolName = '" + protoname + "' order by slno";
            else if (facusrprotocoltype == "UP")
            {
                sqlstr = "select Slno,JarNo, Temp_Reagent, IncubationTime,No_of_Dips from UserProtocolDetails where ProtocolName = '" + protoname + "' order by slno";
            }
            SqlCommand cmd = new SqlCommand(sqlstr, con);
            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            DataTable dt1 = new DataTable();
            sda.Fill(dt1);
            if (dt1.Rows.Count > 0)
            {
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    if ((i == 0) && (dt1.Rows[i]["JarNo"].ToString() == "Heater"))
                    {
                        settemp = Convert.ToInt32(dt1.Rows[i]["Temp_Reagent"].ToString());
                        heatingreqflg = true;
                        incubtime_Temp = ((Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(0, 2)) * 60) + Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(3, 2)));  //Incubtime 
                        /*New Code added on 23-11-2024 1038 inorder to reduce the time between racks and get high through put*/
                        R1Protorun.Rows.Add();
                        R2Protorun.Rows.Add();
                        R3Protorun.Rows.Add();

                        //1st Rack Details
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["SlNo"] = (R1Protorun.Rows.Count);  //Serial No  
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["JarNo"] = "L1";  //Jar No  
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Loading";  //Heating                        
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["RegShortName"] = "Loading";   //New field Added on 13-03-2024 for regname
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = "0";  //Incubtime 
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Dips"] = "0";  //Number of Dips                            

                        //2nd Rack Details
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["SlNo"] = (R2Protorun.Rows.Count);  //Serial No  
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["JarNo"] = "L2";  //Jar No  
                        R2Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Loading";  //Heating
                        R2Protorun.Rows[R1Protorun.Rows.Count - 1]["RegShortName"] = "Loading";   //New field Added on 13-03-2024 for regname
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Incubtime"] = "0";  //Incubtime 
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Dips"] = "0"; //Number of Dips                            

                        //3rd Rack Details
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["SlNo"] = (R3Protorun.Rows.Count);  //Serial No  
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["JarNo"] = "L3";  //Jar No  
                        R3Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Loading";  //Heating
                        R3Protorun.Rows[R1Protorun.Rows.Count - 1]["RegShortName"] = "Loading";   //New field Added on 13-03-2024 for regname
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["Incubtime"] = "0"; //Incubtime 
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["Dips"] = "0"; //Number of Dips 

                        //Adding Heaters to the Protocol Table
                        R1Protorun.Rows.Add();
                        R2Protorun.Rows.Add();
                        R3Protorun.Rows.Add();

                        //1st Rack Details
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["SlNo"] = (R1Protorun.Rows.Count);  //Serial No  
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["JarNo"] = "H1";  //Jar No  
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Heating";  //Heating
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["RegShortName"] = "Heating";   //New field Added on 13-03-2024 for regname
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = incubtime_Temp.ToString();// "0";  //Incubtime 
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Dips"] = "0";  //Number of Dips                            

                        //2nd Rack Details
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["SlNo"] = (R2Protorun.Rows.Count);  //Serial No  
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["JarNo"] = "H2";  //Jar No  
                        R2Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Heating";  //Heating
                        R2Protorun.Rows[R1Protorun.Rows.Count - 1]["RegShortName"] = "Heating";   //New field Added on 13-03-2024 for regname
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Incubtime"] = incubtime_Temp.ToString();//"0";  //Incubtime 
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Dips"] = "0"; //Number of Dips                            

                        //3rd Rack Details
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["SlNo"] = (R3Protorun.Rows.Count);  //Serial No  
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["JarNo"] = "H3";  //Jar No  
                        R3Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Heating";  //Heating
                        R3Protorun.Rows[R1Protorun.Rows.Count - 1]["RegShortName"] = "Heating";   //New field Added on 13-03-2024 for regname
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["Incubtime"] = incubtime_Temp.ToString();//"0"; //Incubtime 
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["Dips"] = "0"; //Number of Dips 
                    }
                    else if ((i == 0) && (dt1.Rows[i]["JarNo"].ToString() != "Heater"))
                    {
                        heatingreqflg = false;
                        //Adding Loading Jars to the Protocol Table
                        R1Protorun.Rows.Add();
                        R2Protorun.Rows.Add();
                        R3Protorun.Rows.Add();

                        //1st Rack Details
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["SlNo"] = (R1Protorun.Rows.Count);  //Serial No  
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["JarNo"] = "L1";  //Jar No  
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Loading";  //Heating                        
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["RegShortName"] = "Loading";   //New field Added on 13-03-2024 for regname
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = "0";  //Incubtime 
                        R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Dips"] = "0";  //Number of Dips                            

                        //2nd Rack Details
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["SlNo"] = (R2Protorun.Rows.Count);  //Serial No  
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["JarNo"] = "L2";  //Jar No  
                        R2Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Loading";  //Heating
                        R2Protorun.Rows[R1Protorun.Rows.Count - 1]["RegShortName"] = "Loading";   //New field Added on 13-03-2024 for regname
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Incubtime"] = "0";  //Incubtime 
                        R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Dips"] = "0"; //Number of Dips                            

                        //3rd Rack Details
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["SlNo"] = (R3Protorun.Rows.Count);  //Serial No  
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["JarNo"] = "L3";  //Jar No  
                        R3Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Loading";  //Heating
                        R3Protorun.Rows[R1Protorun.Rows.Count - 1]["RegShortName"] = "Loading";   //New field Added on 13-03-2024 for regname
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["Incubtime"] = "0"; //Incubtime 
                        R3Protorun.Rows[R3Protorun.Rows.Count - 1]["Dips"] = "0"; //Number of Dips 

                        if ((dt1.Rows[i]["JarNo"].ToString().Contains("J")) || (dt1.Rows[i]["JarNo"].ToString().Contains("W")) || (dt1.Rows[i]["JarNo"].ToString().Contains("U")))
                        {
                            R1Protorun.Rows.Add();
                            R2Protorun.Rows.Add();
                            R3Protorun.Rows.Add();
                            //1st Rack Details
                            R1Protorun.Rows[R1Protorun.Rows.Count - 1]["SlNo"] = (R1Protorun.Rows.Count);  //Serial No  
                            R1Protorun.Rows[R1Protorun.Rows.Count - 1]["JarNo"] = dt1.Rows[i]["JarNo"].ToString();  //Jar No  
                            if (string.IsNullOrEmpty(dt1.Rows[i]["IncubationTime"].ToString()))
                            {
                                R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = (Convert.ToInt32("0") * 60);  //Incubtime 
                            }
                            else
                            {
                                R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = ((Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(0, 2)) * 60) + Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(3, 2))).ToString();  //Incubtime 
                            }
                            R1Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = dt1.Rows[i]["Temp_Reagent"].ToString();  //Reagent Name  
                            R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Dips"] = dt1.Rows[i]["No_of_Dips"].ToString();  //Number of Dips                            

                            //2nd Rack Details
                            R2Protorun.Rows[R2Protorun.Rows.Count - 1]["SlNo"] = (R2Protorun.Rows.Count);  //Serial No  
                            R2Protorun.Rows[R2Protorun.Rows.Count - 1]["JarNo"] = dt1.Rows[i]["JarNo"].ToString();  //Jar No  
                            if (string.IsNullOrEmpty(dt1.Rows[i]["IncubationTime"].ToString()))
                            {
                                R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Incubtime"] = (Convert.ToInt32("0") * 60);  //Incubtime 
                            }
                            else
                            {
                                R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Incubtime"] = ((Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(0, 2)) * 60) + Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(3, 2))).ToString();  //Incubtime 
                            }
                            R2Protorun.Rows[R2Protorun.Rows.Count - 1]["RegName"] = dt1.Rows[i]["Temp_Reagent"].ToString();  //Reagent Name  
                            R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Dips"] = dt1.Rows[i]["No_of_Dips"].ToString();  //Number of Dips                            

                            //3rd Rack Details
                            R3Protorun.Rows[R3Protorun.Rows.Count - 1]["SlNo"] = (R3Protorun.Rows.Count);  //Serial No  
                            R3Protorun.Rows[R3Protorun.Rows.Count - 1]["JarNo"] = dt1.Rows[i]["JarNo"].ToString();  //Jar No  
                            if (string.IsNullOrEmpty(dt1.Rows[i]["IncubationTime"].ToString()))
                            {
                                R3Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = (Convert.ToInt32("0") * 60);  //Incubtime 
                            }
                            else
                            {
                                R3Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = ((Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(0, 2)) * 60) + Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(3, 2))).ToString();  //Incubtime 
                            }
                            R3Protorun.Rows[R3Protorun.Rows.Count - 1]["RegName"] = dt1.Rows[i]["Temp_Reagent"].ToString();  //Reagent Name  
                            R3Protorun.Rows[R3Protorun.Rows.Count - 1]["Dips"] = dt1.Rows[i]["No_of_Dips"].ToString();  //Number of Dips                            
                        }
                    }
                    else if (i > 0)
                    {
                        if ((dt1.Rows[i]["JarNo"].ToString().Contains("J")) || (dt1.Rows[i]["JarNo"].ToString().Contains("W")) || (dt1.Rows[i]["JarNo"].ToString().Contains("U")))
                        {
                            R1Protorun.Rows.Add();
                            R2Protorun.Rows.Add();
                            R3Protorun.Rows.Add();
                            //1st Rack Details
                            R1Protorun.Rows[R1Protorun.Rows.Count - 1]["SlNo"] = (R1Protorun.Rows.Count);  //Serial No  
                            R1Protorun.Rows[R1Protorun.Rows.Count - 1]["JarNo"] = dt1.Rows[i]["JarNo"].ToString();  //Jar No  
                            //R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = ((Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(0, 2)) * 60) + Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(3, 2))).ToString();  //Incubtime 
                            if (string.IsNullOrEmpty(dt1.Rows[i]["IncubationTime"].ToString()))
                            {
                                R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = (Convert.ToInt32("0") * 60);  //Incubtime 
                            }
                            else
                            {
                                R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = ((Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(0, 2)) * 60) + Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(3, 2))).ToString();  //Incubtime 
                            }
                            R1Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = dt1.Rows[i]["Temp_Reagent"].ToString();  //Reagent Name  
                            R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Dips"] = dt1.Rows[i]["No_of_Dips"].ToString();  //Number of Dips                            

                            //2nd Rack Details
                            R2Protorun.Rows[R2Protorun.Rows.Count - 1]["SlNo"] = (R2Protorun.Rows.Count);  //Serial No  
                            R2Protorun.Rows[R2Protorun.Rows.Count - 1]["JarNo"] = dt1.Rows[i]["JarNo"].ToString();  //Jar No  
                            //R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Incubtime"] = ((Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(0, 2)) * 60) + Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(3, 2))).ToString();  //Incubtime 
                            if (string.IsNullOrEmpty(dt1.Rows[i]["IncubationTime"].ToString()))
                            {
                                R2Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = (Convert.ToInt32("0") * 60);  //Incubtime 
                            }
                            else
                            {
                                R2Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = ((Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(0, 2)) * 60) + Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(3, 2))).ToString();  //Incubtime 
                            }
                            R2Protorun.Rows[R2Protorun.Rows.Count - 1]["RegName"] = dt1.Rows[i]["Temp_Reagent"].ToString();  //Reagent Name  
                            R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Dips"] = dt1.Rows[i]["No_of_Dips"].ToString();  //Number of Dips                            

                            //3rd Rack Details
                            R3Protorun.Rows[R3Protorun.Rows.Count - 1]["SlNo"] = (R3Protorun.Rows.Count);  //Serial No  
                            R3Protorun.Rows[R3Protorun.Rows.Count - 1]["JarNo"] = dt1.Rows[i]["JarNo"].ToString();  //Jar No  
                            //R3Protorun.Rows[R3Protorun.Rows.Count - 1]["Incubtime"] = ((Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(0, 2)) * 60) + Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(3, 2))).ToString();  //Incubtime 
                            if (string.IsNullOrEmpty(dt1.Rows[i]["IncubationTime"].ToString()))
                            {
                                R3Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = (Convert.ToInt32("0") * 60);  //Incubtime 
                            }
                            else
                            {
                                R3Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = ((Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(0, 2)) * 60) + Convert.ToInt32(dt1.Rows[i]["IncubationTime"].ToString().Substring(3, 2))).ToString();  //Incubtime 
                            }
                            R3Protorun.Rows[R3Protorun.Rows.Count - 1]["RegName"] = dt1.Rows[i]["Temp_Reagent"].ToString();  //Reagent Name  
                            R3Protorun.Rows[R3Protorun.Rows.Count - 1]["Dips"] = dt1.Rows[i]["No_of_Dips"].ToString();  //Number of Dips
                            //Updating the reagent Names to jarnumbers
                            update_reagentsnames(dt1.Rows[i]["JarNo"].ToString(), dt1.Rows[i]["Temp_Reagent"].ToString());
                        }
                    }
                }

                R1Protorun.Rows.Add();
                R2Protorun.Rows.Add();
                R3Protorun.Rows.Add();
                //1st Rack Details
                R1Protorun.Rows[R1Protorun.Rows.Count - 1]["SlNo"] = (R1Protorun.Rows.Count);  //Serial No  
                R1Protorun.Rows[R1Protorun.Rows.Count - 1]["JarNo"] = "U1";  //Jar No  
                R1Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Unloading";  //Heating
                R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Incubtime"] = "0";  //Incubtime 
                R1Protorun.Rows[R1Protorun.Rows.Count - 1]["Dips"] = "0";  //Number of Dips                            

                //2nd Rack Details
                R2Protorun.Rows[R2Protorun.Rows.Count - 1]["SlNo"] = (R2Protorun.Rows.Count);  //Serial No  
                R2Protorun.Rows[R2Protorun.Rows.Count - 1]["JarNo"] = "U2";  //Jar No  
                R2Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Unloading";  //Heating
                R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Incubtime"] = "0";  //Incubtime 
                R2Protorun.Rows[R2Protorun.Rows.Count - 1]["Dips"] = "0"; //Number of Dips                            

                //3rd Rack Details
                R3Protorun.Rows[R3Protorun.Rows.Count - 1]["SlNo"] = (R3Protorun.Rows.Count);  //Serial No  
                R3Protorun.Rows[R3Protorun.Rows.Count - 1]["JarNo"] = "U3";  //Jar No  
                R3Protorun.Rows[R1Protorun.Rows.Count - 1]["RegName"] = "Unloading";  //Heating
                R3Protorun.Rows[R3Protorun.Rows.Count - 1]["Incubtime"] = "0"; //Incubtime 
                R3Protorun.Rows[R3Protorun.Rows.Count - 1]["Dips"] = "0"; //Number of Dips               
            }

            //Adding continue mode required variables
            for (int i = 0; i < R1Protorun.Rows.Count; i++)
            {
                R4Protorun.Rows.Add();
                R5Protorun.Rows.Add();
                R6Protorun.Rows.Add();
                //Added on 26-12-2023
                R7Protorun.Rows.Add();
                R8Protorun.Rows.Add();
                R9Protorun.Rows.Add();
                //Added on 26-12-2023

                //4th Rack Details
                R4Protorun.Rows[R4Protorun.Rows.Count - 1]["SlNo"] = Convert.ToInt32(R1Protorun.Rows[i]["SlNo"].ToString());  //Serial No  
                R4Protorun.Rows[R4Protorun.Rows.Count - 1]["JarNo"] = R1Protorun.Rows[i]["JarNo"].ToString();  //Jar No  
                //R4Protorun.Rows[R4Protorun.Rows.Count - 1]["Incubtime"] = Convert.ToInt32(R1Protorun.Rows[i]["Incubtime"].ToString()); //Incubation Time
                R4Protorun.Rows[R4Protorun.Rows.Count - 1]["Incubtime"] = Convert.ToInt32(R1Protorun.Rows[i]["Incubtime"].ToString()); //Incubation Time
                R4Protorun.Rows[R4Protorun.Rows.Count - 1]["RegName"] = R1Protorun.Rows[i]["RegName"].ToString();  //Reagent Name  
                R4Protorun.Rows[R4Protorun.Rows.Count - 1]["Dips"] = R1Protorun.Rows[i]["Dips"].ToString();  //Number of Dips                            

                //5th Rack Details
                R5Protorun.Rows[R5Protorun.Rows.Count - 1]["SlNo"] = Convert.ToInt32(R1Protorun.Rows[i]["SlNo"].ToString());  //Serial No  
                R5Protorun.Rows[R5Protorun.Rows.Count - 1]["JarNo"] = R1Protorun.Rows[i]["JarNo"].ToString();  //Jar No  
                R5Protorun.Rows[R5Protorun.Rows.Count - 1]["Incubtime"] = Convert.ToInt32(R1Protorun.Rows[i]["Incubtime"].ToString()); //Incubation Time
                R5Protorun.Rows[R5Protorun.Rows.Count - 1]["RegName"] = R1Protorun.Rows[i]["RegName"].ToString();  //Reagent Name  
                R5Protorun.Rows[R5Protorun.Rows.Count - 1]["Dips"] = R1Protorun.Rows[i]["Dips"].ToString();  //Number of Dips                            

                //6th Rack Details
                R6Protorun.Rows[R6Protorun.Rows.Count - 1]["SlNo"] = Convert.ToInt32(R1Protorun.Rows[i]["SlNo"].ToString());  //Serial No  
                R6Protorun.Rows[R6Protorun.Rows.Count - 1]["JarNo"] = R1Protorun.Rows[i]["JarNo"].ToString();  //Jar No  
                R6Protorun.Rows[R6Protorun.Rows.Count - 1]["Incubtime"] = Convert.ToInt32(R1Protorun.Rows[i]["Incubtime"].ToString()); //Incubation Time
                R6Protorun.Rows[R6Protorun.Rows.Count - 1]["RegName"] = R1Protorun.Rows[i]["RegName"].ToString();  //Reagent Name  
                R6Protorun.Rows[R6Protorun.Rows.Count - 1]["Dips"] = R1Protorun.Rows[i]["Dips"].ToString();  //Number of Dips                            

                //7th Rack Details
                R7Protorun.Rows[R4Protorun.Rows.Count - 1]["SlNo"] = Convert.ToInt32(R1Protorun.Rows[i]["SlNo"].ToString());  //Serial No  
                R7Protorun.Rows[R4Protorun.Rows.Count - 1]["JarNo"] = R1Protorun.Rows[i]["JarNo"].ToString();  //Jar No                  
                R7Protorun.Rows[R4Protorun.Rows.Count - 1]["Incubtime"] = Convert.ToInt32(R1Protorun.Rows[i]["Incubtime"].ToString()); //Incubation Time
                R7Protorun.Rows[R4Protorun.Rows.Count - 1]["RegName"] = R1Protorun.Rows[i]["RegName"].ToString();  //Reagent Name  
                R7Protorun.Rows[R4Protorun.Rows.Count - 1]["Dips"] = R1Protorun.Rows[i]["Dips"].ToString();  //Number of Dips                            

                //8th Rack Details
                R8Protorun.Rows[R5Protorun.Rows.Count - 1]["SlNo"] = Convert.ToInt32(R1Protorun.Rows[i]["SlNo"].ToString());  //Serial No  
                R8Protorun.Rows[R5Protorun.Rows.Count - 1]["JarNo"] = R1Protorun.Rows[i]["JarNo"].ToString();  //Jar No  
                R8Protorun.Rows[R5Protorun.Rows.Count - 1]["Incubtime"] = Convert.ToInt32(R1Protorun.Rows[i]["Incubtime"].ToString()); //Incubation Time
                R8Protorun.Rows[R5Protorun.Rows.Count - 1]["RegName"] = R1Protorun.Rows[i]["RegName"].ToString();  //Reagent Name  
                R8Protorun.Rows[R5Protorun.Rows.Count - 1]["Dips"] = R1Protorun.Rows[i]["Dips"].ToString();  //Number of Dips                            

                //9th Rack Details
                R9Protorun.Rows[R6Protorun.Rows.Count - 1]["SlNo"] = Convert.ToInt32(R1Protorun.Rows[i]["SlNo"].ToString());  //Serial No  
                R9Protorun.Rows[R6Protorun.Rows.Count - 1]["JarNo"] = R1Protorun.Rows[i]["JarNo"].ToString();  //Jar No  
                R9Protorun.Rows[R6Protorun.Rows.Count - 1]["Incubtime"] = Convert.ToInt32(R1Protorun.Rows[i]["Incubtime"].ToString()); //Incubation Time
                R9Protorun.Rows[R6Protorun.Rows.Count - 1]["RegName"] = R1Protorun.Rows[i]["RegName"].ToString();  //Reagent Name  
                R9Protorun.Rows[R6Protorun.Rows.Count - 1]["Dips"] = R1Protorun.Rows[i]["Dips"].ToString();  //Number of Dips                            

                if (i == 0)
                {
                    ////if (heatingreqflg == true)
                    ////{
                    ////    R4Protorun.Rows[R4Protorun.Rows.Count - 1]["JarNo"] = "H1";  //Jar No  
                    ////    R5Protorun.Rows[R5Protorun.Rows.Count - 1]["JarNo"] = "H2";  //Jar No  
                    ////    R6Protorun.Rows[R6Protorun.Rows.Count - 1]["JarNo"] = "H3";  //Jar No  
                    ////    //Added on 26-11-2023
                    ////    R7Protorun.Rows[R4Protorun.Rows.Count - 1]["JarNo"] = "H1";  //Jar No  
                    ////    R8Protorun.Rows[R5Protorun.Rows.Count - 1]["JarNo"] = "H2";  //Jar No  
                    ////    R9Protorun.Rows[R6Protorun.Rows.Count - 1]["JarNo"] = "H3";  //Jar No  
                    ////}
                    ////else if (heatingreqflg == false)
                    ////{
                    ////    R4Protorun.Rows[R4Protorun.Rows.Count - 1]["JarNo"] = "L1";  //Jar No  
                    ////    R5Protorun.Rows[R5Protorun.Rows.Count - 1]["JarNo"] = "L2";  //Jar No  
                    ////    R6Protorun.Rows[R6Protorun.Rows.Count - 1]["JarNo"] = "L3";  //Jar No  
                    ////    //Added on 26-12-2023
                    ////    R7Protorun.Rows[R4Protorun.Rows.Count - 1]["JarNo"] = "L1";  //Jar No  
                    ////    R8Protorun.Rows[R5Protorun.Rows.Count - 1]["JarNo"] = "L2";  //Jar No  
                    ////    R9Protorun.Rows[R6Protorun.Rows.Count - 1]["JarNo"] = "L3";  //Jar No  
                    ////}

                    R4Protorun.Rows[R4Protorun.Rows.Count - 1]["JarNo"] = "L1";  //Jar No  
                    R5Protorun.Rows[R5Protorun.Rows.Count - 1]["JarNo"] = "L2";  //Jar No  
                    R6Protorun.Rows[R6Protorun.Rows.Count - 1]["JarNo"] = "L3";  //Jar No  
                                                                                 //Added on 26-12-2023
                    R7Protorun.Rows[R7Protorun.Rows.Count - 1]["JarNo"] = "L1";  //Jar No  
                    R8Protorun.Rows[R8Protorun.Rows.Count - 1]["JarNo"] = "L2";  //Jar No  
                    R9Protorun.Rows[R9Protorun.Rows.Count - 1]["JarNo"] = "L3";  //Jar No  
                }
                else if ((i == 1) && (heatingreqflg == true))
                {
                    R4Protorun.Rows[R4Protorun.Rows.Count - 1]["JarNo"] = "H1";  //Jar No  
                    R5Protorun.Rows[R5Protorun.Rows.Count - 1]["JarNo"] = "H2";  //Jar No  
                    R6Protorun.Rows[R6Protorun.Rows.Count - 1]["JarNo"] = "H3";  //Jar No  
                    //Added on 26-11-2023
                    R7Protorun.Rows[R7Protorun.Rows.Count - 1]["JarNo"] = "H1";  //Jar No  
                    R8Protorun.Rows[R8Protorun.Rows.Count - 1]["JarNo"] = "H2";  //Jar No  
                    R9Protorun.Rows[R9Protorun.Rows.Count - 1]["JarNo"] = "H3";  //Jar No  
                }

            }
            R4Protorun.Rows[R4Protorun.Rows.Count - 1]["JarNo"] = "U4";  //Jar No  
            R5Protorun.Rows[R5Protorun.Rows.Count - 1]["JarNo"] = "U5";  //Jar No  
            R6Protorun.Rows[R6Protorun.Rows.Count - 1]["JarNo"] = "U6";  //Jar No  
            //code added on 26-12-2023
            R7Protorun.Rows[R7Protorun.Rows.Count - 1]["JarNo"] = "U1";  //Jar No  
            R8Protorun.Rows[R8Protorun.Rows.Count - 1]["JarNo"] = "U2";  //Jar No  
            R9Protorun.Rows[R9Protorun.Rows.Count - 1]["JarNo"] = "U3";  //Jar No  

            int mxevtreccnt = 0;
            maxtimcnt = 0;
            if (R1Protorun.Rows.Count > 0)
            {
                int prevtim = 0, currtime = 0, cntclr = 0,prioritytime=0;
                int maxDipcnt = 0, maxDroptime = 0; //Declared on 24-04-2024 in order avoid clashing while dipping the rack in Jars
                                                    //Add code to take the maximum time value
                                                    ////maxevttime = Convert.ToInt32(R1Protorun.AsEnumerable().Max(row => row["Incubtime"]));
                maxDipcnt=0;
                if (heatingreqflg == false)
                    cntclr = 0;
                else if (heatingreqflg == true)
                    cntclr = 2;
                for (int k = cntclr; k < R1Protorun.Rows.Count; k++)  //for (int k = 0; k < R1Protorun.Rows.Count; k++)
                {
                    if (k == (cntclr + 1))
                    {
                        maxevttime = Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString());
                        minevttime = Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString());  //Taking minimum event time
                                                                                                   //This below code if statement added on 04-07-2024 1250 as suggested by Kamal Sir
                        if (R1Protorun.Rows[k]["JarNo"].ToString() == "W1")
                            washtime = maxevttime;
                        else
                            washtime = 0;
                    }
                    else if (k > (cntclr + 1))
                    {
                        if (minevttime > Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString()))
                        {
                            if ((Convert.ToInt32(R1Protorun.Rows[k]["Dips"].ToString()) == 0) && (Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString()) > 10))
                                minevttime = Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString());
                        }

                        if (maxevttime < Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString()))
                        {
                            maxevttime = Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString());
                            mxevtreccnt = k; //Added on 05-07-2024 1231
                        }

                        //This below code if statement added on 04-07-2024 1250 as suggested by Kamal Sir
                        if (R1Protorun.Rows[k]["JarNo"].ToString() == "W1")
                        {
                            if (washtime < Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString()))
                                washtime = Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString());
                        }

                    }
                    if((Convert.ToInt32(R1Protorun.Rows[k]["Dips"].ToString()) > 0)) 
                    {
                        maxDipcnt = maxDipcnt + Convert.ToInt32(R1Protorun.Rows[k]["Dips"].ToString());
                    }
                    if ((Convert.ToInt32(R1Protorun.Rows[k]["Dips"].ToString()) <= 0) && (Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString()) <= 30))
                    {
                        prioritytime = prioritytime + Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString());
                    }
                }

                ////var query = R1Protorun.AsEnumerable().Max(row => row["Incubtime"]);
                ////int maxID = (int)R1Protorun.Compute("Max(Incubtime)", "");
                totalprototime = 0;
                for (int k = 0; k < R1Protorun.Rows.Count; k++)
                {
                    if (k == 0)
                    {
                        if (R1Protorun.Rows[k]["JarNo"].ToString() == "H1")
                        {
                            r1tim_arr[maxtimcnt] = 5; //Open the heater door
                            maxtimcnt++;
                            r1tim_arr[maxtimcnt] = 7; //Pick the rack from Jar
                            maxtimcnt++;
                            r1tim_arr[maxtimcnt] = 8; //Place the rack from Jar
                            maxtimcnt++;
                            r1tim_arr[maxtimcnt] = 5; //Close the heater door
                            maxtimcnt++;
                            totalprototime = 25;
                        }
                        else if (R1Protorun.Rows[k]["JarNo"].ToString() == "L1")
                        {
                            r1tim_arr[maxtimcnt] = 7; //Pick the rack from Loading Jar
                            maxtimcnt++;
                            totalprototime = 7;
                        }
                    }
                    else if ((k > 0) && (k < (R1Protorun.Rows.Count - 1)))
                    {
                        if (Convert.ToInt32(R1Protorun.Rows[k]["Dips"].ToString()) > 0)
                        {
                            r1tim_arr[maxtimcnt] = 5 * Convert.ToInt32(R1Protorun.Rows[k]["Dips"].ToString()); //Dip Rack in Jar
                            maxtimcnt++;
                            r1tim_arr[maxtimcnt] = 7; //Place Rack in Jar
                            maxtimcnt++;
                            r1tim_arr[maxtimcnt] = Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString()); //Dip Rack in Jar
                            maxtimcnt++;
                            r1tim_arr[maxtimcnt] = 8; //Pick Rack from Jar
                            maxtimcnt++;
                            totalprototime = totalprototime + (5 * Convert.ToInt32(R1Protorun.Rows[k]["Dips"].ToString())) + 6 + 5 + Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString());
                        }
                        else if (Convert.ToInt32(R1Protorun.Rows[k]["Dips"].ToString()) <= 0)
                        {
                            r1tim_arr[maxtimcnt] = 8; //Place Rack in Jar
                            maxtimcnt++;
                            r1tim_arr[maxtimcnt] = Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString()); //Dip Rack in Jar
                            maxtimcnt++;
                            r1tim_arr[maxtimcnt] = 7; //Pick Rack from Jar
                            maxtimcnt++;
                            totalprototime = totalprototime + 8 + 7 + Convert.ToInt32(R1Protorun.Rows[k]["Incubtime"].ToString());
                        }
                        else if (R1Protorun.Rows[k]["JarNo"].ToString() == "H1")
                        {
                            r1tim_arr[maxtimcnt] = 5; //Open the heater door
                            maxtimcnt++;
                            r1tim_arr[maxtimcnt] = 7; //Pick the rack from Jar
                            maxtimcnt++;
                            r1tim_arr[maxtimcnt] = 8; //Place the rack from Jar
                            maxtimcnt++;
                            r1tim_arr[maxtimcnt] = 5; //Close the heater door
                            maxtimcnt++;
                            totalprototime = 25;
                        }
                    }
                    else if (k == R1Protorun.Rows.Count - 1)
                    {
                        r1tim_arr[maxtimcnt] = 27; //Placing rack in unloading Jar
                        maxtimcnt++;
                        totalprototime = totalprototime + 27;
                    }
                }
                r1tim_arr[maxtimcnt] = '\0'; //Updating null to last array variable

                //Loading timing details to time arrays
                r1times_arr = new DateTime[maxtimcnt];
                r2times_arr = new DateTime[maxtimcnt];
                r3times_arr = new DateTime[maxtimcnt];

                timeval = 16;  ////27;  //18
                ////nxtracktime = maxevttime + 11;
                //////nxtracktime = maxevttime + 18;
                //////nxtracktime = maxevttime + 27;

                ////////nxtracktime = maxevttime + timeval;
                ////////////////nxtracktime = maxevttime + 29 + (maxDipcnt * 6) + maxDroptime + 12 + 15;
                nxtracktime = maxevttime + 29 + (maxDipcnt * 6) + maxDroptime + 27 + prioritytime;
                ///////////nxtracktime = maxevttime + timeval + (maxDipcnt * 6) + maxDroptime + 16;
                //* Commented to run the proto in shortest time. if prototest fail then this will be uncommented
                #region Time Comparing
                //Below code commented on 15-11-2023 and this has to check with machine to achive shortest time without collision
                DateTime d1, d2, d3;

                /* 
                 * //-- Below code commented for testing the device
                 * Boolean valuematch = false;
                L1:
                d1 = System.DateTime.Now;
                d2 = System.DateTime.Now;
                d3 = System.DateTime.Now;

                for (int i = 0; i < maxtimcnt; i++)
                {
                    d1 = d1.AddSeconds(r1tim_arr[i]);
                    r1times_arr[i] = d1;
                    d2 = d1.AddSeconds(nxtracktime);
                    r2times_arr[i] = d2;
                    d3 = d2.AddSeconds(nxtracktime);
                    r3times_arr[i] = d3;
                }
                //Comparing the times
                TimeSpan ts = new TimeSpan();
                valuematch = false;
                for (int i = 0; i < maxtimcnt; i++)
                {
                    if (nxtracktime >= totalprototime)
                    {
                        nxtracktime = (int)totalprototime + 5;
                        break;
                    }
                    d2 = r2times_arr[i];
                    //Comparing timing with first rack and second rack
                    for (int j = 0; j < maxtimcnt; j++)
                    {
                        d1 = r1times_arr[j];
                        if (d2 > d1)
                            ts = d2.Subtract(d1);
                        else if (d1 > d2)
                            ts = d1.Subtract(d2);

                        if (ts.TotalSeconds < timeval)  //10seconds , 18 Seconds 
                        {
                            cmpval++;
                            //nxtracktime = (int)ds1 * cmpval; 
                            //nxtracktime = nxtracktime + 60;
                            //nxtracktime = nxtracktime + ((maxevttime + 18) /10);
                            nxtracktime = nxtracktime + timeval; //Incrementing every time 9 seconds
                            goto L1;
                        }
                    }

                    if (nxtracktime >= totalprototime)
                    {
                        nxtracktime = (int)totalprototime + 5;
                        break;
                    }

                    d3 = r3times_arr[i];
                    //Comparing timing with first rack and third rack
                    for (int j = 0; j < maxtimcnt; j++)
                    {
                        d1 = r1times_arr[j];
                        if (d3 > d1)
                            ts = d3.Subtract(d1);
                        else if (d1 > d3)
                            ts = d1.Subtract(d3);

                        if (ts.TotalSeconds < timeval)
                        {
                            cmpval++;
                            //nxtracktime = (int)ds1 * cmpval; 
                            //nxtracktime = nxtracktime + 60;
                            //nxtracktime = nxtracktime + ((maxevttime + 18) /10);
                            nxtracktime = nxtracktime + timeval; //Incrementing every time 18 seconds
                            goto L1;
                        }
                    }
                    if (nxtracktime >= totalprototime)
                    {
                        nxtracktime = (int)totalprototime + 5;
                        break;
                    }
                    //Comparing timing with second rack and third rack
                    for (int j = 0; j < maxtimcnt; j++)
                    {
                        d2 = r2times_arr[j];
                        if (d3 > d2)
                            ts = d3.Subtract(d2);
                        else if (d2 > d3)
                            ts = d2.Subtract(d3);
                        if (ts.TotalSeconds < 18)
                        {
                            cmpval++;
                            //nxtracktime = (int)ds1 * cmpval; 
                            //nxtracktime = nxtracktime + 60;
                            //nxtracktime = nxtracktime + ((maxevttime + 18) /10);
                            nxtracktime = nxtracktime + timeval; //Incrementing every time 9 seconds
                            goto L1;
                        }
                    }
                    if (nxtracktime >= totalprototime)
                    {
                        nxtracktime = (int)totalprototime + 5;
                        break;
                    }
                }
                
                */ //Above code commented on 15-11-2023 to test the protocol run with machine

                /*
                 * New code added on 22-08-202 to reduce the time gap between two racks while loading the racks from heater jar to normal jar in process.
                 * In above loop we compared the timings for first rack and second rack. Now we are updating the timing for 3rd and comparing timings with 1st rack
                
                d1 = System.DateTime.Now;
                d2 = System.DateTime.Now;
                for (int i = 0; i < maxtimcnt; i++)
                {
                    d1 = r2times_arr[i];
                    d2 = d1.AddSeconds(nxtracktime);
                    r3times_arr[i] = d2;
                }

                for (int i = 0; i < maxtimcnt; i++)
                {
                    if (nxtracktime >= totalprototime)
                    {
                        nxtracktime = (int)totalprototime + 5;
                        break;
                    }
                    d2 = r3times_arr[i];
                    for (int j = 0; j < maxtimcnt; j++)    //Comparing timing with first rack and second rack
                    {
                        d1 = r1times_arr[j];
                        if (d2 > d1)
                            ts = d2.Subtract(d1);
                        else if (d1 > d2)
                            ts = d1.Subtract(d2);

                        if (ts.TotalSeconds < 18)  //27seconds  Prev given 10 seconds
                        {
                            cmpval++;
                            nxtracktime = nxtracktime + 18; //Incrementing every time 9 seconds
                            goto L1;
                        }
                    }
                }

                ///*Comparing Second & Third Rack timings
                for (int i = 0; i < maxtimcnt; i++)
                {
                    if (nxtracktime >= totalprototime)
                    {
                        nxtracktime = (int)totalprototime + 5;
                        break;
                    }
                    d2 = r3times_arr[i];
                    for (int j = 0; j < maxtimcnt; j++)    //Comparing timing with first rack and second rack
                    {
                        d1 = r2times_arr[j];
                        if (d2 > d1)
                            ts = d2.Subtract(d1);
                        else if (d1 > d2)
                            ts = d1.Subtract(d2);

                        if (ts.TotalSeconds < 18)  //27seconds  Prev given 10 seconds
                        {
                            cmpval++;
                            nxtracktime = nxtracktime + 18; //Incrementing every time 9 seconds
                            goto L1;
                        }
                    }
                }
                */

                //////Witting timing details to file
                //for (int i = 0; i < maxtimcnt; i++)
                //{
                //    savetimings("R1," + r1times_arr[i].ToString());
                //}
                ////Witting timing details to file
                //for (int i = 0; i < maxtimcnt; i++)
                //{
                //    savetimings("R2," + r2times_arr[i].ToString());
                //}
                ////Witting timing details to file
                //for (int i = 0; i < maxtimcnt; i++)
                //{
                //    savetimings("R3," + r3times_arr[i].ToString());
                //}
                ////MessageBox.Show("Timings Compared and prepared shortest path", "H & E Communication", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                #endregion
                //*/
            }
        }
        private void savetimings(string timstr)
        {
            string dirname = "", filename = "";
            dirname = Application.StartupPath + "\\Data";
            if (Directory.Exists(dirname))
            {

            }
            else
            {
                Directory.CreateDirectory(dirname);
            }
            #region Serverdetails
            //Server Details Saving
            try
            {
                filename = string.Empty;
                filename = dirname + "\\timing_" + System.DateTime.Now.ToShortDateString() + ".csv";
                System.IO.FileStream fs = default(System.IO.FileStream);
                if (File.Exists(filename))
                {
                    fs = new System.IO.FileStream(filename, System.IO.FileMode.Append, System.IO.FileAccess.Write);
                }
                else
                {
                    fs = new System.IO.FileStream(filename, System.IO.FileMode.Create, System.IO.FileAccess.Write);
                }
                System.IO.StreamWriter sw = new System.IO.StreamWriter(fs);
                sw.WriteLine(timstr);
                sw.Close();
                fs.Close();
            }
            catch (Exception d3)
            {

            }
            #endregion            
        }
        #region Protocols Running functions
        private string get_Jar_positiondetails(string rackname)
        {
            //Taking detail protocol table
            string JName = "", sndcmdstr = "";

            if (rackname == "R1")
            {

                #region prev & next rack
                //New code added on 12-12-2023 to get the previous & next jar name to ON & OFF the water pump
                if (r1inx == 0)
                {
                    Prev_JarName_R1 = "";
                    DataRow[] prs1 = R1Protorun.Select("SlNo =" + (r1inx + 2));
                    if (prs1.Length > 0)
                    {
                        Next_JarName_R1 = prs1[0]["JarNo"].ToString();
                    }
                    else
                        Next_JarName_R1 = "";
                }
                else if (r1inx > 0)
                {
                    DataRow[] prs2 = R1Protorun.Select("SlNo =" + (r1inx));
                    if (prs2.Length > 0)
                    {
                        Prev_JarName_R1 = prs2[0]["JarNo"].ToString();
                    }
                    else
                        Prev_JarName_R1 = "";

                    if ((r1inx + 2) <= R1Protorun.Rows.Count)
                    {
                        DataRow[] prs3 = R1Protorun.Select("SlNo =" + (r1inx + 2));
                        if (prs3.Length > 0)
                        {
                            Next_JarName_R1 = prs3[0]["JarNo"].ToString();
                        }
                        else
                            Next_JarName_R1 = "";
                    }
                }
                //New code added on 12-12-2023 to get the values of water pump/ valve
                #endregion

                DataRow[] protoresult = R1Protorun.Select("SlNo =" + (r1inx + 1));
                if (protoresult.Length > 0)
                {
                    JName = protoresult[0]["JarNo"].ToString();
                    RegName_R1 = protoresult[0]["RegName"].ToString();
                    ShortRegName_R1 = protoresult[0]["RegName"].ToString();
                    RegName_R1 = protoresult[0]["RegName"].ToString();
                    ShortRegName_R1 = protoresult[0]["RegName"].ToString();
                    incubtime_R1 = Convert.ToInt32(protoresult[0]["Incubtime"].ToString());
                    noofdips_R1 = Convert.ToInt32(protoresult[0]["Dips"].ToString());
                    if (noofdips_R1 > 0)
                    {
                        R1_dipdelay = 1;
                        R1_drydelay = 1;
                    }
                    //Priority code added on 15-11-2023 to reduce the time delay for next rack or to stop colliding
                    if (JName.Contains("U"))
                        r1priority = 0;
                    else
                    {
                        if (((incubtime_R1 > 0) && (incubtime_R1 < 30)) || (noofdips_R1 > 0))
                        {
                            r1priority = 1;
                        }
                        else
                        {
                            r1priority = 0;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Please select the Valid Protocol to perform the task", "H & E Communication Test App", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return sndcmdstr;
                }
            }
            else if (rackname == "R2")
            {
                #region prev & next rack
                //New code added on 12-12-2023 to get the previous & next jar name to ON & OFF the water pump
                if (r2inx == 0)
                {
                    Prev_JarName_R2 = "";
                    DataRow[] prs1 = R2Protorun.Select("SlNo =" + (r2inx + 2));
                    if (prs1.Length > 0)
                    {
                        Next_JarName_R2 = prs1[0]["JarNo"].ToString();
                    }
                    else
                        Next_JarName_R2 = "";
                }
                else if (r2inx > 0)
                {
                    DataRow[] prs2 = R2Protorun.Select("SlNo =" + (r2inx));
                    if (prs2.Length > 0)
                    {
                        Prev_JarName_R2 = prs2[0]["JarNo"].ToString();
                    }
                    else
                        Prev_JarName_R2 = "";

                    if ((r2inx + 2) <= R2Protorun.Rows.Count)
                    {
                        DataRow[] prs3 = R2Protorun.Select("SlNo =" + (r2inx + 2));
                        if (prs3.Length > 0)
                        {
                            Next_JarName_R2 = prs3[0]["JarNo"].ToString();
                        }
                        else
                            Next_JarName_R2 = "";
                    }
                }
                //New code added on 12-12-2023 to get the values of water pump/ valve
                #endregion
                DataRow[] protoresult = R2Protorun.Select("SlNo =" + (r2inx + 1));
                if (protoresult.Length > 0)
                {
                    JName = protoresult[0]["JarNo"].ToString();
                    RegName_R2 = protoresult[0]["RegName"].ToString();
                    ShortRegName_R2 = protoresult[0]["RegName"].ToString();
                    incubtime_R2 = Convert.ToInt32(protoresult[0]["Incubtime"].ToString());
                    noofdips_R2 = Convert.ToInt32(protoresult[0]["Dips"].ToString());
                    if (noofdips_R2 > 0)
                    {
                        R2_dipdelay = 1;
                        R2_drydelay = 1;
                    }
                    //Priority code added on 15-11-2023 to reduce the time delay for next rack or to stop colliding
                    if (JName.Contains("U"))
                        r2priority = 0;
                    else
                    {
                        if (((incubtime_R2 > 0) && (incubtime_R2 < 30)) || (noofdips_R2 > 0))
                        {
                            r2priority = 1;
                        }
                        else
                        {
                            r2priority = 0;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Please select the Valid Protocol to perform the task", "H & E Communication Test App", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return sndcmdstr;
                }
            }
            else if (rackname == "R3")
            {
                #region prev & next rack
                //New code added on 12-12-2023 to get the previous & next jar name to ON & OFF the water pump
                if (r3inx == 0)
                {
                    Prev_JarName_R3 = "";
                    DataRow[] prs1 = R3Protorun.Select("SlNo =" + (r3inx + 2));
                    if (prs1.Length > 0)
                    {
                        Next_JarName_R3 = prs1[0]["JarNo"].ToString();
                    }
                    else
                        Next_JarName_R3 = "";
                }
                else if (r3inx > 0)
                {
                    DataRow[] prs2 = R3Protorun.Select("SlNo =" + (r1inx));
                    if (prs2.Length > 0)
                    {
                        Prev_JarName_R3 = prs2[0]["JarNo"].ToString();
                    }
                    else
                        Prev_JarName_R3 = "";

                    if ((r3inx + 2) <= R3Protorun.Rows.Count)
                    {
                        DataRow[] prs3 = R3Protorun.Select("SlNo =" + (r3inx + 2));
                        if (prs3.Length > 0)
                        {
                            Next_JarName_R3 = prs3[0]["JarNo"].ToString();
                        }
                        else
                            Next_JarName_R3 = "";
                    }
                }
                //New code added on 12-12-2023 to get the values of water pump/ valve
                #endregion

                DataRow[] protoresult = R3Protorun.Select("SlNo =" + (r3inx + 1));
                if (protoresult.Length > 0)
                {
                    JName = protoresult[0]["JarNo"].ToString();
                    RegName_R3 = protoresult[0]["RegName"].ToString();
                    ShortRegName_R3 = protoresult[0]["RegName"].ToString();
                    incubtime_R3 = Convert.ToInt32(protoresult[0]["Incubtime"].ToString());
                    noofdips_R3 = Convert.ToInt32(protoresult[0]["Dips"].ToString());
                    if (noofdips_R3 > 0)
                    {
                        R3_dipdelay = 1;
                        R3_drydelay = 1;
                    }
                    //Priority code added on 15-11-2023 to reduce the time delay for next rack or to stop colliding
                    if (JName.Contains("U"))
                        r3priority = 0;
                    else
                    {
                        if (((incubtime_R3 > 0) && (incubtime_R3 < 30)) || (noofdips_R3 > 0))
                        {
                            r3priority = 1;
                        }
                        else
                        {
                            r3priority = 0;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Please select the Valid Protocol to perform the task", "H & E Communication Test App", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return sndcmdstr;
                }
            }
            else if (rackname == "R4")
            {
                #region prev & next rack
                //New code added on 12-12-2023 to get the previous & next jar name to ON & OFF the water pump
                if (r4inx == 0)
                {
                    Prev_JarName_R4 = "";
                    DataRow[] prs1 = R1Protorun.Select("SlNo =" + (r4inx + 2));
                    if (prs1.Length > 0)
                    {
                        Next_JarName_R4 = prs1[0]["JarNo"].ToString();
                    }
                    else
                        Next_JarName_R4 = "";
                }
                else if (r4inx > 0)
                {
                    DataRow[] prs2 = R4Protorun.Select("SlNo =" + (r4inx));
                    if (prs2.Length > 0)
                    {
                        Prev_JarName_R4 = prs2[0]["JarNo"].ToString();
                    }
                    else
                        Prev_JarName_R4 = "";

                    if ((r4inx + 2) <= R4Protorun.Rows.Count)
                    {
                        DataRow[] prs3 = R4Protorun.Select("SlNo =" + (r4inx + 2));
                        if (prs3.Length > 0)
                        {
                            Next_JarName_R4 = prs3[0]["JarNo"].ToString();
                        }
                        else
                            Next_JarName_R4 = "";
                    }
                }
                //New code added on 12-12-2023 to get the values of water pump/ valve
                #endregion
                DataRow[] protoresult = R4Protorun.Select("SlNo =" + (r4inx + 1));
                if (protoresult.Length > 0)
                {
                    JName = protoresult[0]["JarNo"].ToString();
                    RegName_R4 = protoresult[0]["RegName"].ToString();
                    ShortRegName_R4 = protoresult[0]["RegName"].ToString();
                    incubtime_R4 = Convert.ToInt32(protoresult[0]["Incubtime"].ToString());
                    noofdips_R4 = Convert.ToInt32(protoresult[0]["Dips"].ToString());
                    if (noofdips_R4 > 0)
                    {
                        R4_dipdelay = 1;
                        R4_drydelay = 1;
                    }
                    //Priority code added on 15-11-2023 to reduce the time delay for next rack or to stop colliding
                    if (JName.Contains("U"))
                        r4priority = 0;
                    else
                    {
                        if (((incubtime_R4 > 0) && (incubtime_R4 < 30)) || (noofdips_R4 > 0))
                        {
                            r4priority = 1;
                        }
                        else
                        {
                            r4priority = 0;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Please select the Valid Protocol to perform the task", "H & E Communication Test App", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return sndcmdstr;
                }
            }
            else if (rackname == "R5")
            {
                #region prev & next rack
                //New code added on 12-12-2023 to get the previous & next jar name to ON & OFF the water pump
                if (r5inx == 0)
                {
                    Prev_JarName_R5 = "";
                    DataRow[] prs1 = R5Protorun.Select("SlNo =" + (r5inx + 2));
                    if (prs1.Length > 0)
                    {
                        Next_JarName_R5 = prs1[0]["JarNo"].ToString();
                    }
                    else
                        Next_JarName_R5 = "";
                }
                else if (r5inx > 0)
                {
                    DataRow[] prs2 = R5Protorun.Select("SlNo =" + (r5inx));
                    if (prs2.Length > 0)
                    {
                        Prev_JarName_R5 = prs2[0]["JarNo"].ToString();
                    }
                    else
                        Prev_JarName_R5 = "";

                    if ((r5inx + 2) <= R5Protorun.Rows.Count)
                    {
                        DataRow[] prs3 = R5Protorun.Select("SlNo =" + (r5inx + 2));
                        if (prs3.Length > 0)
                        {
                            Next_JarName_R5 = prs3[0]["JarNo"].ToString();
                        }
                        else
                            Next_JarName_R5 = "";
                    }
                }
                //New code added on 12-12-2023 to get the values of water pump/ valve
                #endregion
                DataRow[] protoresult = R5Protorun.Select("SlNo =" + (r5inx + 1));
                if (protoresult.Length > 0)
                {
                    JName = protoresult[0]["JarNo"].ToString();
                    RegName_R5 = protoresult[0]["RegName"].ToString();
                    ShortRegName_R5 = protoresult[0]["RegName"].ToString();
                    incubtime_R5 = Convert.ToInt32(protoresult[0]["Incubtime"].ToString());
                    noofdips_R5 = Convert.ToInt32(protoresult[0]["Dips"].ToString());
                    if (noofdips_R5 > 0)
                    {
                        R5_dipdelay = 1;
                        R5_drydelay = 1;
                    }
                    //Priority code added on 15-11-2023 to reduce the time delay for next rack or to stop colliding
                    if (JName.Contains("U"))
                        r5priority = 0;
                    else
                    {
                        if (((incubtime_R5 > 0) && (incubtime_R5 < 30)) || (noofdips_R5 > 0))
                        {
                            r5priority = 1;
                        }
                        else
                        {
                            r5priority = 0;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Please select the Valid Protocol to perform the task", "H & E Communication Test App", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return sndcmdstr;
                }
            }
            else if (rackname == "R6")
            {
                #region prev & next rack
                //New code added on 12-12-2023 to get the previous & next jar name to ON & OFF the water pump
                if (r6inx == 0)
                {
                    Prev_JarName_R6 = "";
                    DataRow[] prs1 = R6Protorun.Select("SlNo =" + (r6inx + 2));
                    if (prs1.Length > 0)
                    {
                        Next_JarName_R6 = prs1[0]["JarNo"].ToString();
                    }
                    else
                        Next_JarName_R6 = "";
                }
                else if (r6inx > 0)
                {
                    DataRow[] prs2 = R6Protorun.Select("SlNo =" + (r6inx));
                    if (prs2.Length > 0)
                    {
                        Prev_JarName_R6 = prs2[0]["JarNo"].ToString();
                    }
                    else
                        Prev_JarName_R6 = "";

                    if ((r6inx + 2) <= R6Protorun.Rows.Count)
                    {
                        DataRow[] prs3 = R6Protorun.Select("SlNo =" + (r6inx + 2));
                        if (prs3.Length > 0)
                        {
                            Next_JarName_R6 = prs3[0]["JarNo"].ToString();
                        }
                        else
                            Next_JarName_R6 = "";
                    }
                }
                //New code added on 12-12-2023 to get the values of water pump/ valve
                #endregion

                DataRow[] protoresult = R6Protorun.Select("SlNo =" + (r6inx + 1));
                if (protoresult.Length > 0)
                {
                    JName = protoresult[0]["JarNo"].ToString();
                    RegName_R6 = protoresult[0]["RegName"].ToString();
                    ShortRegName_R6 = protoresult[0]["RegName"].ToString();
                    incubtime_R6 = Convert.ToInt32(protoresult[0]["Incubtime"].ToString());
                    noofdips_R6 = Convert.ToInt32(protoresult[0]["Dips"].ToString());
                    if (noofdips_R6 > 0)
                    {
                        R6_dipdelay = 1;
                        R6_drydelay = 1;
                    }
                    //Priority code added on 15-11-2023 to reduce the time delay for next rack or to stop colliding
                    if (JName.Contains("U"))
                        r6priority = 0;
                    else
                    {
                        if (((incubtime_R6 > 0) && (incubtime_R6 < 30)) || (noofdips_R6 > 0))
                        {
                            r6priority = 1;
                        }
                        else
                        {
                            r6priority = 0;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Please select the Valid Protocol to perform the task", "H & E Communication Test App", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return sndcmdstr;
                }
            }
            else if (rackname == "R7")
            {
                #region prev & next rack
                //New code added on 12-12-2023 to get the previous & next jar name to ON & OFF the water pump
                if (r7inx == 0)
                {
                    Prev_JarName_R7 = "";
                    DataRow[] prs1 = R7Protorun.Select("SlNo =" + (r7inx + 2));
                    if (prs1.Length > 0)
                    {
                        Next_JarName_R7 = prs1[0]["JarNo"].ToString();
                    }
                    else
                        Next_JarName_R7 = "";
                }
                else if (r7inx > 0)
                {
                    DataRow[] prs2 = R7Protorun.Select("SlNo =" + (r7inx));
                    if (prs2.Length > 0)
                    {
                        Prev_JarName_R7 = prs2[0]["JarNo"].ToString();
                    }
                    else
                        Prev_JarName_R7 = "";

                    if ((r7inx + 2) <= R7Protorun.Rows.Count)
                    {
                        DataRow[] prs3 = R7Protorun.Select("SlNo =" + (r7inx + 2));
                        if (prs3.Length > 0)
                        {
                            Next_JarName_R7 = prs3[0]["JarNo"].ToString();
                        }
                        else
                            Next_JarName_R7 = "";
                    }
                }
                //New code added on 12-12-2023 to get the values of water pump/ valve
                #endregion

                DataRow[] protoresult = R7Protorun.Select("SlNo =" + (r7inx + 1));
                if (protoresult.Length > 0)
                {
                    JName = protoresult[0]["JarNo"].ToString();
                    RegName_R7 = protoresult[0]["RegName"].ToString();
                    ShortRegName_R7 = protoresult[0]["RegName"].ToString();
                    incubtime_R7 = Convert.ToInt32(protoresult[0]["Incubtime"].ToString());
                    noofdips_R7 = Convert.ToInt32(protoresult[0]["Dips"].ToString());
                    if (noofdips_R7 > 0)
                    {
                        R7_dipdelay = 1;
                        R7_drydelay = 1;
                    }
                    //Priority code added on 15-11-2023 to reduce the time delay for next rack or to stop colliding
                    if (JName.Contains("U"))
                        r7priority = 0;
                    else
                    {
                        if (((incubtime_R7 > 0) && (incubtime_R7 < 30)) || (noofdips_R7 > 0))
                        {
                            r7priority = 1;
                        }
                        else
                        {
                            r7priority = 0;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Please select the Valid Protocol to perform the task", "H & E Communication Test App", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return sndcmdstr;
                }
            }
            else if (rackname == "R8")
            {

                #region prev & next rack
                //New code added on 12-12-2023 to get the previous & next jar name to ON & OFF the water pump
                if (r8inx == 0)
                {
                    Prev_JarName_R8 = "";
                    DataRow[] prs1 = R8Protorun.Select("SlNo =" + (r8inx + 2));
                    if (prs1.Length > 0)
                    {
                        Next_JarName_R8 = prs1[0]["JarNo"].ToString();
                    }
                    else
                        Next_JarName_R8 = "";
                }
                else if (r8inx > 0)
                {
                    DataRow[] prs2 = R8Protorun.Select("SlNo =" + (r8inx));
                    if (prs2.Length > 0)
                    {
                        Prev_JarName_R8 = prs2[0]["JarNo"].ToString();
                    }
                    else
                        Prev_JarName_R8 = "";

                    if ((r8inx + 2) <= R8Protorun.Rows.Count)
                    {
                        DataRow[] prs3 = R8Protorun.Select("SlNo =" + (r8inx + 2));
                        if (prs3.Length > 0)
                        {
                            Next_JarName_R8 = prs3[0]["JarNo"].ToString();
                        }
                        else
                            Next_JarName_R8 = "";
                    }
                }
                //New code added on 12-12-2023 to get the values of water pump/ valve
                #endregion

                DataRow[] protoresult = R8Protorun.Select("SlNo =" + (r8inx + 1));
                if (protoresult.Length > 0)
                {
                    JName = protoresult[0]["JarNo"].ToString();
                    RegName_R8 = protoresult[0]["RegName"].ToString();
                    ShortRegName_R8 = protoresult[0]["RegName"].ToString();
                    incubtime_R8 = Convert.ToInt32(protoresult[0]["Incubtime"].ToString());
                    noofdips_R8 = Convert.ToInt32(protoresult[0]["Dips"].ToString());
                    if (noofdips_R8 > 0)
                    {
                        R8_dipdelay = 1;
                        R8_drydelay = 1;
                    }
                    //Priority code added on 15-11-2023 to reduce the time delay for next rack or to stop colliding
                    if (JName.Contains("U"))
                        r8priority = 0;
                    else
                    {
                        if (((incubtime_R8 > 0) && (incubtime_R8 < 30)) || (noofdips_R8 > 0))
                        {
                            r8priority = 1;
                        }
                        else
                        {
                            r8priority = 0;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Please select the Valid Protocol to perform the task", "H & E Communication Test App", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return sndcmdstr;
                }
            }
            else if (rackname == "R9")
            {

                #region prev & next rack
                //New code added on 12-12-2023 to get the previous & next jar name to ON & OFF the water pump
                if (r9inx == 0)
                {
                    Prev_JarName_R9 = "";
                    DataRow[] prs1 = R6Protorun.Select("SlNo =" + (r9inx + 2));
                    if (prs1.Length > 0)
                    {
                        Next_JarName_R9 = prs1[0]["JarNo"].ToString();
                    }
                    else
                        Next_JarName_R9 = "";
                }
                else if (r9inx > 0)
                {
                    DataRow[] prs2 = R9Protorun.Select("SlNo =" + (r9inx));
                    if (prs2.Length > 0)
                    {
                        Prev_JarName_R9 = prs2[0]["JarNo"].ToString();
                    }
                    else
                        Prev_JarName_R9 = "";

                    if ((r9inx + 2) <= R9Protorun.Rows.Count)
                    {
                        DataRow[] prs3 = R9Protorun.Select("SlNo =" + (r9inx + 2));
                        if (prs3.Length > 0)
                        {
                            Next_JarName_R9 = prs3[0]["JarNo"].ToString();
                        }
                        else
                            Next_JarName_R9 = "";
                    }
                }
                //New code added on 12-12-2023 to get the values of water pump/ valve
                #endregion

                DataRow[] protoresult = R6Protorun.Select("SlNo =" + (r9inx + 1));
                if (protoresult.Length > 0)
                {
                    JName = protoresult[0]["JarNo"].ToString();
                    RegName_R9 = protoresult[0]["RegName"].ToString();
                    ShortRegName_R9 = protoresult[0]["RegName"].ToString();
                    incubtime_R9 = Convert.ToInt32(protoresult[0]["Incubtime"].ToString());
                    noofdips_R9 = Convert.ToInt32(protoresult[0]["Dips"].ToString());
                    if (noofdips_R9 > 0)
                    {
                        R9_dipdelay = 1;
                        R9_drydelay = 1;
                    }
                    //Priority code added on 15-11-2023 to reduce the time delay for next rack or to stop colliding
                    if (JName.Contains("U"))
                        r9priority = 0;
                    else
                    {
                        if (((incubtime_R9 > 0) && (incubtime_R9 < 30)) || (noofdips_R9 > 0))
                        {
                            r9priority = 1;
                        }
                        else
                        {
                            r9priority = 0;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Please select the Valid Protocol to perform the task", "H & E Communication Test App", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return sndcmdstr;
                }
            }
            DataRow[] resut = JPos.Select("JarNo ='" + JName + "'");
            if (resut.Length > 0)
            {
                //x1Pos, y1Pos, z1Pos, z2Pos
                JarName = resut[0]["JarNo"].ToString();
                x1Pos = resut[0]["X-Axis"].ToString();
                y1Pos = resut[0]["Y-Axis"].ToString();
                z1Pos = resut[0]["Z1-Axis"].ToString();
                z2Pos = resut[0]["Z2-Axis"].ToString();
                //Assigned_RANo = resut[0]["RA_No"].ToString();
                sndcmdstr = "";
                //sndcmdstr = x1Pos + "," + y1Pos + "," + z1Pos + "," + z2Pos + "," + pickplace.ToString();
                sndcmdstr = x1Pos + "," + y1Pos + ",0";
            }

            //New code updated on 26072024 1530 as suggested by kamal sir
            /* Has to check with machine after implementing the washjar and code in device*/
            if ((JarName == "W1") || (JarName == "W2") || (JarName == "W3") || (JarName == "W4") || (JarName == "W5") || (JarName == "W6"))
            {
                string rkname = "";
                rkname = JarName; //getwashdetails(JarName);
                DataRow[] rslt = JPos.Select("JarNo = '" + rkname + "'");
                if (rslt.Length > 0)
                {
                    //x1Pos, y1Pos, z1Pos, z2Pos
                    JarName = rslt[0]["JarNo"].ToString();
                    x1Pos = resut[0]["X-Axis"].ToString();
                    y1Pos = resut[0]["Y-Axis"].ToString();
                    z1Pos = resut[0]["Z1-Axis"].ToString();
                    z2Pos = resut[0]["Z2-Axis"].ToString();
                    //Assigned_RANo = resut[0]["RA_No"].ToString();
                    sndcmdstr = "";
                    //sndcmdstr = x1Pos + "," + y1Pos + "," + z1Pos + "," + z2Pos + "," + pickplace.ToString();
                    //sndcmdstr = x1Pos + "," + y1Pos + ",0";
                    sndcmdstr = x1Pos + "," + y1Pos + "," + z1Pos;
                }
            }
            //New code updated on 26072024 1530 as suggested by kamal sir

            Assigned_RANo = "1";  //Temporarly assigned to test with RA-1

            if (rackname == "R1")
            {
                R1_xPos = x1Pos; R1_yPos = y1Pos; R1_z1Pos = z1Pos; R1_z2Pos = z2Pos;
                if (R1_pickcmdissue == false) R1_RNo = Convert.ToInt32(Assigned_RANo);
                JarName_R1 = JarName;
                if (Next_JarName_R1.Contains("W"))
                {
                    r1_incub_WOn_flg = false;
                    r1_incub_Woff_flg = false;
                }
                //New code written on 13122023 1443 to start the water pump
                if ((incubtime_R1 < 18) && (Next_JarName_R1.Contains("W")))
                {
                    r1_incub_WOn_flg = true;
                    watervalveonpff(Next_JarName_R1, 1);
                    System.Threading.Thread.Sleep(500);
                }
            }
            else if (rackname == "R2")
            {
                R2_xPos = x1Pos; R2_yPos = y1Pos; R2_z1Pos = z1Pos; R2_z2Pos = z2Pos;
                if (R2_pickcmdissue == false) R2_RNo = Convert.ToInt32(Assigned_RANo);
                JarName_R2 = JarName;
                if (Next_JarName_R2.Contains("W"))
                {
                    r2_incub_WOn_flg = false;
                    r2_incub_Woff_flg = false;
                }
                //New code written on 13122023 1443 to start the water pump
                if ((incubtime_R2 < 18) && (Next_JarName_R2.Contains("W")))
                {
                    r2_incub_WOn_flg = true;
                    watervalveonpff(Next_JarName_R2, 1);
                    System.Threading.Thread.Sleep(500);
                }
            }
            else if (rackname == "R3")
            {
                R3_xPos = x1Pos; R3_yPos = y1Pos; R3_z1Pos = z1Pos; R3_z2Pos = z2Pos;
                if (R3_pickcmdissue == false) R3_RNo = Convert.ToInt32(Assigned_RANo);
                JarName_R3 = JarName;
                if (Next_JarName_R3.Contains("W"))
                {
                    r3_incub_WOn_flg = false;
                    r3_incub_Woff_flg = false;
                }
                //New code written on 13122023 1443 to start the water pump
                if ((incubtime_R3 < 18) && (Next_JarName_R3.Contains("W")))
                {
                    r3_incub_WOn_flg = true;
                    watervalveonpff(Next_JarName_R3, 1);
                    System.Threading.Thread.Sleep(500);
                }

            }
            else if (rackname == "R4")
            {
                R4_xPos = x1Pos; R4_yPos = y1Pos; R4_z1Pos = z1Pos; R4_z2Pos = z2Pos;
                if (R4_pickcmdissue == false) R4_RNo = Convert.ToInt32(Assigned_RANo);
                JarName_R4 = JarName;
                if (Next_JarName_R4.Contains("W"))
                {
                    r4_incub_WOn_flg = false;
                    r4_incub_Woff_flg = false;
                }
                //New code written on 13122023 1443 to start the water pump
                if ((incubtime_R4 < 18) && (Next_JarName_R4.Contains("W")))
                {
                    r4_incub_WOn_flg = true;
                    watervalveonpff(Next_JarName_R4, 1);
                    System.Threading.Thread.Sleep(500);
                }
            }
            else if (rackname == "R5")
            {
                R5_xPos = x1Pos; R5_yPos = y1Pos; R5_z1Pos = z1Pos; R5_z2Pos = z2Pos;
                if (R5_pickcmdissue == false) R5_RNo = Convert.ToInt32(Assigned_RANo);
                JarName_R5 = JarName;
                if (Next_JarName_R5.Contains("W"))
                {
                    r5_incub_WOn_flg = false;
                    r5_incub_Woff_flg = false;
                }
                //New code written on 13122023 1443 to start the water pump
                if ((incubtime_R5 < 18) && (Next_JarName_R5.Contains("W")))
                {
                    r5_incub_WOn_flg = true;
                    watervalveonpff(Next_JarName_R5, 1);
                    System.Threading.Thread.Sleep(500);
                }
            }
            else if (rackname == "R6")
            {
                R6_xPos = x1Pos; R6_yPos = y1Pos; R6_z1Pos = z1Pos; R6_z2Pos = z2Pos;
                if (R6_pickcmdissue == false) R6_RNo = Convert.ToInt32(Assigned_RANo);
                JarName_R6 = JarName;
                if (Next_JarName_R6.Contains("W"))
                {
                    r6_incub_WOn_flg = false;
                    r6_incub_Woff_flg = false;
                }
                //New code written on 13122023 1443 to start the water pump
                if ((incubtime_R6 < 18) && (Next_JarName_R6.Contains("W")))
                {
                    r6_incub_WOn_flg = true;
                    watervalveonpff(Next_JarName_R6, 1);
                    System.Threading.Thread.Sleep(500);
                }
            }  //For 7th, 8th & 9th Rack added on 26-12-2023
            else if (rackname == "R7")
            {
                R7_xPos = x1Pos; R7_yPos = y1Pos; R7_z1Pos = z1Pos; R7_z2Pos = z2Pos;
                if (R7_pickcmdissue == false) R7_RNo = Convert.ToInt32(Assigned_RANo);
                JarName_R7 = JarName;
                if (Next_JarName_R7.Contains("W"))
                {
                    r7_incub_WOn_flg = false;
                    r7_incub_Woff_flg = false;
                }
                //New code written on 13122023 1443 to start the water pump
                if ((incubtime_R7 < 18) && (Next_JarName_R7.Contains("W")))
                {
                    r7_incub_WOn_flg = true;
                    watervalveonpff(Next_JarName_R7, 1);
                    System.Threading.Thread.Sleep(500);
                }
            }
            else if (rackname == "R8")
            {
                R8_xPos = x1Pos; R8_yPos = y1Pos; R8_z1Pos = z1Pos; R8_z2Pos = z2Pos;
                if (R8_pickcmdissue == false) R8_RNo = Convert.ToInt32(Assigned_RANo);
                JarName_R8 = JarName;
                if (Next_JarName_R8.Contains("W"))
                {
                    r8_incub_WOn_flg = false;
                    r8_incub_Woff_flg = false;
                }
                //New code written on 13122023 1443 to start the water pump
                if ((incubtime_R8 < 18) && (Next_JarName_R8.Contains("W")))
                {
                    r8_incub_WOn_flg = true;
                    watervalveonpff(Next_JarName_R8, 1);
                    System.Threading.Thread.Sleep(500);
                }
            }
            else if (rackname == "R9")
            {
                R9_xPos = x1Pos; R9_yPos = y1Pos; R9_z1Pos = z1Pos; R9_z2Pos = z2Pos;
                if (R9_pickcmdissue == false) R9_RNo = Convert.ToInt32(Assigned_RANo);
                JarName_R9 = JarName;
                if (Next_JarName_R9.Contains("W"))
                {
                    r9_incub_WOn_flg = false;
                    r9_incub_Woff_flg = false;
                }
                //New code written on 13122023 1443 to start the water pump
                if ((incubtime_R9 < 18) && (Next_JarName_R9.Contains("W")))
                {
                    r9_incub_WOn_flg = true;
                    watervalveonpff(Next_JarName_R9, 1);
                    System.Threading.Thread.Sleep(500);
                }
            }
            return sndcmdstr;
        }
        //For 1st Rack proto running function
        private string getwashdetails(string JarName)
        {
            string rkname = "";
            if ((JarName == "W1") && (rackinwaterjars[0] == 0))
            {
                rkname = "W1";
            }
            else if ((JarName == "W1") && (rackinwaterjars[0] == 1))
            {
                if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 0) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W2";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W3";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W4";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W5";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 1) && (rackinwaterjars[5] == 0))
                    rkname = "W6";
            }
            else if ((JarName == "W2") && (rackinwaterjars[1] == 0))
            {
                rkname = "W2";
            }
            else if ((JarName == "W2") && (rackinwaterjars[1] == 1))
            {
                if ((rackinwaterjars[0] == 0) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W1";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W3";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W4";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W5";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 1) && (rackinwaterjars[5] == 0))
                    rkname = "W6";
            }
            else if ((JarName == "W3") && (rackinwaterjars[2] == 0))
            {
                rkname = "W3";
            }
            else if ((JarName == "W3") && (rackinwaterjars[2] == 1))
            {
                if ((rackinwaterjars[0] == 0) && (rackinwaterjars[1] == 0) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W1";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 0) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W2";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W4";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W5";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 1) && (rackinwaterjars[5] == 0))
                    rkname = "W6";
            }
            else if ((JarName == "W4") && (rackinwaterjars[3] == 0))
            {
                rkname = "W4";
            }
            else if ((JarName == "W4") && (rackinwaterjars[3] == 1))
            {
                if ((rackinwaterjars[0] == 0) && (rackinwaterjars[1] == 0) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W1";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 0) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W2";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W3";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 0))
                    rkname = "W5";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 1) && (rackinwaterjars[5] == 0))
                    rkname = "W6";
            }
            else if ((JarName == "W5") && (rackinwaterjars[4] == 0))
            {
                rkname = "W5";
            }
            else if ((JarName == "W4") && (rackinwaterjars[4] == 1))
            {
                if ((rackinwaterjars[0] == 0) && (rackinwaterjars[1] == 0) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 1) && (rackinwaterjars[5] == 0))
                    rkname = "W1";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 0) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 1) && (rackinwaterjars[5] == 0))
                    rkname = "W2";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 1) && (rackinwaterjars[5] == 0))
                    rkname = "W3";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 1) && (rackinwaterjars[5] == 0))
                    rkname = "W5";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 1) && (rackinwaterjars[5] == 0))
                    rkname = "W6";
            }
            else if ((JarName == "W6") && (rackinwaterjars[5] == 0))
            {
                rkname = "W6";
            }
            else if ((JarName == "W6") && (rackinwaterjars[5] == 1))
            {
                if ((rackinwaterjars[0] == 0) && (rackinwaterjars[1] == 0) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 1))
                    rkname = "W1";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 0) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 1))
                    rkname = "W2";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 0) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 1))
                    rkname = "W3";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 0) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 1))
                    rkname = "W4";
                else if ((rackinwaterjars[0] == 1) && (rackinwaterjars[1] == 1) && (rackinwaterjars[2] == 1) && (rackinwaterjars[3] == 1) && (rackinwaterjars[4] == 0) && (rackinwaterjars[5] == 1))
                    rkname = "W5";
            }
            return rkname;
        }
        private void protocolrun_R1()
        {
            int pickplace = 0;
            Boolean rackvalinc = false;
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan();
            try
            {
                string sndcmdstr = "", snddipcmdstr = "";

                if ((r1inx == 0) && (R1_protostart == false))
                {
                    System.Threading.Thread.Sleep(500);
                    //if(heatingreqflg==false)
                    //{
                    R1_cnt = RackIncremantVal;  //Modified on 24112023 1554                                                    
                    RackIncremantVal++; //Incrementing Rack value count by 1  Modified on 24112023 1554
                    //}
                    Communication.writeCommunicationCommands("Rack - " + R1_cnt.ToString() + "Protocol Started");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R1, JarName_R1, "R" + R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Started", 0f, m_Runid);
                    r1_taskcomp = DateTime.Now;
                    r1_taskcomp = r1_taskcomp.AddSeconds((int)totalprototime);
                    R1_protostart = true;
                    topickupflg_R1 = true;
                    pickplace = 1;
                    toplaceflg_R1 = false;
                    pickedflg_R1 = false;
                    placedflg_R1 = false;
                    sndcmdstr = get_Jar_positiondetails("R1"); //get_R1_positiondetails();
                }
                else if (r1inx >= R1Protorun.Rows.Count)
                {
                    topickupflg_R1 = false;
                    toplaceflg_R1 = false;
                    todipflg_R1 = false;
                    pickedflg_R1 = false;
                    placedflg_R1 = false;
                    dippedflg_R1 = false;
                    Communication.writeCommunicationCommands("Rack - " + R1_cnt.ToString() + "Protocol Completed");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R1, JarName_R1, "R" + R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                    Console.Beep(10000, 5000); //Added on 081220231711
                    ////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    r1inx = 0;
                    r1priority = 0;
                    protocolinitiateflg_R1 = false;
                    protocolStartedflg_R1 = false;
                    R1_protostart = false;
                    U1.Enabled = true;
                    rackinunloading[0] = 1;
                    //////R1_cnt = R1_cnt + 6;  /*Temporarly commented on 24112023 1554 for testing */
                    //call Unload racks function
                    return;
                }
                else if ((r1inx >= 0) && (r1inx <= R1Protorun.Rows.Count - 1))
                {
                    if ((pickedflg_R1 == true) || (placedflg_R1 == true) || (dippedflg_R1 == true))
                    {
                        sndcmdstr = get_Jar_positiondetails("R1"); //get_R1_positiondetails();
                        if (pickedflg_R1 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R1, R1_cnt.ToString(), DateTime.Now.ToString(), monVal, "Picked from", 0f);
                            if ((r1inx == 1) && (JarName_R1 == "H1") && (proto_htrclose_intiate == false))
                            {
                                H1.OnlyJar = true; rackinheater[0] = 0;  //Racked Picked from H1 and to place in J1}                                
                                htrdoorintiate = false;
                                proto_htrclose_intiate = true;
                                RA_Protorun_intiated = true; // Added on 22-08-2023
                                sndcmdstr = "";
                                close_htrdoor();
                            }
                            else if ((r1inx == 1) && (JarName_R1 == "H1") && (proto_htrclose_intiate == true))
                            {
                                //Enableing timer for nxt rack movement
                                H1.OnlyJar = true; rackinheater[0] = 0;
                                proto_htrclose_intiate = false;
                                r1inx++;
                                rackvalinc = true;
                            }
                            else if ((r1inx == 0) && (JarName_R1 == "L1"))
                            {
                                rackinloading[0] = 0; //Racked Picked from L1 (Loading Station) and to place in J1                                
                                r1inx++;
                                rackvalinc = true;
                            }
                            else if (r1inx > 0)
                            {
                                r1inx++;
                                rackvalinc = true;
                            }
                            if ((r1inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R1");//get_R1_positiondetails();
                                //sndcmdstr = get_Jar_positiondetails("R1");
                                if (noofdips_R1 > 0)
                                {
                                    todipflg_R1 = true;
                                    toplaceflg_R1 = false;
                                    pickplace = 3;   //For Dipping Rack
                                    r1priority = 1; //Added on 04-12-2023 1726
                                    snddipcmdstr = R1_xPos + "," + R1_yPos + "," + noofdips_R1.ToString() + "," + R1_dipdelay.ToString() + "," + R1_drydelay.ToString();
                                    d1 = d1.AddSeconds((noofdips_R1 * 5) + 31);
                                    if (continuetest > d1)
                                        ts1 = continuetest.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(continuetest);
                                    if (ts1.TotalSeconds < ((noofdips_R1 * 5) + 31))
                                    {
                                        continuetest = continuetest.AddSeconds((noofdips_R1 * 5) + 31);
                                    }
                                    //Next rack calculation
                                    if (nxtrackloading > d1)
                                        ts1 = nxtrackloading.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(nxtrackloading);
                                    if (ts1.TotalSeconds < ((noofdips_R1 * 5) + 31))
                                    {
                                        nxtrackloading = nxtrackloading.AddSeconds((noofdips_R1 * 5) + 31);
                                    }
                                }
                                else
                                {
                                    todipflg_R1 = false;
                                    toplaceflg_R1 = true;
                                    pickplace = 2;   //For Placing Rack
                                }
                                pickedflg_R1 = false;
                                topickupflg_R1 = false;
                                placedflg_R1 = false;
                                dippedflg_R1 = false;

                            }
                        }
                        else if (placedflg_R1 == true)
                        {
                            toplaceflg_R1 = false;
                            pickedflg_R1 = false;
                            placedflg_R1 = false;
                            noofdips_R1 = 0;
                            //// updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R1, R1_cnt.ToString(), DateTime.Now.ToString(), monVal, "Placed In", 0f);
                            if (r1inx == R1Protorun.Rows.Count - 1)
                            {
                                topickupflg_R1 = false;
                                toplaceflg_R1 = false;
                                pickedflg_R1 = false;
                                placedflg_R1 = false;
                                //Communication.writeCommunicationCommands("Protocol End Time");
                                Communication.writeCommunicationCommands("Rack - " + R1_cnt.ToString() + "Protocol Ended");
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R1, JarName_R1, "R" + R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                                Console.Beep(5000, 2000); //Added on 081220231711
                                r1priority = 0;
                                //Implement or Add code to move RA to Home position

                                ////////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                r1inx = 0;
                                protocolinitiateflg_R1 = false;
                                protocolStartedflg_R1 = false;
                                R1_protostart = false;
                                rackinunloading[0] = 1;
                                U1.Enabled = true;
                                //// R1_cnt = R1_cnt + 6;    /*Temporarly commented on 24112023 1602*/
                                //call Unload racks function
                                return;
                            }
                            else
                            {
                                topickupflg_R1 = true;
                                pickplace = 1;  //For Picking
                                //update_jardetails_runtime(JarName_R1, "", true, false, r1_taskcomp.ToString().Substring(11));                                
                            }
                        }
                        else if (dippedflg_R1 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R1, R1_cnt.ToString(), DateTime.Now.ToString(), monVal, "Rack Dipped", 0f);
                            todipflg_R1 = false;
                            dippedflg_R1 = false;
                            topickupflg_R1 = false;
                            pickedflg_R1 = false;
                            toplaceflg_R1 = true;
                            placedflg_R1 = false;
                            pickplace = 2;
                            r1priority = 1;
                            noofdips_R1 = 0;
                            update_jardetails_runtime(JarName_R1, "", true, false, r1_taskcomp.ToString().Substring(11));
                            //below code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                            if (r1inx > 0)
                            {
                                r1inx++;
                                rackvalinc = true;
                            }
                            if ((r1inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R1");//get_R1_positiondetails();
                            }
                            //Above code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                        }
                    }
                }
                string rackno = "";
                if ((pickplace == 2) || (pickplace == 3))
                {
                    rackno = "R" + R1_cnt.ToString();
                    //update_jardetails_runtime(JarName_R1, rackno, false, true, r1_taskcomp.ToString().Substring(11));                    
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    rackno = "";
                    //update_jardetails_runtime(JarName_R1, rackno, true, false, r1_taskcomp.ToString().Substring(11));                    
                }

                if ((sndcmdstr == "") || (noofdips_R1 > 0) && (snddipcmdstr == ""))
                    return;

                ////New code added on 22-11-2023 2348
                //check_priority_times(1);

                rareached = false;
                sensed = false;
                repeatval = 0;
                if (pickplace == 0)         //Moving Rack from Jar to Jar
                    functioncode = 1;
                else if (pickplace == 1)    //For Picking Rack from Jar
                    functioncode = 2;
                else if (pickplace == 2)    // For Placing Rack in Jar
                    functioncode = 3;
                else if (pickplace == 3)    // For Dipping RAck in Jar
                    functioncode = Communication.RA_DIP;

                //Framing Command
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                CommandName = "";
                CommandName = "Rack-" + R1_cnt.ToString();
                if (functioncode == 2)
                    CommandName = CommandName + " Picked from " + JarName_R1;
                else if (functioncode == 3)
                    CommandName = CommandName + " Placed in " + JarName_R1;
                else if (functioncode == Communication.RA_DIP)
                    CommandName = CommandName + " Dipped in " + JarName_R1;

                string cmdtosend = "";

                if (pickplace < 3)
                {
                    if ((JarName_R1.Contains("J")) || (JarName_R1.Contains("W")) || (JarName_R1.Contains("U")) || (JarName_R1.Contains("L")))      //For Normal Jars Moving Parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                        //Communication.RA_No = 1;                       
                    }
                    else if (JarName_R1.Contains("H"))  //For Heater Jars Moving parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",1";   //functioncode = 2;                                                      
                        //Communication.RA_No = 1;        //Communication.RA_No = 2;                        
                    }
                    cmdtosend = "";
                    cmdtosend = sndcmdstr;
                }
                else if (pickplace == 3) //Dipping the rack in Jar 
                {
                    cmdtosend = "";
                    cmdtosend = snddipcmdstr;
                    //Communication.RA_No = 1;
                }
                Communication.RA_No = R1_RNo;

                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                ////else if (RA1_Busystate == true)
                ////{
                ////    if(toplaceflg_R1==false)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }                        
                ////    else if (toplaceflg_R1 == true)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                ////else if (RA2_Busystate == true)
                ////{
                ////    if (toplaceflg_R1 == true)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R1 == false)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                //////Ra busy status added on 17-11-2023
                RA_Protorun_intiated = true; // Added on 22-08-2023
                if (TempReadingStarted == true)
                {
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                }
                if (functioncode == Communication.RA_PICK) R1_pickcmdissue = true;  // Added on 19122023 1138
                snd_rcvCmd(functioncode, cmdtosend);  //Picking rack from Jar & Placing rack in Jar
                r1_WaitCnt = 0;
                tmr_Cut.Enabled = false;
                tmr_r1.Enabled = true;
                tmr_r1.Interval = 500;
                //tmr_r1.Start();
                cmdsnt++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        //For 2nd Rack proto running function
        private void protocolrun_R2()
        {
            int pickplace = 0;
            Boolean rackvalinc = false;
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan();
            try
            {

                string sndcmdstr = "", snddipcmdstr = "";

                //if(chk_AllJars.Checked==true)
                //{
                if ((r2inx == 0) && (R2_protostart == false))
                {
                    System.Threading.Thread.Sleep(500);

                    //if (heatingreqflg == false)
                    //{
                    R2_cnt = RackIncremantVal;  //Modified on 24112023 1554                                                    
                    RackIncremantVal++; //Incrementing Rack value count by 1  Modified on 24112023 1554
                    //}
                    Communication.writeCommunicationCommands("Rack - " + R2_cnt.ToString() + "Protocol Started");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R2, JarName_R2, "R" + R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Started", 0f, m_Runid);
                    r2_taskcomp = DateTime.Now;
                    r2_taskcomp = r2_taskcomp.AddSeconds((int)totalprototime);
                    R2_protostart = true;
                    topickupflg_R2 = true;
                    pickplace = 1;
                    toplaceflg_R2 = false;
                    pickedflg_R2 = false;
                    placedflg_R2 = false;
                    sndcmdstr = get_Jar_positiondetails("R2");//get_R2_positiondetails();
                }
                else if (r2inx >= R2Protorun.Rows.Count)
                {
                    topickupflg_R2 = false;
                    toplaceflg_R2 = false;
                    todipflg_R2 = false;
                    pickedflg_R2 = false;
                    placedflg_R2 = false;
                    dippedflg_R2 = false;
                    Communication.writeCommunicationCommands("Rack - " + R2_cnt.ToString() + "Protocol Ended");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R2, JarName_R2, "R" + R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                    Console.Beep(5000, 2000); //Added on 081220231711
                    ////////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    r2priority = 0;
                    r2inx = 0;
                    protocolinitiateflg_R2 = false;
                    protocolStartedflg_R2 = false;
                    R2_protostart = false;
                    ////R2_cnt = R2_cnt + 6;  /*Temporarly commented on 24112023 1604*/
                    rackinunloading[1] = 1;
                    U2.Enabled = true;
                    //call Unload racks function
                    return;
                }
                else if ((r2inx >= 0) && (r2inx <= R2Protorun.Rows.Count - 1))
                {
                    if ((pickedflg_R2 == true) || (placedflg_R2 == true) || (dippedflg_R2 == true))
                    {
                        sndcmdstr = get_Jar_positiondetails("R2");//get_R2_positiondetails();
                        //sndcmdstr = get_Jar_positiondetails("R2");
                        if (pickedflg_R2 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R2, R2_cnt.ToString(), DateTime.Now.ToString(), monVal, "Picked From", 0f);
                            //pickedflg_R2 = false;
                            if ((r2inx == 1) && ((JarName_R2 == "H1") || (JarName_R2 == "H2") || (JarName_R2 == "H3")) && (proto_htrclose_intiate == false))
                            {
                                if (JarName_R2 == "H1") { H1.OnlyJar = true; rackinheater[0] = 0; } //Racked Picked from H1 and to place in J1}
                                else if (JarName_R2 == "H2") { H2.OnlyJar = true; rackinheater[1] = 0; }    //Racked Picked from H2 and to place in J1}
                                else if (JarName_R2 == "H3") { H3.OnlyJar = true; rackinheater[2] = 0; }  //Racked Picked from H3 and to place in J1
                                htrdoorintiate = false;
                                proto_htrclose_intiate = true;
                                RA_Protorun_intiated = true; // Added on 22-08-2023
                                H2.OnlyJar = true;
                                sndcmdstr = "";
                                close_htrdoor();
                            }
                            else if ((r2inx == 1) && ((JarName_R2 == "H1") || (JarName_R2 == "H2") || (JarName_R2 == "H3")) && (proto_htrclose_intiate == true))
                            {
                                //Enableing timer for next rack movement
                                proto_htrclose_intiate = false;
                                if (JarName_R2 == "H1") { H1.OnlyJar = true; rackinheater[0] = 0; } //Racked Picked from H1 and to place in J1}
                                else if (JarName_R2 == "H2") { H2.OnlyJar = true; rackinheater[1] = 0; }    //Racked Picked from H2 and to place in J1}
                                else if (JarName_R2 == "H3") { H3.OnlyJar = true; rackinheater[2] = 0; }  //Racked Picked from H3 and to place in J1
                                sndcmdstr = "";
                                r2inx++;
                                rackvalinc = true;
                            }
                            else if ((r2inx == 0) && (JarName_R2 == "L2"))
                            {
                                rackinloading[1] = 0; //Racked Picked from L2 (Loading Station) and to place in J1                                
                                r2inx++;
                                rackvalinc = true;
                            }
                            else if (r2inx > 0)
                            {
                                r2inx++;
                                rackvalinc = true;
                            }
                            if ((r2inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R2");//get_R2_positiondetails();
                                //sndcmdstr = get_Jar_positiondetails("R2");

                                if (noofdips_R2 > 0)
                                {
                                    todipflg_R2 = true;
                                    toplaceflg_R2 = false;
                                    pickplace = 3;
                                    snddipcmdstr = R2_xPos + "," + R2_yPos + "," + noofdips_R2.ToString() + "," + R2_dipdelay.ToString() + "," + R2_drydelay.ToString();
                                    r2priority = 1; //Added on 04-12-2023 1726
                                    d1 = d1.AddSeconds((noofdips_R2 * 5) + 31);
                                    if (continuetest > d1)
                                        ts1 = continuetest.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(continuetest);
                                    if (ts1.TotalSeconds < ((noofdips_R2 * 5) + 31))
                                    {
                                        continuetest = continuetest.AddSeconds((noofdips_R2 * 5) + 31);
                                    }
                                    //Next rack calculation
                                    if (nxtrackloading > d1)
                                        ts1 = nxtrackloading.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(nxtrackloading);
                                    if (ts1.TotalSeconds < ((noofdips_R2 * 5) + 31))
                                    {
                                        nxtrackloading = nxtrackloading.AddSeconds((noofdips_R2 * 5) + 31);
                                    }
                                }
                                else
                                {
                                    todipflg_R2 = false;
                                    toplaceflg_R2 = true;
                                    pickplace = 2;
                                }
                                pickedflg_R2 = false;
                                topickupflg_R2 = false;
                                placedflg_R2 = false;
                                dippedflg_R2 = false;

                            }
                        }
                        else if (placedflg_R2 == true)
                        {
                            toplaceflg_R2 = false;
                            pickedflg_R2 = false;
                            placedflg_R2 = false;
                            noofdips_R2 = 0;
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R2, R2_cnt.ToString(), DateTime.Now.ToString(), monVal, "Placed In", 0f);
                            if (r2inx == R2Protorun.Rows.Count - 1)
                            {
                                topickupflg_R2 = false;
                                toplaceflg_R2 = false;
                                pickedflg_R2 = false;
                                placedflg_R2 = false;
                                Communication.writeCommunicationCommands("R" + R2_cnt.ToString() + "Protocol End Time");
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R2, JarName_R2, "R" + R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                                r2priority = 0;
                                Console.Beep(5000, 2000); //Added on 081220231711
                                //Implement or Add code to move RA to Home position
                                //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                r2inx = 0;
                                protocolinitiateflg_R2 = false;
                                protocolStartedflg_R2 = false;
                                R2_protostart = false;
                                //////R2_cnt = R2_cnt + 6;   /*Commented on 24112023 1607*/
                                rackinunloading[1] = 1;
                                U2.Enabled = true;
                                //call Unload racks function
                                return;
                            }
                            else
                            {
                                topickupflg_R2 = true;
                                pickplace = 1;
                                //update_jardetails_runtime(JarName_R2, "", true, false, r2_taskcomp.ToString().Substring(11));
                            }
                        }
                        else if (dippedflg_R2 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R2, R2_cnt.ToString(), DateTime.Now.ToString(), monVal, "Dipped In", 0f);
                            todipflg_R2 = false;
                            dippedflg_R2 = false;
                            topickupflg_R2 = false;
                            pickedflg_R2 = false;
                            toplaceflg_R2 = true;
                            r2priority = 1;
                            placedflg_R2 = false;
                            pickplace = 2;
                            noofdips_R2 = 0;
                            update_jardetails_runtime(JarName_R2, "", true, false, r2_taskcomp.ToString().Substring(11));
                            //below code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                            if (r2inx > 0)
                            {
                                r2inx++;
                                rackvalinc = true;
                            }
                            if ((r2inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R2");//get_R2_positiondetails();
                            }
                            //Above code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                        }
                    }
                }
                string rackno = "";
                if ((pickplace == 2) || (pickplace == 3))
                {
                    rackno = "R" + R2_cnt.ToString();
                    //update_jardetails_runtime(JarName_R2, rackno, false, true, r2_taskcomp.ToString().Substring(11));
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    rackno = "";
                    //update_jardetails_runtime(JarName_R2, rackno, true, false, r2_taskcomp.ToString().Substring(11));
                }

                if ((sndcmdstr == "") || (noofdips_R2 > 0) && (snddipcmdstr == ""))
                    return;

                //New code added on 22-11-2023 2348
                //check_priority_times(2);

                rareached = false;
                sensed = false;
                repeatval = 0;
                if (pickplace == 0)         //Moving Rack from Jar to Jar
                    functioncode = 1;
                else if (pickplace == 1)    //For Picking Rack from Jar
                    functioncode = 2;
                else if (pickplace == 2)    // For Placing Rack in Jar
                    functioncode = 3;
                else if (pickplace == 3)    // For Dipping RAck in Jar
                    functioncode = Communication.RA_DIP;

                //Framing Command
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                CommandName = "";
                CommandName = "Rack-" + R2_cnt.ToString();
                if (functioncode == 2)
                    CommandName = CommandName + " Picked from " + JarName_R2;
                else if (functioncode == 3)
                    CommandName = CommandName + " Placed in " + JarName_R2;
                else if (functioncode == Communication.RA_DIP)
                    CommandName = CommandName + " Dipped in " + JarName_R2;

                string cmdtosend = "";

                if (pickplace < 3)
                {
                    if ((JarName_R2.Contains("J")) || (JarName_R2.Contains("W")) || (JarName_R2.Contains("U")) || (JarName_R2.Contains("L")))      //For Normal Jars Moving Parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                        //Communication.RA_No = 1;
                    }
                    else if (JarName_R2.Contains("H"))  //For Heater Jars Moving parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",1";   //functioncode = 2;                                                      
                        //Communication.RA_No = 1;        //Communication.RA_No = 2;                        
                    }
                    cmdtosend = "";
                    cmdtosend = sndcmdstr;
                }
                else if (pickplace == 3) //Dipping the rack in Jar 
                {
                    cmdtosend = "";
                    cmdtosend = snddipcmdstr;
                    //Communication.RA_No = 1;
                }
                Communication.RA_No = R2_RNo;

                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                ////else if (RA1_Busystate == true)
                ////{
                ////    if (toplaceflg_R2 == false)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R2 == true)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                ////else if (RA2_Busystate == true)
                ////{
                ////    if (toplaceflg_R2 == true)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R2 == false)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                //////Ra busy status added on 17-11-2023

                RA_Protorun_intiated = true; // Added on 22-08-2023
                if (TempReadingStarted == true)
                {
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                }
                if (functioncode == Communication.RA_PICK) R2_pickcmdissue = true;  // Added on 19122023 1138
                snd_rcvCmd(functioncode, cmdtosend);  //Picking rack from Jar & Placing rack in Jar
                r2_WaitCnt = 0;
                tmr_Cut.Enabled = false;
                tmr_r2.Enabled = true;
                tmr_r2.Interval = 500;
                //tmr_r2.Start();
                cmdsnt++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        //For 3rd Rack proto running function

        private void protocolrun_R3()
        {
            int pickplace = 0;
            Boolean rackvalinc = false;
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan();
            try
            {
                string sndcmdstr = "", snddipcmdstr = "";
                if ((r3inx == 0) && (R3_protostart == false))
                {
                    System.Threading.Thread.Sleep(500);
                    //if (heatingreqflg == false)
                    //{
                    R3_cnt = RackIncremantVal;  //Modified on 24112023 1554                                                    
                    RackIncremantVal++; //Incrementing Rack value count by 1  Modified on 24112023 1554
                    //}
                    Communication.writeCommunicationCommands("Rack - " + "R" + R3_cnt.ToString() + "Protocol Started");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R3, JarName_R3, "R" + R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Started", 0f, m_Runid);
                    r3_taskcomp = DateTime.Now;
                    r3_taskcomp = r3_taskcomp.AddSeconds((int)totalprototime);
                    R3_protostart = true;
                    topickupflg_R3 = true;
                    pickplace = 1;
                    toplaceflg_R3 = false;
                    todipflg_R3 = false;
                    pickedflg_R3 = false;
                    placedflg_R3 = false;
                    dippedflg_R3 = false;
                    sndcmdstr = get_Jar_positiondetails("R3");//get_R3_positiondetails();
                }
                else if (r3inx >= R3Protorun.Rows.Count)
                {
                    topickupflg_R3 = false;
                    toplaceflg_R3 = false;
                    todipflg_R3 = false;
                    pickedflg_R3 = false;
                    placedflg_R3 = false;
                    dippedflg_R3 = false;
                    Communication.writeCommunicationCommands("Rack - " + "R" + R3_cnt.ToString() + "Protocol Ended");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R3, JarName_R3, "R" + R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                    //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    Console.Beep(5000, 2000); //Added on 081220231711
                    r3priority = 0;
                    r3inx = 0;
                    protocolinitiateflg_R3 = false;
                    protocolStartedflg_R3 = false;
                    R3_protostart = false;
                    RegName_R3 = ""; JarName_R3 = "";
                    //////R3_cnt = R3_cnt + 6;  /*Commented on 241120231608*/
                    rackinunloading[2] = 1;
                    U3.Enabled = true;
                    //call Unload racks function
                    return;
                }
                else if ((r3inx >= 0) && (r3inx <= R3Protorun.Rows.Count - 1))
                {
                    if ((pickedflg_R3 == true) || (placedflg_R3 == true) || (dippedflg_R3 == true))
                    {
                        sndcmdstr = get_Jar_positiondetails("R3");
                        if (pickedflg_R3 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R3, R3_cnt.ToString(), DateTime.Now.ToString(), monVal, "Picked From", 0f);
                            if ((r3inx == 1) && (JarName_R3 == "H3") && (proto_htrclose_intiate == false))
                            {
                                rackinheater[2] = 0;    //Racked Picked from H1 and to place in J1
                                htrdoorintiate = false;
                                proto_htrclose_intiate = true;
                                RA_Protorun_intiated = true; // Added on 22-08-2023
                                H3.OnlyJar = true;
                                sndcmdstr = "";
                                close_htrdoor();
                            }
                            else if ((r3inx == 1) && (JarName_R3 == "H3") && (proto_htrclose_intiate == true))
                            {
                                //Enableing timer for nxt rack movement
                                ////tmr_nextrack.Enabled = true;
                                ////tmr_nextrack.Interval = 120000;  // 1 Minutes after 2 minutes second racks has to lift from Lading Jars and place in heater racks.
                                proto_htrclose_intiate = false;
                                H3.OnlyJar = true;
                                sndcmdstr = "";
                                r3inx++;
                                rackvalinc = true;

                                ////////tmr_nextrack.Enabled = true;
                                ////////nxtrackloading = System.DateTime.Now;
                                //////////////nxtrackloading = nxtrackloading.AddSeconds(nxtracktime);
                                ////////nxtrackloading = nxtrackloading.AddSeconds(60);
                                ////////tmr_nextrack.Interval = 1000;

                            }
                            else if ((r3inx == 0) && (JarName_R3 == "L3"))
                            {
                                rackinloading[2] = 0;
                                //Enableing timer to continue the process
                                ////////tmr_nextrack.Enabled = true;
                                ////////nxtrackloading = System.DateTime.Now;
                                //////////nxtrackloading = nxtrackloading.AddSeconds(525);
                                ////////nxtrackloading = nxtrackloading.AddSeconds(nxtracktime);
                                ////////tmr_nextrack.Interval = 1000;

                                r3inx++;
                                rackvalinc = true;
                            }
                            else if (r3inx > 0)
                            {
                                r3inx++;
                                rackvalinc = true;
                            }
                            if ((r3inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R3");//get_R3_positiondetails();

                                if (noofdips_R3 > 0)
                                {
                                    todipflg_R3 = true;
                                    toplaceflg_R3 = false;
                                    pickplace = 3;
                                    r3priority = 1; //Added on 04-12-2023 1726
                                    snddipcmdstr = R3_xPos + "," + R3_yPos + "," + noofdips_R3.ToString() + "," + R3_dipdelay.ToString() + "," + R3_drydelay.ToString();
                                    d1 = d1.AddSeconds((noofdips_R3 * 5) + 31);
                                    if (continuetest > d1)
                                        ts1 = continuetest.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(continuetest);
                                    if (ts1.TotalSeconds < ((noofdips_R3 * 5) + 31))
                                    {
                                        continuetest = continuetest.AddSeconds((noofdips_R3 * 5) + 31);
                                    }
                                    //Next rack calculation
                                    if (nxtrackloading > d1)
                                        ts1 = nxtrackloading.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(nxtrackloading);
                                    if (ts1.TotalSeconds < ((noofdips_R3 * 5) + 31))
                                    {
                                        nxtrackloading = nxtrackloading.AddSeconds((noofdips_R3 * 5) + 31);
                                    }
                                }
                                else
                                {
                                    todipflg_R3 = false;
                                    toplaceflg_R3 = true;
                                    pickplace = 2;
                                }
                                pickedflg_R3 = false;
                                topickupflg_R3 = false;
                                placedflg_R3 = false;
                                dippedflg_R3 = false;
                            }
                        }
                        else if (placedflg_R3 == true)
                        {
                            toplaceflg_R3 = false;
                            pickedflg_R3 = false;
                            placedflg_R3 = false;
                            noofdips_R3 = 0;
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R3, R3_cnt.ToString(), DateTime.Now.ToString(), monVal, "Placed In", 0f);
                            if (r3inx == R3Protorun.Rows.Count - 1)
                            {
                                topickupflg_R3 = false;
                                toplaceflg_R3 = false;
                                pickedflg_R3 = false;
                                placedflg_R3 = false;
                                Communication.writeCommunicationCommands("Rack - " + R3_cnt.ToString() + "Protocol End Time");
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R3, JarName_R3, "R" + R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                                r3priority = 0;
                                //Implement or Add code to move RA to Home position
                                Console.Beep(5000, 2000); //Added on 081220231711
                                //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                r3inx = 0;
                                protocolinitiateflg_R3 = false;
                                protocolStartedflg_R3 = false;
                                R3_protostart = false;
                                RegName_R3 = ""; JarName_R3 = "";
                                rackinunloading[2] = 1;
                                U3.Enabled = true;
                                //////R3_cnt = R3_cnt + 6;Console.Beep(5000, 2000); //Added on 081220231711
                                //call Unload racks function
                                return;
                            }
                            else
                            {
                                topickupflg_R3 = true;
                                pickplace = 1;
                                //update_jardetails_runtime(JarName_R3, "", true, false, r3_taskcomp.ToString().Substring(11));
                            }
                        }
                        else if (dippedflg_R3 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R3, R3_cnt.ToString(), DateTime.Now.ToString(), monVal, "Dipped In", 0f);
                            todipflg_R3 = false;
                            dippedflg_R3 = false;
                            topickupflg_R3 = false;
                            pickedflg_R3 = false;
                            toplaceflg_R3 = true;
                            placedflg_R3 = false;
                            pickplace = 2;
                            r3priority = 1;
                            noofdips_R3 = 0;
                            update_jardetails_runtime(JarName_R3, "", true, false, r3_taskcomp.ToString().Substring(11));
                            //below code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                            if (r3inx > 0)
                            {
                                r3inx++;
                                rackvalinc = true;
                            }
                            if ((r3inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R3");//get_R3_positiondetails();
                            }
                            //Above code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                        }
                    }
                }

                string rackno = "";
                if ((pickplace == 2) || (pickplace == 3))
                {
                    rackno = "R" + R3_cnt.ToString();
                    //update_jardetails_runtime(JarName_R3, rackno, false, true, r3_taskcomp.ToString().Substring(11));
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    rackno = "";
                    //update_jardetails_runtime(JarName_R3, rackno, true, false, r3_taskcomp.ToString().Substring(11));
                }

                if ((sndcmdstr == "") || (noofdips_R3 > 0) && (snddipcmdstr == ""))
                    return;

                //New code added on 22-11-2023 2348
                ////check_priority_times(3);

                rareached = false;
                sensed = false;
                repeatval = 0;
                if (pickplace == 0)         //Moving Rack from Jar to Jar
                    functioncode = 1;
                else if (pickplace == 1)    //For Picking Rack from Jar
                    functioncode = 2;
                else if (pickplace == 2)    // For Placing Rack in Jar
                    functioncode = 3;
                else if (pickplace == 3)    // For Dipping RAck in Jar
                    functioncode = Communication.RA_DIP;

                //Framing Command
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                CommandName = "";
                CommandName = "Rack-" + R3_cnt.ToString();
                if (functioncode == 2)
                    CommandName = CommandName + " Picked from " + JarName_R3;
                else if (functioncode == 3)
                    CommandName = CommandName + " Placed in " + JarName_R3;
                else if (functioncode == Communication.RA_DIP)
                    CommandName = CommandName + " Dipped in " + JarName_R3;


                //////if (pickplace < 3)
                //////{
                //////    if ((JarName_R3.Contains("J")) || (JarName_R3.Contains("W")) || (JarName_R3.Contains("U")) || (JarName_R3.Contains("L")))      //For Normal Jars Moving Parameter                    
                //////    {
                //////        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                //////        //Communication.RA_No = 1;
                //////    }
                //////    else if (JarName_R3.Contains("H"))  //For Heater Jars Moving parameter                    
                //////    {
                //////        sndcmdstr = sndcmdstr + ",1"; //functioncode = 2;
                //////                                      //Communication.RA_No = 2;
                //////        //Communication.RA_No = 1;
                //////    }

                //////    RA_Protorun_intiated = true; // Added on 22-08-2023
                //////    if (TempReadingStarted == true)
                //////    {
                //////        tmr_tempstart.Enabled = true;
                //////        temp_restartincub = System.DateTime.Now;
                //////        temp_restartincub = temp_restartincub.AddSeconds(10);
                //////        tmr_temp.Enabled = false;
                //////        tmr_temp_incub.Enabled = false;
                //////    }
                //////    snd_rcvCmd(functioncode, sndcmdstr);  //Picking rack from Jar & Placing rack in Jar
                //////}
                //////else if (pickplace == 3) //Dipping the rack in Jar 
                //////{
                //////    //Communication.RA_No = 1;
                //////    RA_Protorun_intiated = true; // Added on 22-08-2023
                //////    if (TempReadingStarted == true)
                //////    {
                //////        tmr_tempstart.Enabled = true;
                //////        temp_restartincub = System.DateTime.Now;
                //////        temp_restartincub = temp_restartincub.AddSeconds(10);
                //////        tmr_temp.Enabled = false;
                //////        tmr_temp_incub.Enabled = false;
                //////    }
                //////    snd_rcvCmd(functioncode, snddipcmdstr);
                //////}
                string cmdtosend = "";

                if (pickplace < 3)
                {
                    if ((JarName_R3.Contains("J")) || (JarName_R3.Contains("W")) || (JarName_R3.Contains("U")) || (JarName_R3.Contains("L")))      //For Normal Jars Moving Parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                        //Communication.RA_No = 1;
                    }
                    else if (JarName_R3.Contains("H"))  //For Heater Jars Moving parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",1";   //functioncode = 2;                                                      
                        //Communication.RA_No = 1;        //Communication.RA_No = 2;                        
                    }
                    cmdtosend = "";
                    cmdtosend = sndcmdstr;
                }
                else if (pickplace == 3) //Dipping the rack in Jar 
                {
                    cmdtosend = "";
                    cmdtosend = snddipcmdstr;
                    //Communication.RA_No = 1;
                }
                Communication.RA_No = R3_RNo;
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                ////else if (RA1_Busystate == true)
                ////{
                ////    if (toplaceflg_R3 == false)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R3 == true)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                ////else if (RA2_Busystate == true)
                ////{
                ////    if (toplaceflg_R3 == true)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R3 == false)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                //////Ra busy status added on 17-11-2023

                RA_Protorun_intiated = true; // Added on 22-08-2023
                if (TempReadingStarted == true)
                {
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                }
                if (functioncode == Communication.RA_PICK) R3_pickcmdissue = true;  // Added on 19122023 1138
                snd_rcvCmd(functioncode, cmdtosend);  //Picking rack from Jar & Placing rack in Jar
                r3_WaitCnt = 0;
                tmr_Cut.Enabled = false;
                tmr_r3.Enabled = true;
                tmr_r3.Interval = 500;
                //tmr_r3.Start();
                cmdsnt++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        //4th Rack protorun code
        private void protocolrun_R4()
        {
            int pickplace = 0;
            Boolean rackvalinc = false;
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan();
            try
            {
                string sndcmdstr = "", snddipcmdstr = "";

                //if(chk_AllJars.Checked==true)
                //{
                if ((r4inx == 0) && (R4_protostart == false))
                {
                    System.Threading.Thread.Sleep(500);
                    //if (heatingreqflg == false)
                    //{
                    R4_cnt = RackIncremantVal;  //Modified on 24112023 1554                                                    
                    RackIncremantVal++; //Incrementing Rack value count by 1  Modified on 24112023 1554
                    //}
                    Communication.writeCommunicationCommands("Rack - " + R4_cnt.ToString() + "Protocol Started");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R4, JarName_R4, "R" + R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Started", 0f, m_Runid);
                    r4_taskcomp = DateTime.Now;
                    r4_taskcomp = r4_taskcomp.AddSeconds((int)totalprototime);
                    R4_protostart = true;
                    topickupflg_R4 = true;
                    pickplace = 1;
                    toplaceflg_R4 = false;
                    pickedflg_R4 = false;
                    placedflg_R4 = false;
                    sndcmdstr = get_Jar_positiondetails("R4");
                }
                else if (r4inx >= R4Protorun.Rows.Count)
                {
                    topickupflg_R4 = false;
                    toplaceflg_R4 = false;
                    todipflg_R4 = false;
                    pickedflg_R4 = false;
                    placedflg_R4 = false;
                    dippedflg_R4 = false;
                    Communication.writeCommunicationCommands("Rack - " + R4_cnt.ToString() + "Protocol Ended");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R4, JarName_R4, "R" + R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                    Console.Beep(5000, 5000); //Added on 081220231711
                    //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    r4inx = 0;
                    r4priority = 0;
                    protocolinitiateflg_R4 = false;
                    protocolStartedflg_R4 = false;
                    R4_protostart = false;
                    rackinunloading[3] = 1;
                    U4.Enabled = true;
                    ///////R4_cnt = R4_cnt + 6;     /*Commented on 24112023 1616*/
                    //call Unload racks function
                    return;
                }
                else if ((r4inx >= 0) && (r4inx <= R4Protorun.Rows.Count - 1))
                {
                    if ((pickedflg_R4 == true) || (placedflg_R4 == true) || (dippedflg_R4 == true))
                    {
                        sndcmdstr = get_Jar_positiondetails("R4");
                        if (pickedflg_R4 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R4, R4_cnt.ToString(), DateTime.Now.ToString(), monVal, "Picked From", 0f);
                            if ((r4inx == 1) && (JarName_R4 == "H1") && (proto_htrclose_intiate == false))
                            {
                                rackinheater[0] = 0;    //Racked Picked from H1 and to place in J1
                                htrdoorintiate = false;
                                proto_htrclose_intiate = true;
                                RA_Protorun_intiated = true; // Added on 22-08-2023
                                H1.OnlyJar = true;
                                sndcmdstr = "";
                                close_htrdoor();
                            }
                            else if ((r4inx == 1) && (JarName_R4 == "H1") && (proto_htrclose_intiate == true))
                            {
                                //Enableing timer for nxt rack movement
                                proto_htrclose_intiate = false;
                                H1.OnlyJar = true;
                                sndcmdstr = "";
                                ////////int nxttim = 0;
                                ////////if ((rackinheater[1] == 1) || (rackinheater[2] == 1))
                                ////////    nxttim = nxtracktime;
                                ////////else if ((rackinheater[1] == 0) && (rackinheater[2] == 0))
                                ////////    nxttim = 60;
                                ////////tmr_nextrack.Enabled = true;
                                ////////nxtrackloading = System.DateTime.Now;
                                ////////nxtrackloading = nxtrackloading.AddSeconds(nxttim);
                                ////////tmr_nextrack.Interval = 1000;
                                r4inx++;
                                rackvalinc = true;
                            }
                            else if ((r4inx == 0) && (JarName_R4 == "L1"))
                            {
                                rackinloading[0] = 0; //Racked Picked from L1 (Loading Station) and to place in J1
                                //////////tmr_nextrack.Enabled = true;
                                //////////nxtrackloading = System.DateTime.Now;
                                ////////////nxtrackloading = nxtrackloading.AddSeconds(525);
                                //////////nxtrackloading = nxtrackloading.AddSeconds(nxtracktime);
                                //////////tmr_nextrack.Interval = 1000;
                                r4inx++;
                                rackvalinc = true;
                            }
                            else if (r4inx > 0)
                            {
                                r4inx++;
                                rackvalinc = true;
                            }
                            if ((r4inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                //sndcmdstr = get_R4_positiondetails();
                                sndcmdstr = get_Jar_positiondetails("R4");
                                if (noofdips_R4 > 0)
                                {
                                    todipflg_R4 = true;
                                    toplaceflg_R4 = false;
                                    pickplace = 3;
                                    r4priority = 1; //Added on 04-12-2023 1726
                                    snddipcmdstr = R4_xPos + "," + R4_yPos + "," + noofdips_R4.ToString() + "," + R4_dipdelay.ToString() + "," + R4_drydelay.ToString();

                                    d1 = d1.AddSeconds((noofdips_R4 * 5) + 31);
                                    if (continuetest > d1)
                                        ts1 = continuetest.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(continuetest);
                                    if (ts1.TotalSeconds < ((noofdips_R4 * 5) + 31))
                                    {
                                        continuetest = continuetest.AddSeconds((noofdips_R4 * 5) + 31);
                                    }
                                    //Next rack calculation
                                    if (nxtrackloading > d1)
                                        ts1 = nxtrackloading.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(nxtrackloading);
                                    if (ts1.TotalSeconds < ((noofdips_R4 * 5) + 31))
                                    {
                                        nxtrackloading = nxtrackloading.AddSeconds((noofdips_R4 * 5) + 31);
                                    }
                                }
                                else
                                {
                                    todipflg_R4 = false;
                                    toplaceflg_R4 = true;
                                    pickplace = 2;
                                }
                                pickedflg_R4 = false;
                                topickupflg_R4 = false;
                                placedflg_R4 = false;
                                dippedflg_R4 = false;

                            }
                        }
                        else if (placedflg_R4 == true)
                        {
                            toplaceflg_R4 = false;
                            pickedflg_R4 = false;
                            placedflg_R4 = false;
                            noofdips_R4 = 0;
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R4, R4_cnt.ToString(), DateTime.Now.ToString(), monVal, "Placed In", 0f);
                            if (r4inx == R4Protorun.Rows.Count - 1)
                            {
                                topickupflg_R4 = false;
                                toplaceflg_R4 = false;
                                pickedflg_R4 = false;
                                placedflg_R4 = false;
                                Communication.writeCommunicationCommands("Rack - " + R4_cnt.ToString() + "Protocol End Time");
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R4, JarName_R4, "R" + R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                                r4priority = 0;
                                Console.Beep(5000, 5000); //Added on 081220231711
                                                          //Implement or Add code to move RA to Home position

                                //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                r4inx = 0;
                                protocolinitiateflg_R4 = false;
                                protocolStartedflg_R4 = false;
                                R4_protostart = false;
                                rackinunloading[3] = 1;
                                U4.Enabled = true;
                                //////R4_cnt = R4_cnt + 6;  /*Commented on 24112023 1620*/
                                //call Unload racks function
                                return;
                            }
                            else
                            {
                                topickupflg_R4 = true;
                                pickplace = 1;
                                //update_jardetails_runtime(JarName_R4, "", true, false, r4_taskcomp.ToString().Substring(11));
                            }
                        }
                        else if (dippedflg_R4 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R4, R4_cnt.ToString(), DateTime.Now.ToString(), monVal, "Dipped In", 0f);
                            todipflg_R4 = false;
                            dippedflg_R4 = false;
                            topickupflg_R4 = false;
                            pickedflg_R4 = false;
                            toplaceflg_R4 = true;
                            placedflg_R4 = false;
                            pickplace = 2;
                            r4priority = 1;
                            noofdips_R4 = 0;
                            update_jardetails_runtime(JarName_R4, "", true, false, r4_taskcomp.ToString().Substring(11));
                            //below code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                            if (r4inx > 0)
                            {
                                r4inx++;
                                rackvalinc = true;
                            }
                            if ((r4inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R4");
                            }
                            //Above code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                        }
                    }
                }



                string rackno = "";
                if ((pickplace == 2) || (pickplace == 3))
                {
                    rackno = "R" + R4_cnt.ToString();
                    //update_jardetails_runtime(JarName_R4, rackno, false, true, r4_taskcomp.ToString().Substring(11));
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    rackno = "";
                    //update_jardetails_runtime(JarName_R4, rackno, true, false, r4_taskcomp.ToString().Substring(11));
                }

                if ((sndcmdstr == "") || (noofdips_R4 > 0) && (snddipcmdstr == ""))
                    return;
                ////New code added on 22-11-2023 2348
                //check_priority_times(4);

                rareached = false;
                sensed = false;
                repeatval = 0;
                if (pickplace == 0)         //Moving Rack from Jar to Jar
                    functioncode = 1;
                else if (pickplace == 1)    //For Picking Rack from Jar
                    functioncode = 2;
                else if (pickplace == 2)    // For Placing Rack in Jar
                    functioncode = 3;
                else if (pickplace == 3)    // For Dipping RAck in Jar
                    functioncode = Communication.RA_DIP;

                //Framing Command
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                CommandName = "";
                CommandName = "Rack-" + R4_cnt.ToString();
                if (functioncode == 2)
                    CommandName = CommandName + " Picked from " + JarName_R4;
                else if (functioncode == 3)
                    CommandName = CommandName + " Placed in " + JarName_R4;
                else if (functioncode == Communication.RA_DIP)
                    CommandName = CommandName + " Dipped in " + JarName_R4;


                ////if (pickplace < 3)
                ////{
                ////    if ((JarName_R4.Contains("J")) || (JarName_R4.Contains("W")) || (JarName_R4.Contains("U")) || (JarName_R4.Contains("L")))      //For Normal Jars Moving Parameter                    
                ////    {
                ////        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                ////        Communication.RA_No = 1;
                ////    }
                ////    else if (JarName_R4.Contains("H"))  //For Heater Jars Moving parameter                    
                ////    {
                ////        sndcmdstr = sndcmdstr + ",1"; //functioncode = 2;
                ////                                      //Communication.RA_No = 2;
                ////        Communication.RA_No = 1;
                ////    }
                ////    RA_Protorun_intiated = true; // Added on 22-08-2023
                ////    if (TempReadingStarted == true)
                ////    {
                ////        tmr_tempstart.Enabled = true;
                ////        temp_restartincub = System.DateTime.Now;
                ////        temp_restartincub = temp_restartincub.AddSeconds(10);
                ////        tmr_temp.Enabled = false;
                ////        tmr_temp_incub.Enabled = false;
                ////    }
                ////    snd_rcvCmd(functioncode, sndcmdstr);  //Picking rack from Jar & Placing rack in Jar
                ////}
                ////else if (pickplace == 3) //Dipping the rack in Jar 
                ////{
                ////    Communication.RA_No = 1;
                ////    RA_Protorun_intiated = true; // Added on 22-08-2023
                ////    if (TempReadingStarted == true)
                ////    {
                ////        tmr_tempstart.Enabled = true;
                ////        temp_restartincub = System.DateTime.Now;
                ////        temp_restartincub = temp_restartincub.AddSeconds(10);
                ////        tmr_temp.Enabled = false;
                ////        tmr_temp_incub.Enabled = false;
                ////    }
                ////    snd_rcvCmd(functioncode, snddipcmdstr);
                ////}
                string cmdtosend = "";

                if (pickplace < 3)
                {
                    if ((JarName_R4.Contains("J")) || (JarName_R4.Contains("W")) || (JarName_R4.Contains("U")) || (JarName_R4.Contains("L")))      //For Normal Jars Moving Parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                        //Communication.RA_No = 1;
                    }
                    else if (JarName_R4.Contains("H"))  //For Heater Jars Moving parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",1";   //functioncode = 2;                                                      
                        //Communication.RA_No = 1;        //Communication.RA_No = 2;                        
                    }
                    cmdtosend = "";
                    cmdtosend = sndcmdstr;
                }
                else if (pickplace == 3) //Dipping the rack in Jar 
                {
                    cmdtosend = "";
                    cmdtosend = snddipcmdstr;
                    //Communication.RA_No = 1;
                }
                Communication.RA_No = R4_RNo;
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                ////else if (RA1_Busystate == true)
                ////{
                ////    if (toplaceflg_R4 == false)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R4 == true)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                ////else if (RA2_Busystate == true)
                ////{
                ////    if (toplaceflg_R4 == true)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R4 == false)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                //////Ra busy status added on 17-11-2023

                RA_Protorun_intiated = true; // Added on 22-08-2023
                if (TempReadingStarted == true)
                {
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                }
                if (functioncode == Communication.RA_PICK) R4_pickcmdissue = true;  // Added on 19122023 1138
                snd_rcvCmd(functioncode, cmdtosend);  //Picking rack from Jar or Placing rack in Jar or & Dipping rack in Jar
                r4_WaitCnt = 0;
                tmr_Cut.Enabled = false;
                tmr_r4.Enabled = true;
                tmr_r4.Interval = 500;
                //tmr_r1.Start();
                cmdsnt++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        //5th Rack protorun code
        private void protocolrun_R5()
        {
            int pickplace = 0;
            Boolean rackvalinc = false;
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan();
            try
            {
                string sndcmdstr = "", snddipcmdstr = "";

                //if(chk_AllJars.Checked==true)
                //{
                if ((r5inx == 0) && (R5_protostart == false))
                {
                    System.Threading.Thread.Sleep(500);
                    //if (heatingreqflg == false)
                    //{
                    R5_cnt = RackIncremantVal;  //Modified on 24112023 1554                                                    
                    RackIncremantVal++; //Incrementing Rack value count by 1  Modified on 24112023 1554
                    //}

                    Communication.writeCommunicationCommands("Rack - " + R5_cnt.ToString() + "Protocol Started");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R5, JarName_R5, "R" + R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Started", 0f, m_Runid);
                    r5_taskcomp = DateTime.Now;
                    r5_taskcomp = r5_taskcomp.AddSeconds((int)totalprototime);
                    R5_protostart = true;
                    topickupflg_R5 = true;
                    pickplace = 1;
                    toplaceflg_R5 = false;
                    pickedflg_R5 = false;
                    placedflg_R5 = false;
                    sndcmdstr = get_Jar_positiondetails("R5");
                }
                else if (r5inx >= R5Protorun.Rows.Count)
                {
                    topickupflg_R5 = false;
                    toplaceflg_R5 = false;
                    todipflg_R5 = false;
                    pickedflg_R5 = false;
                    placedflg_R5 = false;
                    dippedflg_R5 = false;
                    Communication.writeCommunicationCommands("Rack - " + R5_cnt.ToString() + "Protocol Ended");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R5, JarName_R5, "R" + R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                    Console.Beep(5000, 5000); //Added on 081220231711
                    //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    r5inx = 0;
                    r5priority = 0;
                    protocolinitiateflg_R5 = false;
                    protocolStartedflg_R5 = false;
                    R5_protostart = false;
                    rackinunloading[4] = 1;
                    U5.Enabled = true;
                    //////R5_cnt = R5_cnt + 6;  /*Commented on 24112023 1622*/
                    //call Unload racks function
                    return;
                }
                else if ((r5inx >= 0) && (r5inx <= R5Protorun.Rows.Count - 1))
                {
                    if ((pickedflg_R5 == true) || (placedflg_R5 == true) || (dippedflg_R5 == true))
                    {
                        sndcmdstr = get_Jar_positiondetails("R5");
                        if (pickedflg_R5 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R5, R5_cnt.ToString(), DateTime.Now.ToString(), monVal, "Picked From", 0f);
                            if ((r5inx == 1) && (JarName_R5 == "H2") && (proto_htrclose_intiate == false))
                            {
                                rackinheater[1] = 0;    //Racked Picked from H1 and to place in J1
                                htrdoorintiate = false;
                                proto_htrclose_intiate = true;
                                RA_Protorun_intiated = true; // Added on 22-08-2023
                                H2.OnlyJar = true;
                                sndcmdstr = "";
                                close_htrdoor();
                            }
                            else if ((r5inx == 1) && (JarName_R5 == "H2") && (proto_htrclose_intiate == true))
                            {
                                //Enableing timer for nxt rack movement
                                proto_htrclose_intiate = false;
                                H2.OnlyJar = true;
                                sndcmdstr = "";

                                ////int nxttim = 0;
                                ////if (rackinheater[2] == 1)
                                ////    nxttim = nxtracktime;
                                ////else
                                ////    nxttim = 60;
                                ////tmr_nextrack.Enabled = true;
                                ////nxtrackloading = System.DateTime.Now;
                                ////nxtrackloading = nxtrackloading.AddSeconds(nxttim);
                                ////tmr_nextrack.Interval = 1000;
                                r5inx++;
                                rackvalinc = true;
                            }
                            else if ((r5inx == 0) && (JarName_R5 == "L2"))
                            {
                                rackinloading[1] = 0; //Racked Picked from L1 (Loading Station) and to place in J1                                
                                ////tmr_nextrack.Enabled = true;
                                ////nxtrackloading = System.DateTime.Now;
                                //////nxtrackloading = nxtrackloading.AddSeconds(525);
                                ////nxtrackloading = nxtrackloading.AddSeconds(nxtracktime);
                                ////tmr_nextrack.Interval = 1000;
                                r5inx++;
                                rackvalinc = true;
                            }
                            else if (r5inx > 0)
                            {
                                r5inx++;
                                rackvalinc = true;
                            }
                            if ((r5inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                //sndcmdstr = get_R5_positiondetails();
                                sndcmdstr = get_Jar_positiondetails("R5");
                                if (noofdips_R5 > 0)
                                {
                                    todipflg_R5 = true;
                                    toplaceflg_R5 = false;
                                    pickplace = 3;
                                    snddipcmdstr = R5_xPos + "," + R5_yPos + "," + noofdips_R5.ToString() + "," + R5_dipdelay.ToString() + "," + R5_drydelay.ToString();
                                    r5priority = 1; //Added on 04-12-2023 1726
                                    d1 = d1.AddSeconds((noofdips_R5 * 5) + 31);
                                    if (continuetest > d1)
                                        ts1 = continuetest.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(continuetest);
                                    if (ts1.TotalSeconds < ((noofdips_R5 * 5) + 31))
                                    {
                                        continuetest = continuetest.AddSeconds((noofdips_R5 * 5) + 31);
                                    }
                                    //Next rack calculation
                                    if (nxtrackloading > d1)
                                        ts1 = nxtrackloading.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(nxtrackloading);
                                    if (ts1.TotalSeconds < ((noofdips_R5 * 5) + 31))
                                    {
                                        nxtrackloading = nxtrackloading.AddSeconds((noofdips_R5 * 5) + 31);
                                    }
                                }
                                else
                                {
                                    todipflg_R5 = false;
                                    toplaceflg_R5 = true;
                                    pickplace = 2;
                                }
                                pickedflg_R5 = false;
                                topickupflg_R5 = false;
                                placedflg_R5 = false;
                                dippedflg_R5 = false;

                            }
                        }
                        else if (placedflg_R5 == true)
                        {
                            toplaceflg_R5 = false;
                            pickedflg_R5 = false;
                            placedflg_R5 = false;
                            noofdips_R5 = 0;
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R5, R5_cnt.ToString(), DateTime.Now.ToString(), monVal, "Placed In", 0f);
                            if (r5inx == R5Protorun.Rows.Count - 1)
                            {
                                topickupflg_R5 = false;
                                toplaceflg_R5 = false;
                                pickedflg_R5 = false;
                                placedflg_R5 = false;
                                Communication.writeCommunicationCommands("Protocol End Time");

                                //Implement or Add code to move RA to Home position
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R5, JarName_R5, "R" + R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                                r5priority = 0;
                                Console.Beep(5000, 5000); //Added on 081220231711
                                //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                r5inx = 0;
                                protocolinitiateflg_R5 = false;
                                protocolStartedflg_R5 = false;
                                R5_protostart = false;
                                rackinunloading[4] = 1;
                                U5.Enabled = true;
                                /////R5_cnt = R5_cnt + 6;   /*Commented on 24112023 1625*/
                                //call Unload racks function
                                return;
                            }
                            else
                            {
                                topickupflg_R5 = true;
                                pickplace = 1;
                                //update_jardetails_runtime(JarName_R5, "", true, false, r5_taskcomp.ToString().Substring(11));
                            }
                        }
                        else if (dippedflg_R5 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R5, R5_cnt.ToString(), DateTime.Now.ToString(), monVal, "Dipped In", 0f);
                            todipflg_R5 = false;
                            dippedflg_R5 = false;
                            topickupflg_R5 = false;
                            pickedflg_R5 = false;
                            toplaceflg_R5 = true;
                            placedflg_R5 = false;
                            pickplace = 2;
                            r5priority = 1;
                            noofdips_R5 = 0;
                            update_jardetails_runtime(JarName_R5, "", true, false, r5_taskcomp.ToString().Substring(11));
                            //below code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                            if (r5inx > 0)
                            {
                                r5inx++;
                                rackvalinc = true;
                            }
                            if ((r5inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R5");
                            }
                            //Above code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                        }
                    }
                }
                string rackno = "";
                if ((pickplace == 2) || (pickplace == 3))
                {
                    rackno = "R" + R5_cnt.ToString();
                    //update_jardetails_runtime(JarName_R5, rackno, false, true, r5_taskcomp.ToString().Substring(11));
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    rackno = "";
                    //update_jardetails_runtime(JarName_R5, rackno, true, false, r5_taskcomp.ToString().Substring(11));
                }

                if ((sndcmdstr == "") || (noofdips_R5 > 0) && (snddipcmdstr == ""))
                    return;
                //////New code added on 22-11-2023 2348
                ////check_priority_times(5);

                rareached = false;
                sensed = false;
                repeatval = 0;
                if (pickplace == 0)         //Moving Rack from Jar to Jar
                    functioncode = 1;
                else if (pickplace == 1)    //For Picking Rack from Jar
                    functioncode = 2;
                else if (pickplace == 2)    // For Placing Rack in Jar
                    functioncode = 3;
                else if (pickplace == 3)    // For Dipping RAck in Jar
                    functioncode = Communication.RA_DIP;

                //Framing Command
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                CommandName = "";
                CommandName = "Rack-" + R5_cnt.ToString();
                if (functioncode == 2)
                    CommandName = CommandName + " Picked from " + JarName_R5;
                else if (functioncode == 3)
                    CommandName = CommandName + " Placed in " + JarName_R5;
                else if (functioncode == Communication.RA_DIP)
                    CommandName = CommandName + " Dipped in " + JarName_R5;

                ////if (pickplace < 3)
                ////{
                ////    if ((JarName_R5.Contains("J")) || (JarName_R5.Contains("W")) || (JarName_R5.Contains("U")) || (JarName_R5.Contains("L")))      //For Normal Jars Moving Parameter                    
                ////    {
                ////        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                ////        Communication.RA_No = 1;
                ////    }
                ////    else if (JarName_R5.Contains("H"))  //For Heater Jars Moving parameter                    
                ////    {
                ////        sndcmdstr = sndcmdstr + ",1"; //functioncode = 2;
                ////                                      //Communication.RA_No = 2;
                ////        Communication.RA_No = 1;
                ////    }
                ////    RA_Protorun_intiated = true; // Added on 22-08-2023
                ////    if (TempReadingStarted == true)
                ////    {
                ////        tmr_tempstart.Enabled = true;
                ////        temp_restartincub = System.DateTime.Now;
                ////        temp_restartincub = temp_restartincub.AddSeconds(10);
                ////        tmr_temp.Enabled = false;
                ////        tmr_temp_incub.Enabled = false;
                ////    }
                ////    snd_rcvCmd(functioncode, sndcmdstr);  //Picking rack from Jar & Placing rack in Jar
                ////}
                ////else if (pickplace == 3) //Dipping the rack in Jar 
                ////{
                ////    Communication.RA_No = 1;
                ////    RA_Protorun_intiated = true; // Added on 22-08-2023
                ////    if (TempReadingStarted == true)
                ////    {
                ////        tmr_tempstart.Enabled = true;
                ////        temp_restartincub = System.DateTime.Now;
                ////        temp_restartincub = temp_restartincub.AddSeconds(10);
                ////        tmr_temp.Enabled = false;
                ////        tmr_temp_incub.Enabled = false;
                ////    }
                ////    snd_rcvCmd(functioncode, snddipcmdstr);
                ////}
                string cmdtosend = "";
                if (pickplace < 3)
                {
                    if ((JarName_R5.Contains("J")) || (JarName_R5.Contains("W")) || (JarName_R5.Contains("U")) || (JarName_R5.Contains("L")))      //For Normal Jars Moving Parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                        //Communication.RA_No = 1;
                    }
                    else if (JarName_R5.Contains("H"))  //For Heater Jars Moving parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",1";   //functioncode = 2;                                                      
                        //Communication.RA_No = 1;        //Communication.RA_No = 2;                        
                    }
                    cmdtosend = "";
                    cmdtosend = sndcmdstr;
                }
                else if (pickplace == 3) //Dipping the rack in Jar 
                {
                    cmdtosend = "";
                    cmdtosend = snddipcmdstr;
                    //Communication.RA_No = 1;
                }
                Communication.RA_No = R5_RNo;
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                ////else if (RA1_Busystate == true)
                ////{
                ////    if (toplaceflg_R5 == false)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R5 == true)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                ////else if (RA2_Busystate == true)
                ////{
                ////    if (toplaceflg_R5 == true)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R5 == false)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                //////Ra busy status added on 17-11-2023

                RA_Protorun_intiated = true; // Added on 22-08-2023
                if (TempReadingStarted == true)
                {
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                }
                if (functioncode == Communication.RA_PICK) R5_pickcmdissue = true;  // Added on 19122023 1138

                snd_rcvCmd(functioncode, cmdtosend);  //Picking rack from Jar or Placing rack in Jar or & Dipping rack in Jar
                r5_WaitCnt = 0;
                tmr_Cut.Enabled = false;
                tmr_r5.Enabled = true;
                tmr_r5.Interval = 500;
                //tmr_r5.Start();
                cmdsnt++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        //6th rack protorun code
        private void protocolrun_R6()
        {
            int pickplace = 0;
            Boolean rackvalinc = false;
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan();
            try
            {
                string sndcmdstr = "", snddipcmdstr = "";

                //if(chk_AllJars.Checked==true)
                //{
                if ((r6inx == 0) && (R6_protostart == false))
                {
                    System.Threading.Thread.Sleep(500);
                    //if (heatingreqflg == false)
                    //{
                    R6_cnt = RackIncremantVal;  //Modified on 24112023 1554                                                    
                    RackIncremantVal++; //Incrementing Rack value count by 1  Modified on 24112023 1554
                    //}
                    Communication.writeCommunicationCommands("Rack - " + R6_cnt.ToString() + "Protocol Started");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R6, JarName_R6, "R" + R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Started", 0f, m_Runid);
                    r6_taskcomp = DateTime.Now;
                    r6_taskcomp = r6_taskcomp.AddSeconds((int)totalprototime);
                    R6_protostart = true;
                    topickupflg_R6 = true;
                    pickplace = 1;
                    toplaceflg_R6 = false;
                    pickedflg_R6 = false;
                    placedflg_R6 = false;
                    sndcmdstr = get_Jar_positiondetails("R6");
                }
                else if (r6inx >= R6Protorun.Rows.Count)
                {
                    topickupflg_R6 = false;
                    toplaceflg_R6 = false;
                    todipflg_R6 = false;
                    pickedflg_R6 = false;
                    placedflg_R6 = false;
                    dippedflg_R6 = false;
                    Communication.writeCommunicationCommands("Rack - " + R6_cnt.ToString() + "Protocol Ended");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R6, JarName_R6, "R" + R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                    Console.Beep(5000, 5000); //Added on 081220231711
                    //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    r6priority = 0;
                    r6inx = 0;
                    protocolinitiateflg_R6 = false;
                    protocolStartedflg_R6 = false;
                    R6_protostart = false;
                    rackinunloading[5] = 1;
                    U6.Enabled = true;
                    ////////R6_cnt = R6_cnt + 6;   /*Commented on 24112023 1626*/
                    //call Unload racks function
                    return;
                }
                else if ((r6inx >= 0) && (r6inx <= R6Protorun.Rows.Count - 1))
                {
                    if ((pickedflg_R6 == true) || (placedflg_R6 == true) || (dippedflg_R6 == true))
                    {
                        sndcmdstr = get_Jar_positiondetails("R6");
                        if (pickedflg_R6 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R6, R6_cnt.ToString(), DateTime.Now.ToString(), monVal, "Picked From", 0f);
                            if ((r6inx == 1) && (JarName_R6 == "H3") && (proto_htrclose_intiate == false))
                            {
                                rackinheater[2] = 0;    //Racked Picked from H1 and to place in J1
                                htrdoorintiate = false;
                                proto_htrclose_intiate = true;
                                H3.OnlyJar = true;
                                sndcmdstr = "";
                                RA_Protorun_intiated = true; // Added on 22-08-2023
                                close_htrdoor();
                            }
                            else if ((r6inx == 1) && (JarName_R6 == "H3") && (proto_htrclose_intiate == true))
                            {
                                //Enableing timer for nxt rack movement
                                ////tmr_nextrack.Enabled = true;
                                ////tmr_nextrack.Interval = 120000;  // 1 Minutes after 2 minutes second racks has to lift from Lading Jars and place in heater racks.
                                proto_htrclose_intiate = false;
                                H3.OnlyJar = true;
                                sndcmdstr = "";
                                r6inx++;
                                rackvalinc = true;

                                ////////tmr_nextrack.Enabled = true;
                                ////////nxtrackloading = System.DateTime.Now;
                                //////////nxtrackloading = nxtrackloading.AddSeconds(nxtracktime);
                                ////////nxtrackloading = nxtrackloading.AddSeconds(60);
                                ////////tmr_nextrack.Interval = 1000;
                            }
                            else if ((r6inx == 0) && (JarName_R6 == "L3"))
                            {
                                rackinloading[2] = 0;
                                //Enableing timer to continue the process
                                ////////tmr_nextrack.Enabled = true;
                                ////////nxtrackloading = System.DateTime.Now;
                                //////////nxtrackloading = nxtrackloading.AddSeconds(525);
                                ////////nxtrackloading = nxtrackloading.AddSeconds(nxtracktime);
                                ////////tmr_nextrack.Interval = 1000;

                                r6inx++;
                                rackvalinc = true;
                            }
                            else if (r6inx > 0)
                            {
                                r6inx++;
                                rackvalinc = true;
                            }
                            if ((r6inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                //sndcmdstr = get_R6_positiondetails();
                                sndcmdstr = get_Jar_positiondetails("R6");
                                if (noofdips_R6 > 0)
                                {
                                    todipflg_R6 = true;
                                    toplaceflg_R6 = false;
                                    pickplace = 3;
                                    r6priority = 1; //Added on 04-12-2023 1726
                                    snddipcmdstr = R6_xPos + "," + R6_yPos + "," + noofdips_R6.ToString() + "," + R6_dipdelay.ToString() + "," + R6_drydelay.ToString();
                                    d1 = d1.AddSeconds((noofdips_R6 * 5) + 31);
                                    if (continuetest > d1)
                                        ts1 = continuetest.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(continuetest);
                                    if (ts1.TotalSeconds < ((noofdips_R6 * 5) + 31))
                                    {
                                        continuetest = continuetest.AddSeconds((noofdips_R6 * 5) + 31);
                                    }
                                    //Next rack calculation
                                    if (nxtrackloading > d1)
                                        ts1 = nxtrackloading.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(nxtrackloading);
                                    if (ts1.TotalSeconds < ((noofdips_R6 * 5) + 31))
                                    {
                                        nxtrackloading = nxtrackloading.AddSeconds((noofdips_R6 * 5) + 31);
                                    }
                                }
                                else
                                {
                                    todipflg_R6 = false;
                                    toplaceflg_R6 = true;
                                    pickplace = 2;
                                }
                                pickedflg_R6 = false;
                                topickupflg_R6 = false;
                                placedflg_R6 = false;
                                dippedflg_R6 = false;

                            }
                        }
                        else if (placedflg_R6 == true)
                        {
                            toplaceflg_R6 = false;
                            pickedflg_R6 = false;
                            placedflg_R6 = false;
                            noofdips_R6 = 0;
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R6, R6_cnt.ToString(), DateTime.Now.ToString(), monVal, "Placed In", 0f);
                            if (r6inx == R6Protorun.Rows.Count - 1)
                            {
                                topickupflg_R6 = false;
                                toplaceflg_R6 = false;
                                pickedflg_R6 = false;
                                placedflg_R6 = false;
                                Communication.writeCommunicationCommands("Rack - " + R6_cnt.ToString() + "Protocol End Time");
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R6, JarName_R6, "R" + R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                                r6priority = 0;
                                Console.Beep(5000, 5000); //Added on 081220231711
                                //Implement or Add code to move RA to Home position                                
                                //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                r6inx = 0;
                                protocolinitiateflg_R6 = false;
                                protocolStartedflg_R6 = false;
                                R6_protostart = false;
                                rackinunloading[5] = 1;
                                U6.Enabled = true;
                                //////R6_cnt = R6_cnt + 6;   /*Commented on 24112023 1627*/
                                //call Unload racks function
                                return;
                            }
                            else
                            {
                                topickupflg_R6 = true;
                                pickplace = 1;
                                //update_jardetails_runtime(JarName_R6, "", true, false, r6_taskcomp.ToString().Substring(11));
                            }
                        }
                        else if (dippedflg_R6 == true)
                        {
                            todipflg_R6 = false;
                            dippedflg_R6 = false;
                            topickupflg_R6 = false;
                            pickedflg_R6 = false;
                            toplaceflg_R6 = true;
                            placedflg_R6 = false;
                            pickplace = 2;
                            r6priority = 1;
                            noofdips_R6 = 0;
                            update_jardetails_runtime(JarName_R6, "", true, false, r6_taskcomp.ToString().Substring(11));
                            //below code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                            if (r6inx > 0)
                            {
                                r6inx++;
                                rackvalinc = true;
                            }
                            if ((r6inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R6");
                            }
                            //Above code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                        }
                    }
                }
                string rackno = "";
                if ((pickplace == 2) || (pickplace == 3))
                {
                    rackno = "R" + R6_cnt.ToString();
                    update_jardetails_runtime(JarName_R6, rackno, false, true, r6_taskcomp.ToString().Substring(11));
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    rackno = "";
                    update_jardetails_runtime(JarName_R6, rackno, true, false, r6_taskcomp.ToString().Substring(11));
                }

                if ((sndcmdstr == "") || (noofdips_R6 > 0) && (snddipcmdstr == ""))
                    return;

                //New code added on 22-11-2023 2348
                check_priority_times(6);

                rareached = false;
                sensed = false;
                repeatval = 0;
                if (pickplace == 0)         //Moving Rack from Jar to Jar
                    functioncode = 1;
                else if (pickplace == 1)    //For Picking Rack from Jar
                    functioncode = 2;
                else if (pickplace == 2)    // For Placing Rack in Jar
                    functioncode = 3;
                else if (pickplace == 3)    // For Dipping RAck in Jar
                    functioncode = Communication.RA_DIP;

                //Framing Command
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                CommandName = "";
                CommandName = "Rack-" + R6_cnt.ToString();
                if (functioncode == 2)
                    CommandName = CommandName + " Picked from " + JarName_R6;
                else if (functioncode == 3)
                    CommandName = CommandName + " Placed in " + JarName_R6;
                else if (functioncode == Communication.RA_DIP)
                    CommandName = CommandName + " Dipped in " + JarName_R6;


                ////if (pickplace < 3)
                ////{
                ////    if ((JarName_R6.Contains("J")) || (JarName_R6.Contains("W")) || (JarName_R6.Contains("U")) || (JarName_R6.Contains("L")))      //For Normal Jars Moving Parameter                    
                ////    {
                ////        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                ////        Communication.RA_No = 1;
                ////    }
                ////    else if (JarName_R6.Contains("H"))  //For Heater Jars Moving parameter                    
                ////    {
                ////        sndcmdstr = sndcmdstr + ",1"; //functioncode = 2;
                ////                                      //Communication.RA_No = 2;
                ////        Communication.RA_No = 1;
                ////    }
                ////    RA_Protorun_intiated = true; // Added on 22-08-2023
                ////    if (TempReadingStarted == true)
                ////    {
                ////        tmr_tempstart.Enabled = true;
                ////        temp_restartincub = System.DateTime.Now;
                ////        temp_restartincub = temp_restartincub.AddSeconds(10);
                ////        tmr_temp.Enabled = false;
                ////        tmr_temp_incub.Enabled = false;
                ////    }
                ////    snd_rcvCmd(functioncode, sndcmdstr);  //Picking rack from Jar & Placing rack in Jar
                ////}
                ////else if (pickplace == 3) //Dipping the rack in Jar 
                ////{
                ////    Communication.RA_No = 1;
                ////    RA_Protorun_intiated = true; // Added on 22-08-2023
                ////    if (TempReadingStarted == true)
                ////    {
                ////        tmr_tempstart.Enabled = true;
                ////        temp_restartincub = System.DateTime.Now;
                ////        temp_restartincub = temp_restartincub.AddSeconds(10);
                ////        tmr_temp.Enabled = false;
                ////        tmr_temp_incub.Enabled = false;
                ////    }
                ////    snd_rcvCmd(functioncode, snddipcmdstr);
                ////}

                string cmdtosend = "";
                if (pickplace < 3)
                {
                    if ((JarName_R6.Contains("J")) || (JarName_R6.Contains("W")) || (JarName_R6.Contains("U")) || (JarName_R6.Contains("L")))      //For Normal Jars Moving Parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                        //Communication.RA_No = 1;
                    }
                    else if (JarName_R6.Contains("H"))  //For Heater Jars Moving parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",1";   //functioncode = 2;                                                      
                        //Communication.RA_No = 1;        //Communication.RA_No = 2;                        
                    }
                    cmdtosend = "";
                    cmdtosend = sndcmdstr;
                }
                else if (pickplace == 3) //Dipping the rack in Jar 
                {
                    cmdtosend = "";
                    cmdtosend = snddipcmdstr;
                    //Communication.RA_No = 1;
                }
                Communication.RA_No = R6_RNo;
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                ////else if (RA1_Busystate == true)
                ////{
                ////    if (toplaceflg_R6 == false)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R6 == true)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                ////else if (RA2_Busystate == true)
                ////{
                ////    if (toplaceflg_R6 == true)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R6 == false)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                //////Ra busy status added on 17-11-2023

                RA_Protorun_intiated = true; // Added on 22-08-2023
                if (TempReadingStarted == true)
                {
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                }
                if (functioncode == Communication.RA_PICK) R6_pickcmdissue = true;  // Added on 19122023 1138
                snd_rcvCmd(functioncode, cmdtosend);  //Picking rack from Jar or Placing rack in Jar or & Dipping rack in Jar
                r6_WaitCnt = 0;
                tmr_Cut.Enabled = false;
                tmr_r6.Enabled = true;
                tmr_r6.Interval = 500;
                //tmr_r1.Start();
                cmdsnt++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        //7th Rack protorun function code
        private void protocolrun_R7()
        {
            int pickplace = 0;
            Boolean rackvalinc = false;
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan();
            try
            {
                string sndcmdstr = "", snddipcmdstr = "";

                //if(chk_AllJars.Checked==true)
                //{
                if ((r7inx == 0) && (R7_protostart == false))
                {
                    System.Threading.Thread.Sleep(500);
                    //if (heatingreqflg == false)
                    //{
                    R7_cnt = RackIncremantVal;  //Modified on 24112023 1554                                                    
                    RackIncremantVal++; //Incrementing Rack value count by 1  Modified on 24112023 1554
                    //}
                    Communication.writeCommunicationCommands("Rack - " + R7_cnt.ToString() + "Protocol Started");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R7, JarName_R7, "R" + R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Started", 0f, m_Runid);
                    r7_taskcomp = DateTime.Now;
                    r7_taskcomp = r7_taskcomp.AddSeconds((int)totalprototime);
                    R7_protostart = true;
                    topickupflg_R7 = true;
                    pickplace = 1;
                    toplaceflg_R7 = false;
                    pickedflg_R7 = false;
                    placedflg_R7 = false;
                    sndcmdstr = get_Jar_positiondetails("R7");
                }
                else if (r7inx >= R7Protorun.Rows.Count)
                {
                    topickupflg_R7 = false;
                    toplaceflg_R7 = false;
                    todipflg_R7 = false;
                    pickedflg_R7 = false;
                    placedflg_R7 = false;
                    dippedflg_R7 = false;
                    Communication.writeCommunicationCommands("Rack - " + R7_cnt.ToString() + "Protocol Ended");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R7, JarName_R7, "R" + R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                    Console.Beep(5000, 5000); //Added on 081220231711
                    //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    r7priority = 0;
                    r7inx = 0;
                    protocolinitiateflg_R7 = false;
                    protocolStartedflg_R7 = false;
                    R7_protostart = false;
                    rackinunloading[0] = 1;
                    J33.Enabled = true;
                    ////////R7_cnt = R7_cnt + 6;   /*Commented on 24112023 1626*/
                    //call Unload racks function
                    return;
                }
                else if ((r7inx >= 0) && (r7inx <= R7Protorun.Rows.Count - 1))
                {
                    if ((pickedflg_R7 == true) || (placedflg_R7 == true) || (dippedflg_R7 == true))
                    {
                        sndcmdstr = get_Jar_positiondetails("R7");
                        if (pickedflg_R7 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R7, R7_cnt.ToString(), DateTime.Now.ToString(), monVal, "Picked From", 0f);
                            if ((r7inx == 1) && (JarName_R7 == "H1") && (proto_htrclose_intiate == false))
                            {
                                rackinheater[0] = 0;    //Racked Picked from H1 and to place in J1
                                htrdoorintiate = false;
                                proto_htrclose_intiate = true;
                                H1.OnlyJar = true;
                                sndcmdstr = "";
                                RA_Protorun_intiated = true; // Added on 22-08-2023
                                close_htrdoor();
                            }
                            else if ((r7inx == 1) && (JarName_R7 == "H1") && (proto_htrclose_intiate == true))
                            {
                                //Enableing timer for nxt rack movement
                                ////tmr_nextrack.Enabled = true;
                                ////tmr_nextrack.Interval = 120000;  // 1 Minutes after 2 minutes second racks has to lift from Lading Jars and place in heater racks.
                                proto_htrclose_intiate = false;
                                H1.OnlyJar = true;
                                sndcmdstr = "";
                                r7inx++;
                                rackvalinc = true;

                                ////////tmr_nextrack.Enabled = true;
                                ////////nxtrackloading = System.DateTime.Now;
                                //////////nxtrackloading = nxtrackloading.AddSeconds(nxtracktime);
                                ////////nxtrackloading = nxtrackloading.AddSeconds(60);
                                ////////tmr_nextrack.Interval = 1000;
                            }
                            else if ((r7inx == 0) && (JarName_R7 == "L1"))
                            {
                                rackinloading[0] = 0;
                                r7inx++;
                                rackvalinc = true;
                            }
                            else if (r7inx > 0)
                            {
                                r7inx++;
                                rackvalinc = true;
                            }
                            if ((r7inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                //sndcmdstr = get_R7_positiondetails();
                                sndcmdstr = get_Jar_positiondetails("R7");
                                if (noofdips_R7 > 0)
                                {
                                    todipflg_R7 = true;
                                    toplaceflg_R7 = false;
                                    pickplace = 3;
                                    r7priority = 1; //Added on 04-12-2023 1726
                                    snddipcmdstr = R7_xPos + "," + R7_yPos + "," + noofdips_R7.ToString() + "," + R7_dipdelay.ToString() + "," + R7_drydelay.ToString();
                                    d1 = d1.AddSeconds((noofdips_R7 * 5) + 31);
                                    if (continuetest > d1)
                                        ts1 = continuetest.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(continuetest);
                                    if (ts1.TotalSeconds < ((noofdips_R7 * 5) + 31))
                                    {
                                        continuetest = continuetest.AddSeconds((noofdips_R7 * 5) + 31);
                                    }
                                    //Next rack calculation
                                    if (nxtrackloading > d1)
                                        ts1 = nxtrackloading.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(nxtrackloading);
                                    if (ts1.TotalSeconds < ((noofdips_R7 * 5) + 31))
                                    {
                                        nxtrackloading = nxtrackloading.AddSeconds((noofdips_R7 * 5) + 31);
                                    }
                                }
                                else
                                {
                                    todipflg_R7 = false;
                                    toplaceflg_R7 = true;
                                    pickplace = 2;
                                }
                                pickedflg_R7 = false;
                                topickupflg_R7 = false;
                                placedflg_R7 = false;
                                dippedflg_R7 = false;

                            }
                        }
                        else if (placedflg_R7 == true)
                        {
                            toplaceflg_R7 = false;
                            pickedflg_R7 = false;
                            placedflg_R7 = false;
                            noofdips_R7 = 0;
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R7, R7_cnt.ToString(), DateTime.Now.ToString(), monVal, "Placed In", 0f);
                            if (r7inx == R7Protorun.Rows.Count - 1)
                            {
                                topickupflg_R7 = false;
                                toplaceflg_R7 = false;
                                pickedflg_R7 = false;
                                placedflg_R7 = false;
                                Communication.writeCommunicationCommands("Rack - " + R7_cnt.ToString() + "Protocol End Time");
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R7, JarName_R7, "R" + R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                                r7priority = 0;
                                Console.Beep(5000, 5000); //Added on 081220231711
                                //Implement or Add code to move RA to Home position                                
                                //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                r7inx = 0;
                                protocolinitiateflg_R7 = false;
                                protocolStartedflg_R7 = false;
                                R7_protostart = false;
                                rackinunloading[0] = 1;
                                J33.Enabled = true;
                                //////R7_cnt = R7_cnt + 6;   /*Commented on 24112023 1627*/
                                //call Unload racks function
                                return;
                            }
                            else
                            {
                                topickupflg_R7 = true;
                                pickplace = 1;
                                //update_jardetails_runtime(JarName_R7, "", true, false, r7_taskcomp.ToString().Substring(11));
                            }
                        }
                        else if (dippedflg_R7 == true)
                        {
                            todipflg_R7 = false;
                            dippedflg_R7 = false;
                            topickupflg_R7 = false;
                            pickedflg_R7 = false;
                            toplaceflg_R7 = true;
                            placedflg_R7 = false;
                            pickplace = 2;
                            r7priority = 1;
                            noofdips_R7 = 0;
                            update_jardetails_runtime(JarName_R7, "", true, false, r7_taskcomp.ToString().Substring(11));
                            //below code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                            if (r7inx > 0)
                            {
                                r7inx++;
                                rackvalinc = true;
                            }
                            if ((r7inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R7");
                            }
                            //Above code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                        }
                    }
                }
                string rackno = "";
                if ((pickplace == 2) || (pickplace == 3))
                {
                    rackno = "R" + R7_cnt.ToString();
                    update_jardetails_runtime(JarName_R7, rackno, false, true, r7_taskcomp.ToString().Substring(11));
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    rackno = "";
                    update_jardetails_runtime(JarName_R7, rackno, true, false, r7_taskcomp.ToString().Substring(11));
                }

                if ((sndcmdstr == "") || (noofdips_R7 > 0) && (snddipcmdstr == ""))
                    return;

                //New code added on 22-11-2023 2348
                check_priority_times(6);

                rareached = false;
                sensed = false;
                repeatval = 0;
                if (pickplace == 0)         //Moving Rack from Jar to Jar
                    functioncode = 1;
                else if (pickplace == 1)    //For Picking Rack from Jar
                    functioncode = 2;
                else if (pickplace == 2)    // For Placing Rack in Jar
                    functioncode = 3;
                else if (pickplace == 3)    // For Dipping RAck in Jar
                    functioncode = Communication.RA_DIP;

                //Framing Command
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                CommandName = "";
                CommandName = "Rack-" + R7_cnt.ToString();
                if (functioncode == 2)
                    CommandName = CommandName + " Picked from " + JarName_R7;
                else if (functioncode == 3)
                    CommandName = CommandName + " Placed in " + JarName_R7;
                else if (functioncode == Communication.RA_DIP)
                    CommandName = CommandName + " Dipped in " + JarName_R7;




                string cmdtosend = "";
                if (pickplace < 3)
                {
                    if ((JarName_R7.Contains("J")) || (JarName_R7.Contains("W")) || (JarName_R7.Contains("U")) || (JarName_R7.Contains("L")))      //For Normal Jars Moving Parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                        //Communication.RA_No = 1;
                    }
                    else if (JarName_R7.Contains("H"))  //For Heater Jars Moving parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",1";   //functioncode = 2;                                                      
                        //Communication.RA_No = 1;        //Communication.RA_No = 2;                        
                    }
                    cmdtosend = "";
                    cmdtosend = sndcmdstr;
                }
                else if (pickplace == 3) //Dipping the rack in Jar 
                {
                    cmdtosend = "";
                    cmdtosend = snddipcmdstr;
                    //Communication.RA_No = 1;
                }
                Communication.RA_No = R7_RNo;
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                ////else if (RA1_Busystate == true)
                ////{
                ////    if (toplaceflg_R7 == false)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R7 == true)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                ////else if (RA2_Busystate == true)
                ////{
                ////    if (toplaceflg_R7 == true)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R7 == false)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                //////Ra busy status added on 17-11-2023

                RA_Protorun_intiated = true; // Added on 22-08-2023
                if (TempReadingStarted == true)
                {
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                }
                if (functioncode == Communication.RA_PICK) R7_pickcmdissue = true;  // Added on 19122023 1138
                snd_rcvCmd(functioncode, cmdtosend);  //Picking rack from Jar or Placing rack in Jar or & Dipping rack in Jar
                r7_WaitCnt = 0;
                tmr_Cut.Enabled = false;
                tmr_r7.Enabled = true;
                tmr_r7.Interval = 500;
                //tmr_r1.Start();
                cmdsnt++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        //8th Rack protorun
        private void protocolrun_R8()
        {
            int pickplace = 0;
            Boolean rackvalinc = false;
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan();
            try
            {
                string sndcmdstr = "", snddipcmdstr = "";

                //if(chk_AllJars.Checked==true)
                //{
                if ((r8inx == 0) && (R8_protostart == false))
                {
                    System.Threading.Thread.Sleep(500);
                    //if (heatingreqflg == false)
                    //{
                    R8_cnt = RackIncremantVal;  //Modified on 24112023 1554                                                    
                    RackIncremantVal++; //Incrementing Rack value count by 1  Modified on 24112023 1554
                    //}

                    Communication.writeCommunicationCommands("Rack - " + R8_cnt.ToString() + "Protocol Started");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R8, JarName_R8, "R" + R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Started", 0f, m_Runid);
                    r8_taskcomp = DateTime.Now;
                    r8_taskcomp = r8_taskcomp.AddSeconds((int)totalprototime);
                    R8_protostart = true;
                    topickupflg_R8 = true;
                    pickplace = 1;
                    toplaceflg_R8 = false;
                    pickedflg_R8 = false;
                    placedflg_R8 = false;
                    sndcmdstr = get_Jar_positiondetails("R8");
                }
                else if (r8inx >= R8Protorun.Rows.Count)
                {
                    topickupflg_R8 = false;
                    toplaceflg_R8 = false;
                    todipflg_R8 = false;
                    pickedflg_R8 = false;
                    placedflg_R8 = false;
                    dippedflg_R8 = false;
                    Communication.writeCommunicationCommands("Rack - " + R8_cnt.ToString() + "Protocol Ended");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R8, JarName_R8, "R" + R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                    Console.Beep(5000, 5000); //Added on 081220231711
                    //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    r8inx = 0;
                    r8priority = 0;
                    protocolinitiateflg_R8 = false;
                    protocolStartedflg_R8 = false;
                    R8_protostart = false;
                    rackinunloading[1] = 1;
                    U2.Enabled = true;
                    //////R8_cnt = R8_cnt + 6;  /*Commented on 24112023 1622*/
                    //call Unload racks function
                    return;
                }
                else if ((r8inx >= 0) && (r8inx <= R8Protorun.Rows.Count - 1))
                {
                    if ((pickedflg_R8 == true) || (placedflg_R8 == true) || (dippedflg_R8 == true))
                    {
                        sndcmdstr = get_Jar_positiondetails("R8");
                        if (pickedflg_R8 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R8, R8_cnt.ToString(), DateTime.Now.ToString(), monVal, "Picked From", 0f);
                            if ((r8inx == 1) && (JarName_R8 == "H2") && (proto_htrclose_intiate == false))
                            {
                                rackinheater[1] = 0;    //Racked Picked from H1 and to place in J1
                                htrdoorintiate = false;
                                proto_htrclose_intiate = true;
                                RA_Protorun_intiated = true; // Added on 22-08-2023
                                H2.OnlyJar = true;
                                sndcmdstr = "";
                                close_htrdoor();
                            }
                            else if ((r8inx == 1) && (JarName_R8 == "H2") && (proto_htrclose_intiate == true))
                            {
                                //Enableing timer for nxt rack movement
                                proto_htrclose_intiate = false;
                                H2.OnlyJar = true;
                                sndcmdstr = "";
                                r8inx++;
                                rackvalinc = true;
                            }
                            else if ((r8inx == 0) && (JarName_R8 == "L2"))
                            {
                                rackinloading[1] = 0; //Racked Picked from L1 (Loading Station) and to place in J1                                                                
                                r8inx++;
                                rackvalinc = true;
                            }
                            else if (r8inx > 0)
                            {
                                r8inx++;
                                rackvalinc = true;
                            }
                            if ((r8inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                //sndcmdstr = get_R8_positiondetails();
                                sndcmdstr = get_Jar_positiondetails("R8");
                                if (noofdips_R8 > 0)
                                {
                                    todipflg_R8 = true;
                                    toplaceflg_R8 = false;
                                    pickplace = 3;
                                    snddipcmdstr = R8_xPos + "," + R8_yPos + "," + noofdips_R8.ToString() + "," + R8_dipdelay.ToString() + "," + R8_drydelay.ToString();
                                    r8priority = 1; //Added on 04-12-2023 1726
                                    d1 = d1.AddSeconds((noofdips_R8 * 5) + 31);
                                    if (continuetest > d1)
                                        ts1 = continuetest.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(continuetest);
                                    if (ts1.TotalSeconds < ((noofdips_R8 * 5) + 31))
                                    {
                                        continuetest = continuetest.AddSeconds((noofdips_R8 * 5) + 31);
                                    }
                                    //Next rack calculation
                                    if (nxtrackloading > d1)
                                        ts1 = nxtrackloading.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(nxtrackloading);
                                    if (ts1.TotalSeconds < ((noofdips_R8 * 5) + 31))
                                    {
                                        nxtrackloading = nxtrackloading.AddSeconds((noofdips_R8 * 5) + 31);
                                    }
                                }
                                else
                                {
                                    todipflg_R8 = false;
                                    toplaceflg_R8 = true;
                                    pickplace = 2;
                                }
                                pickedflg_R8 = false;
                                topickupflg_R8 = false;
                                placedflg_R8 = false;
                                dippedflg_R8 = false;

                            }
                        }
                        else if (placedflg_R8 == true)
                        {
                            toplaceflg_R8 = false;
                            pickedflg_R8 = false;
                            placedflg_R8 = false;
                            noofdips_R8 = 0;
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R8, R8_cnt.ToString(), DateTime.Now.ToString(), monVal, "Placed In", 0f);
                            if (r8inx == R8Protorun.Rows.Count - 1)
                            {
                                topickupflg_R8 = false;
                                toplaceflg_R8 = false;
                                pickedflg_R8 = false;
                                placedflg_R8 = false;
                                //Communication.writeCommunicationCommands("Protocol End Time");
                                Communication.writeCommunicationCommands("Rack - " + R8_cnt.ToString() + "Protocol Ended");
                                //Implement or Add code to move RA to Home position
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R8, JarName_R8, "R" + R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                                r8priority = 0;
                                Console.Beep(5000, 5000); //Added on 081220231711
                                //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                r8inx = 0;
                                protocolinitiateflg_R8 = false;
                                protocolStartedflg_R8 = false;
                                R8_protostart = false;
                                rackinunloading[1] = 1;
                                U2.Enabled = true;
                                /////R8_cnt = R8_cnt + 6;   /*Commented on 24112023 1625*/
                                //call Unload racks function
                                return;
                            }
                            else
                            {
                                topickupflg_R8 = true;
                                pickplace = 1;
                                //update_jardetails_runtime(JarName_R8, "", true, false, r8_taskcomp.ToString().Substring(11));
                            }
                        }
                        else if (dippedflg_R8 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R8, R8_cnt.ToString(), DateTime.Now.ToString(), monVal, "Dipped In", 0f);
                            todipflg_R8 = false;
                            dippedflg_R8 = false;
                            topickupflg_R8 = false;
                            pickedflg_R8 = false;
                            toplaceflg_R8 = true;
                            placedflg_R8 = false;
                            pickplace = 2;
                            r8priority = 1;
                            noofdips_R8 = 0;
                            update_jardetails_runtime(JarName_R8, "", true, false, r8_taskcomp.ToString().Substring(11));
                            //below code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                            if (r8inx > 0)
                            {
                                r8inx++;
                                rackvalinc = true;
                            }
                            if ((r8inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R8");
                            }
                            //Above code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                        }
                    }
                }
                string rackno = "";
                if ((pickplace == 2) || (pickplace == 3))
                {
                    rackno = "R" + R8_cnt.ToString();
                    update_jardetails_runtime(JarName_R8, rackno, false, true, r8_taskcomp.ToString().Substring(11));
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    rackno = "";
                    update_jardetails_runtime(JarName_R8, rackno, true, false, r8_taskcomp.ToString().Substring(11));
                }

                if ((sndcmdstr == "") || (noofdips_R8 > 0) && (snddipcmdstr == ""))
                    return;
                //////New code added on 22-11-2023 2348
                ////check_priority_times(5);

                rareached = false;
                sensed = false;
                repeatval = 0;
                if (pickplace == 0)         //Moving Rack from Jar to Jar
                    functioncode = 1;
                else if (pickplace == 1)    //For Picking Rack from Jar
                    functioncode = 2;
                else if (pickplace == 2)    // For Placing Rack in Jar
                    functioncode = 3;
                else if (pickplace == 3)    // For Dipping RAck in Jar
                    functioncode = Communication.RA_DIP;

                //Framing Command
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                CommandName = "";
                CommandName = "Rack-" + R8_cnt.ToString();
                if (functioncode == 2)
                    CommandName = CommandName + " Picked from " + JarName_R8;
                else if (functioncode == 3)
                    CommandName = CommandName + " Placed in " + JarName_R8;
                else if (functioncode == Communication.RA_DIP)
                    CommandName = CommandName + " Dipped in " + JarName_R8;

                ////if (pickplace < 3)
                ////{
                ////    if ((JarName_R8.Contains("J")) || (JarName_R8.Contains("W")) || (JarName_R8.Contains("U")) || (JarName_R8.Contains("L")))      //For Normal Jars Moving Parameter                    
                ////    {
                ////        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                ////        Communication.RA_No = 1;
                ////    }
                ////    else if (JarName_R8.Contains("H"))  //For Heater Jars Moving parameter                    
                ////    {
                ////        sndcmdstr = sndcmdstr + ",1"; //functioncode = 2;
                ////                                      //Communication.RA_No = 2;
                ////        Communication.RA_No = 1;
                ////    }
                ////    RA_Protorun_intiated = true; // Added on 22-08-2023
                ////    if (TempReadingStarted == true)
                ////    {
                ////        tmr_tempstart.Enabled = true;
                ////        temp_restartincub = System.DateTime.Now;
                ////        temp_restartincub = temp_restartincub.AddSeconds(10);
                ////        tmr_temp.Enabled = false;
                ////        tmr_temp_incub.Enabled = false;
                ////    }
                ////    snd_rcvCmd(functioncode, sndcmdstr);  //Picking rack from Jar & Placing rack in Jar
                ////}
                ////else if (pickplace == 3) //Dipping the rack in Jar 
                ////{
                ////    Communication.RA_No = 1;
                ////    RA_Protorun_intiated = true; // Added on 22-08-2023
                ////    if (TempReadingStarted == true)
                ////    {
                ////        tmr_tempstart.Enabled = true;
                ////        temp_restartincub = System.DateTime.Now;
                ////        temp_restartincub = temp_restartincub.AddSeconds(10);
                ////        tmr_temp.Enabled = false;
                ////        tmr_temp_incub.Enabled = false;
                ////    }
                ////    snd_rcvCmd(functioncode, snddipcmdstr);
                ////}
                string cmdtosend = "";
                if (pickplace < 3)
                {
                    if ((JarName_R8.Contains("J")) || (JarName_R8.Contains("W")) || (JarName_R8.Contains("U")) || (JarName_R8.Contains("L")))      //For Normal Jars Moving Parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                        //Communication.RA_No = 1;
                    }
                    else if (JarName_R8.Contains("H"))  //For Heater Jars Moving parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",1";   //functioncode = 2;                                                      
                        //Communication.RA_No = 1;        //Communication.RA_No = 2;                        
                    }
                    cmdtosend = "";
                    cmdtosend = sndcmdstr;
                }
                else if (pickplace == 3) //Dipping the rack in Jar 
                {
                    cmdtosend = "";
                    cmdtosend = snddipcmdstr;
                    //Communication.RA_No = 1;
                }
                Communication.RA_No = R8_RNo;
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                ////else if (RA1_Busystate == true)
                ////{
                ////    if (toplaceflg_R8 == false)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R8 == true)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                ////else if (RA2_Busystate == true)
                ////{
                ////    if (toplaceflg_R8 == true)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R8 == false)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                //////Ra busy status added on 17-11-2023

                RA_Protorun_intiated = true; // Added on 22-08-2023
                if (TempReadingStarted == true)
                {
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                }
                if (functioncode == Communication.RA_PICK) R8_pickcmdissue = true;  // Added on 19122023 1138

                snd_rcvCmd(functioncode, cmdtosend);  //Picking rack from Jar or Placing rack in Jar or & Dipping rack in Jar
                r8_WaitCnt = 0;
                tmr_Cut.Enabled = false;
                tmr_r8.Enabled = true;
                tmr_r8.Interval = 500;
                //tmr_r8.Start();
                cmdsnt++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        //9th rack protorun code
        private void protocolrun_R9()
        {
            int pickplace = 0;
            Boolean rackvalinc = false;
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1 = new TimeSpan();
            try
            {
                string sndcmdstr = "", snddipcmdstr = "";

                //if(chk_AllJars.Checked==true)
                //{
                if ((r9inx == 0) && (R9_protostart == false))
                {
                    System.Threading.Thread.Sleep(500);
                    //if (heatingreqflg == false)
                    //{
                    R9_cnt = RackIncremantVal;  //Modified on 24112023 1554                                                    
                    RackIncremantVal++; //Incrementing Rack value count by 1  Modified on 24112023 1554
                    //}
                    Communication.writeCommunicationCommands("Rack - " + R9_cnt.ToString() + "Protocol Started");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R6, JarName_R6, "R" + R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Started", 0f, m_Runid);
                    r9_taskcomp = DateTime.Now;
                    r9_taskcomp = r9_taskcomp.AddSeconds((int)totalprototime);
                    R9_protostart = true;
                    topickupflg_R9 = true;
                    pickplace = 1;
                    toplaceflg_R9 = false;
                    pickedflg_R9 = false;
                    placedflg_R9 = false;
                    sndcmdstr = get_Jar_positiondetails("R9");
                }
                else if (r9inx >= R9Protorun.Rows.Count)
                {
                    topickupflg_R9 = false;
                    toplaceflg_R9 = false;
                    todipflg_R9 = false;
                    pickedflg_R9 = false;
                    placedflg_R9 = false;
                    dippedflg_R9 = false;
                    Communication.writeCommunicationCommands("Rack - " + R9_cnt.ToString() + "Protocol Ended");
                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R9, JarName_R9, "R" + R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                    Console.Beep(5000, 5000); //Added on 081220231711
                    //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    r9priority = 0;
                    r9inx = 0;
                    protocolinitiateflg_R9 = false;
                    protocolStartedflg_R9 = false;
                    R9_protostart = false;
                    rackinunloading[2] = 1;
                    U3.Enabled = true;
                    ////////R9_cnt = R9_cnt + 6;   /*Commented on 24112023 1626*/
                    //call Unload racks function
                    return;
                }
                else if ((r9inx >= 0) && (r9inx <= R9Protorun.Rows.Count - 1))
                {
                    if ((pickedflg_R9 == true) || (placedflg_R9 == true) || (dippedflg_R9 == true))
                    {
                        sndcmdstr = get_Jar_positiondetails("R9");
                        if (pickedflg_R9 == true)
                        {
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R9, R9_cnt.ToString(), DateTime.Now.ToString(), monVal, "Picked From", 0f);
                            if ((r9inx == 1) && (JarName_R9 == "H3") && (proto_htrclose_intiate == false))
                            {
                                rackinheater[2] = 0;    //Racked Picked from H1 and to place in J1
                                htrdoorintiate = false;
                                proto_htrclose_intiate = true;
                                H3.OnlyJar = true;
                                sndcmdstr = "";
                                RA_Protorun_intiated = true; // Added on 22-08-2023
                                close_htrdoor();
                            }
                            else if ((r9inx == 1) && (JarName_R9 == "H3") && (proto_htrclose_intiate == true))
                            {
                                //Enableing timer for nxt rack movement
                                ////tmr_nextrack.Enabled = true;
                                ////tmr_nextrack.Interval = 120000;  // 1 Minutes after 2 minutes second racks has to lift from Lading Jars and place in heater racks.
                                proto_htrclose_intiate = false;
                                H3.OnlyJar = true;
                                sndcmdstr = "";
                                r9inx++;
                                rackvalinc = true;
                            }
                            else if ((r9inx == 0) && (JarName_R9 == "L3"))
                            {
                                rackinloading[2] = 0;
                                //Enableing timer to continue the process
                                r9inx++;
                                rackvalinc = true;
                            }
                            else if (r9inx > 0)
                            {
                                r9inx++;
                                rackvalinc = true;
                            }
                            if ((r9inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                //sndcmdstr = get_R9_positiondetails();
                                sndcmdstr = get_Jar_positiondetails("R9");
                                if (noofdips_R9 > 0)
                                {
                                    todipflg_R9 = true;
                                    toplaceflg_R9 = false;
                                    pickplace = 3;
                                    r9priority = 1; //Added on 04-12-2023 1726
                                    snddipcmdstr = R9_xPos + "," + R9_yPos + "," + noofdips_R9.ToString() + "," + R9_dipdelay.ToString() + "," + R9_drydelay.ToString();
                                    d1 = d1.AddSeconds((noofdips_R9 * 5) + 31);
                                    if (continuetest > d1)
                                        ts1 = continuetest.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(continuetest);
                                    if (ts1.TotalSeconds < ((noofdips_R9 * 5) + 31))
                                    {
                                        continuetest = continuetest.AddSeconds((noofdips_R9 * 5) + 31);
                                    }
                                    //Next rack calculation
                                    if (nxtrackloading > d1)
                                        ts1 = nxtrackloading.Subtract(d1);
                                    else
                                        ts1 = d1.Subtract(nxtrackloading);
                                    if (ts1.TotalSeconds < ((noofdips_R9 * 5) + 31))
                                    {
                                        nxtrackloading = nxtrackloading.AddSeconds((noofdips_R9 * 5) + 31);
                                    }
                                }
                                else
                                {
                                    todipflg_R9 = false;
                                    toplaceflg_R9 = true;
                                    pickplace = 2;
                                }
                                pickedflg_R9 = false;
                                topickupflg_R9 = false;
                                placedflg_R9 = false;
                                dippedflg_R9 = false;

                            }
                        }
                        else if (placedflg_R9 == true)
                        {
                            toplaceflg_R9 = false;
                            pickedflg_R9 = false;
                            placedflg_R9 = false;
                            noofdips_R9 = 0;
                            ////updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), JarName_R9, R9_cnt.ToString(), DateTime.Now.ToString(), monVal, "Placed In", 0f);
                            if (r9inx == R9Protorun.Rows.Count - 1)
                            {
                                topickupflg_R9 = false;
                                toplaceflg_R9 = false;
                                pickedflg_R9 = false;
                                placedflg_R9 = false;
                                Communication.writeCommunicationCommands("Rack - " + R9_cnt.ToString() + "Protocol End Time");
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), RegName_R9, JarName_R9, "R" + R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Test Completed", 0f, m_Runid);
                                r9priority = 0;
                                Console.Beep(5000, 5000); //Added on 081220231711
                                //Implement or Add code to move RA to Home position                                
                                //////MessageBox.Show("Task Completed as required By User ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                r9inx = 0;
                                protocolinitiateflg_R9 = false;
                                protocolStartedflg_R9 = false;
                                R9_protostart = false;
                                rackinunloading[2] = 1;
                                U3.Enabled = true;
                                //////R9_cnt = R9_cnt + 6;   /*Commented on 24112023 1627*/
                                //call Unload racks function
                                return;
                            }
                            else
                            {
                                topickupflg_R9 = true;
                                pickplace = 1;
                                //update_jardetails_runtime(JarName_R9, "", true, false, r9_taskcomp.ToString().Substring(11));
                            }
                        }
                        else if (dippedflg_R9 == true)
                        {
                            todipflg_R9 = false;
                            dippedflg_R9 = false;
                            topickupflg_R9 = false;
                            pickedflg_R9 = false;
                            toplaceflg_R9 = true;
                            placedflg_R9 = false;
                            pickplace = 2;
                            r9priority = 1;
                            noofdips_R9 = 0;
                            update_jardetails_runtime(JarName_R9, "", true, false, r9_taskcomp.ToString().Substring(11));
                            //below code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                            if (r9inx > 0)
                            {
                                r9inx++;
                                rackvalinc = true;
                            }
                            if ((r9inx >= 0) && (rackvalinc == true))
                            {
                                rackvalinc = false;
                                sndcmdstr = get_Jar_positiondetails("R9");
                            }
                            //Above code updated on 19122023 1214 after dipping rack in one jar and placing rack to another jar
                        }
                    }
                }
                string rackno = "";
                if ((pickplace == 2) || (pickplace == 3))
                {
                    rackno = "R" + R9_cnt.ToString();
                    update_jardetails_runtime(JarName_R9, rackno, false, true, r9_taskcomp.ToString().Substring(11));
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    rackno = "";
                    update_jardetails_runtime(JarName_R9, rackno, true, false, r9_taskcomp.ToString().Substring(11));
                }

                if ((sndcmdstr == "") || (noofdips_R9 > 0) && (snddipcmdstr == ""))
                    return;

                //New code added on 22-11-2023 2348
                ////check_priority_times(9);

                rareached = false;
                sensed = false;
                repeatval = 0;
                if (pickplace == 0)         //Moving Rack from Jar to Jar
                    functioncode = 1;
                else if (pickplace == 1)    //For Picking Rack from Jar
                    functioncode = 2;
                else if (pickplace == 2)    // For Placing Rack in Jar
                    functioncode = 3;
                else if (pickplace == 3)    // For Dipping RAck in Jar
                    functioncode = Communication.RA_DIP;

                //Framing Command
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                CommandName = "";
                CommandName = "Rack-" + R9_cnt.ToString();
                if (functioncode == 2)
                    CommandName = CommandName + " Picked from " + JarName_R9;
                else if (functioncode == 3)
                    CommandName = CommandName + " Placed in " + JarName_R9;
                else if (functioncode == Communication.RA_DIP)
                    CommandName = CommandName + " Dipped in " + JarName_R9;


                ////if (pickplace < 3)
                ////{
                ////    if ((JarName_R9.Contains("J")) || (JarName_R9.Contains("W")) || (JarName_R9.Contains("U")) || (JarName_R9.Contains("L")))      //For Normal Jars Moving Parameter                    
                ////    {
                ////        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                ////        Communication.RA_No = 1;
                ////    }
                ////    else if (JarName_R9.Contains("H"))  //For Heater Jars Moving parameter                    
                ////    {
                ////        sndcmdstr = sndcmdstr + ",1"; //functioncode = 2;
                ////                                      //Communication.RA_No = 2;
                ////        Communication.RA_No = 1;
                ////    }
                ////    RA_Protorun_intiated = true; // Added on 22-08-2023
                ////    if (TempReadingStarted == true)
                ////    {
                ////        tmr_tempstart.Enabled = true;
                ////        temp_restartincub = System.DateTime.Now;
                ////        temp_restartincub = temp_restartincub.AddSeconds(10);
                ////        tmr_temp.Enabled = false;
                ////        tmr_temp_incub.Enabled = false;
                ////    }
                ////    snd_rcvCmd(functioncode, sndcmdstr);  //Picking rack from Jar & Placing rack in Jar
                ////}
                ////else if (pickplace == 3) //Dipping the rack in Jar 
                ////{
                ////    Communication.RA_No = 1;
                ////    RA_Protorun_intiated = true; // Added on 22-08-2023
                ////    if (TempReadingStarted == true)
                ////    {
                ////        tmr_tempstart.Enabled = true;
                ////        temp_restartincub = System.DateTime.Now;
                ////        temp_restartincub = temp_restartincub.AddSeconds(10);
                ////        tmr_temp.Enabled = false;
                ////        tmr_temp_incub.Enabled = false;
                ////    }
                ////    snd_rcvCmd(functioncode, snddipcmdstr);
                ////}

                string cmdtosend = "";
                if (pickplace < 3)
                {
                    if ((JarName_R9.Contains("J")) || (JarName_R9.Contains("W")) || (JarName_R9.Contains("U")) || (JarName_R9.Contains("L")))      //For Normal Jars Moving Parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                        //Communication.RA_No = 1;
                    }
                    else if (JarName_R9.Contains("H"))  //For Heater Jars Moving parameter                    
                    {
                        sndcmdstr = sndcmdstr + ",1";   //functioncode = 2;                                                      
                        //Communication.RA_No = 1;        //Communication.RA_No = 2;                        
                    }
                    cmdtosend = "";
                    cmdtosend = sndcmdstr;
                }
                else if (pickplace == 3) //Dipping the rack in Jar 
                {
                    cmdtosend = "";
                    cmdtosend = snddipcmdstr;
                    //Communication.RA_No = 1;
                }
                Communication.RA_No = R9_RNo;
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                //////Ra busy status added on 17-11-2023
                ////if ((RA1_Busystate == false) && (RA2_Busystate == false))
                ////{
                ////    Communication.RA_No = 1;
                ////    RA1_Busystate = true;
                ////}
                ////else if (RA1_Busystate == true)
                ////{
                ////    if (toplaceflg_R9 == false)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R9 == true)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                ////else if (RA2_Busystate == true)
                ////{
                ////    if (toplaceflg_R9 == true)
                ////    {
                ////        Communication.RA_No = 2;
                ////        RA2_Busystate = true;
                ////    }
                ////    else if (toplaceflg_R9 == false)
                ////    {
                ////        Communication.RA_No = 1;
                ////        RA1_Busystate = true;
                ////    }
                ////}
                //////Ra busy status added on 17-11-2023

                RA_Protorun_intiated = true; // Added on 22-08-2023
                if (TempReadingStarted == true)
                {
                    tmr_tempstart.Enabled = true;
                    temp_restartincub = System.DateTime.Now;
                    temp_restartincub = temp_restartincub.AddSeconds(10);
                    tmr_temp.Enabled = false;
                    tmr_temp_incub.Enabled = false;
                }
                if (functioncode == Communication.RA_PICK) R9_pickcmdissue = true;  // Added on 19122023 1138
                snd_rcvCmd(functioncode, cmdtosend);  //Picking rack from Jar or Placing rack in Jar or & Dipping rack in Jar
                r9_WaitCnt = 0;
                tmr_Cut.Enabled = false;
                tmr_r9.Enabled = true;
                tmr_r9.Interval = 500;
                //tmr_r1.Start();
                cmdsnt++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        //New function written on 18072024 1805
        Boolean RA_Move_Intiate = false, RA_Move_issued = false;
        //New function written on 18072024 1805

        #endregion

        private void update_jardetails_runtime(string jarname, string rackno, bool onlyjar, bool bothrackjar, string taskcomptime)
        {
            try
            {
                switch (jarname)
                {
                    case "J1":
                        {
                            J1.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J1.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J1.OnlyJar = true; J1.RackNumber = "J1"; }
                            break;
                        }
                    case "J2":
                        {
                            J2.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J2.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J2.OnlyJar = true; J2.RackNumber = "J2"; }
                            break;
                        }
                    case "J3":
                        {
                            J3.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J3.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J3.OnlyJar = true; J3.RackNumber = "J3"; }
                            break;
                        }
                    case "J4":
                        {
                            J4.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J4.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J4.OnlyJar = true; J4.RackNumber = "J4"; }
                            break;
                        }
                    case "J5":
                        {
                            J5.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J5.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J5.OnlyJar = true; J5.RackNumber = "J5"; }
                            break;
                        }
                    case "J6":
                        {
                            J6.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J6.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J6.OnlyJar = true; J6.RackNumber = "J6"; }
                            break;
                        }
                    case "J7":
                        {
                            J7.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J7.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J7.OnlyJar = true; J7.RackNumber = "J7"; }
                            break;
                        }
                    case "J8":
                        {
                            J8.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J8.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J8.OnlyJar = true; J8.RackNumber = "J8"; }
                            break;
                        }
                    case "J9":
                        {
                            J9.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J9.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J9.OnlyJar = true; J9.RackNumber = "J9"; }
                            break;
                        }
                    case "J10":
                        {
                            J10.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J10.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J10.OnlyJar = true; J10.RackNumber = "J10"; }
                            break;
                        }
                    case "J11":
                        {
                            J11.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J11.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J11.OnlyJar = true; J11.RackNumber = "J11"; }
                            break;
                        }
                    case "J12":
                        {
                            J12.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J12.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J12.OnlyJar = true; J12.RackNumber = "J12"; }
                            break;
                        }
                    case "J13":
                        {
                            J13.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J13.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J13.OnlyJar = true; J13.RackNumber = "J13"; }
                            break;
                        }
                    case "J14":
                        {
                            J14.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J14.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J14.OnlyJar = true; J14.RackNumber = "J14"; }
                            break;
                        }
                    case "J15":
                        {
                            J15.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J15.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J15.OnlyJar = true; J15.RackNumber = "J15"; }
                            break;
                        }
                    case "J16":
                        {
                            J16.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J16.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J16.OnlyJar = true; J16.RackNumber = "J16"; }
                            break;
                        }
                    case "J17":
                        {
                            J17.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J17.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J17.OnlyJar = true; J17.RackNumber = "J17"; }
                            break;
                        }
                    case "J18":
                        {
                            J18.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J18.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J18.OnlyJar = true; J18.RackNumber = "J18"; }
                            break;
                        }
                    case "J19":
                        {
                            J19.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J19.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J19.OnlyJar = true; J19.RackNumber = "J19"; }
                            break;
                        }
                    case "J20":
                        {
                            J20.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J20.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J20.OnlyJar = true; J20.RackNumber = "J20"; }
                            break;
                        }
                    case "J21":
                        {
                            J21.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J21.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J21.OnlyJar = true; J21.RackNumber = "J21"; }
                            break;
                        }
                    case "J22":
                        {
                            J22.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J22.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J22.OnlyJar = true; J22.RackNumber = "J22"; }
                            break;
                        }
                    case "J23":
                        {
                            J23.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J23.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J23.OnlyJar = true; J23.RackNumber = "J23"; }
                            break;
                        }
                    case "J24":
                        {
                            J24.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J24.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J24.OnlyJar = true; J24.RackNumber = "J24"; }
                            break;
                        }
                    case "J25":
                        {
                            J25.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J25.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J25.OnlyJar = true; J25.RackNumber = "J25"; }
                            break;
                        }
                    case "J26":
                        {
                            J26.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J26.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J26.OnlyJar = true; J26.RackNumber = "J26"; }
                            break;
                        }
                    case "J27":
                        {
                            J27.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J27.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J27.OnlyJar = true; J27.RackNumber = "J27"; }
                            break;
                        }
                    case "J28":
                        {
                            J28.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J28.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J28.OnlyJar = true; J28.RackNumber = "J28"; }
                            break;
                        }
                    case "J29":
                        {
                            J29.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J29.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J29.OnlyJar = true; J29.RackNumber = "J29"; }
                            break;
                        }
                    case "J30":
                        {
                            J30.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J30.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J30.OnlyJar = true; J30.RackNumber = "J30"; }
                            break;
                        }
                    case "J31":
                        {
                            J31.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J31.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J31.OnlyJar = true; J31.RackNumber = "J31"; }
                            break;
                        }
                    case "J32":
                        {
                            J32.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J32.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J32.OnlyJar = true; J32.RackNumber = "J32"; }
                            break;
                        }
                    case "J33":
                        {
                            J33.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                J33.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { J33.OnlyJar = true; J33.RackNumber = "J33"; }
                            break;
                        }
                    case "W1":
                        {
                            W1.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                W1.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { W1.OnlyJar = true; W1.RackNumber = "W1"; }
                            break;
                        }
                    case "W2":
                        {
                            W2.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                W2.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { W2.OnlyJar = true; W2.RackNumber = "W2"; }
                            break;
                        }
                    case "W3":
                        {
                            W3.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                W3.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { W3.OnlyJar = true; W3.RackNumber = "W3"; }
                            break;
                        }
                    case "W4":
                        {
                            W4.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                W4.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { W4.OnlyJar = true; W4.RackNumber = "W4"; }
                            break;
                        }
                    case "W5":
                        {
                            W5.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                W5.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { W5.OnlyJar = true; W5.RackNumber = "W5"; }
                            break;
                        }
                    case "W6":
                        {
                            W6.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                W6.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { W6.OnlyJar = true; W6.RackNumber = "W6"; }
                            break;
                        }
                    case "U1":
                        {
                            U1.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                            {
                                U1.JarRack = true;
                                U1.ElaspedTime = "";
                                U1.TaskCompletionTime = taskcomptime;
                            }
                            else if ((bothrackjar == false) && (onlyjar == true))
                                U1.OnlyJar = true;
                            break;
                        }
                    case "U2":
                        {
                            U2.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                            {
                                U2.JarRack = true;
                                U2.ElaspedTime = "";
                                U2.TaskCompletionTime = taskcomptime;
                            }
                            else if ((bothrackjar == false) && (onlyjar == true))
                                U2.OnlyJar = true;
                            break;
                        }
                    case "U3":
                        {
                            U3.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                            {
                                U3.JarRack = true;
                                U3.ElaspedTime = "";
                                U3.TaskCompletionTime = taskcomptime;
                            }
                            else if ((bothrackjar == false) && (onlyjar == true))
                                U3.OnlyJar = true;
                            break;
                        }
                    case "U4":
                        {
                            U4.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                            {
                                U4.JarRack = true;
                                U4.ElaspedTime = "";
                                U4.TaskCompletionTime = taskcomptime;
                            }
                            else if ((bothrackjar == false) && (onlyjar == true))
                                U4.OnlyJar = true;
                            break;
                        }
                    case "U5":
                        {
                            U5.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                            {
                                U5.JarRack = true;
                                U5.ElaspedTime = "";
                                U5.TaskCompletionTime = taskcomptime;
                            }
                            else if ((bothrackjar == false) && (onlyjar == true))
                                U5.OnlyJar = true;
                            break;
                        }
                    case "U6":
                        {
                            U6.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                            {
                                U6.JarRack = true;
                                U6.ElaspedTime = "";
                                U6.TaskCompletionTime = taskcomptime;
                            }
                            else if ((bothrackjar == false) && (onlyjar == true))
                                U6.OnlyJar = true;
                            break;
                        }
                    case "L1":
                        {
                            L1.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                L1.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { L1.OnlyJar = true; L1.RackNumber = "L1"; }

                            break;
                        }
                    case "L2":
                        {
                            L2.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                L2.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { L2.OnlyJar = true; L2.RackNumber = "L2"; }
                            break;
                        }
                    case "L3":
                        {
                            L3.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                                L3.JarRack = true;
                            else if ((bothrackjar == false) && (onlyjar == true))
                            { L3.OnlyJar = true; L3.RackNumber = "L3"; }
                            break;
                        }
                    case "H1":
                        {
                            H1.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                            {
                                H1.JarRack = true;
                                H1.BackgroundColor = Color.FromArgb(255, 0, 0);
                                H1.BackColor = Color.FromArgb(255, 0, 0);
                            }
                            else if ((bothrackjar == false) && (onlyjar == true))
                            {
                                H1.RackNumber = "H1";
                                H1.OnlyJar = true;
                                H1.TaskProcess = "";
                                H1.TaskCompletionTime = "";
                                H1.BackgroundColor = Color.FromArgb(255, 153, 153);
                            }
                            break;
                        }
                    case "H2":
                        {
                            H2.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                            {
                                H2.JarRack = true;
                                H2.BackgroundColor = Color.FromArgb(255, 0, 0);
                                H2.BackColor = Color.FromArgb(255, 0, 0);
                            }
                            else if ((bothrackjar == false) && (onlyjar == true))
                            {
                                H2.RackNumber = "H2";
                                H2.OnlyJar = true;
                                H2.TaskProcess = "";
                                H2.TaskCompletionTime = "";
                                H2.BackgroundColor = Color.FromArgb(255, 153, 153);
                            }
                            break;
                        }
                    case "H3":
                        {
                            H3.RackNumber = rackno;
                            if ((bothrackjar == true) && (onlyjar == false))
                            {
                                H3.JarRack = true;
                                H3.BackgroundColor = Color.FromArgb(255, 0, 0);
                                H3.BackColor = Color.FromArgb(255, 0, 0);
                            }
                            else if ((bothrackjar == false) && (onlyjar == true))
                            {
                                H3.RackNumber = "H3";
                                H3.OnlyJar = true;
                                H3.TaskProcess = "";
                                H3.TaskCompletionTime = "";
                                H3.BackgroundColor = Color.FromArgb(255, 153, 153);
                            }
                            break;
                        }
                }
            }
            catch (Exception d3)
            {
                RequiredVariables.writeerrorlogfile("While updating timing values to " + jarname + "-" + rackno, "In function update_jardetails_runtime() in Form_Runproto");
            }
        }
        #endregion

        #region Jars Positions details
        private void loadPositiondetails()
        {
            try
            {
                string filename = "";
                filename = Application.StartupPath + "\\Configuration\\JarsPos.cfg";
                string jarposvalstring = string.Empty;
                string[] jarposval;
                int cnt = 0;
                if (File.Exists(filename))
                {
                    JPos = new DataTable("JarPositions");
                    JPos.Columns.Add("SlNo", Type.GetType("System.Int32"));
                    JPos.Columns.Add("JarNo", Type.GetType("System.String"));
                    JPos.Columns.Add("X-Axis", Type.GetType("System.String"));
                    JPos.Columns.Add("Y-Axis", Type.GetType("System.String"));
                    JPos.Columns.Add("Z1-Axis", Type.GetType("System.String"));
                    JPos.Columns.Add("Z2-Axis", Type.GetType("System.String"));
                    JPos.Columns.Add("RA_No", Type.GetType("System.Int32"));

                    using (System.IO.StreamReader file = new System.IO.StreamReader(filename))
                    {
                        cnt = 0;
                        while ((jarposvalstring = file.ReadLine()) != null)
                        {
                            JPos.Rows.Add();
                            cnt = JPos.Rows.Count - 1;
                            jarposval = jarposvalstring.Split(',');
                            JPos.Rows[cnt]["SlNo"] = (cnt + 1);  //Serial Number 
                            JPos.Rows[cnt]["JarNo"] = jarposval[0].ToString();  //Jar Number  
                            JPos.Rows[cnt]["X-Axis"] = jarposval[1].ToString();  //Arm - X axis for Left/Right  
                            JPos.Rows[cnt]["Y-Axis"] = jarposval[2].ToString();  //Arm - Y axis for Forward/Backward
                            JPos.Rows[cnt]["Z1-Axis"] = jarposval[3].ToString();  //Arm - Z1 axis for Up/Down to Move RA Punch                             
                            JPos.Rows[cnt]["Z2-Axis"] = jarposval[4].ToString();  //Arm - Z2 axis for Up/Down to Move RA Punch                                                         
                            JPos.Rows[cnt]["RA_No"] = Convert.ToInt32(jarposval[5].ToString());   //Handing RA details as layout divided between two arms
                            //refresh_UI(jarposval[0].ToString(), "");  /*This function commented to test the layout and check the form refreshing fast*/
                        }
                    }
                    System.Threading.Thread.Sleep(2000);
                }
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString(), "Load position details", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }
        #endregion

        #region Communication
        /*Working Fine commented on 29112023 1457*/
        protected override void WndProc(ref Message m)
        {
            const int WM_DEVICECHANGE = 0x0219;
            //const int DBT_DEVICEARRIVAL = 0x8000;
            //const int DBT_DEVICEREMOVECOMPLETE = 0x8004;
            //const int DBT_DEVTYP_PORT = 0x00000003;
            try
            {
                switch (m.Msg)
                {
                    case WM_DEVICECHANGE:
                        BeginInvoke((MethodInvoker)delegate
                        {
                            try
                            {
                                if (mport != null)
                                {
                                    if (mport.IsOpen == true)
                                        mport.Close();
                                    lbl_disp.Text = Communication.portname + " : Closed for communication with device.... Trying to Re-establish Communication with Device Please be Patiance....";
                                    lbl_disp.BackColor = Color.Red;
                                    lbl_disp.ForeColor = Color.White;
                                    getavailableportnames();
                                }
                                else
                                {
                                    lbl_disp.Text = Communication.portname + " : is in Use by Application";
                                    lbl_disp.BackColor = Color.Red;
                                    lbl_disp.ForeColor = Color.White;
                                }
                            }
                            catch (Exception ex)
                            {
                                lbl_disp.Text = "Communication Failed With device.........";
                                lbl_disp.BackColor = Color.Red;
                                lbl_disp.ForeColor = Color.White;
                            }
                        });
                        break;
                    default:
                        break;
                }
            }
            catch (ObjectDisposedException)
            {

            }
            catch
            {

            }
            finally
            {
                base.WndProc(ref m);
            }
        }

        #region comfail checking

        internal static class NativeMethods
        {
            public const int WM_DEVICECHANGE = 0x0219;
            public const int DBT_DEVICEREMOVECOMPLETE = 0x8004;
            public const int DBT_DEVICEARRIVAL = 0x8000;

            [StructLayout(LayoutKind.Sequential)]
            public struct DEV_BROADCAST_VOLUME
            {
                public int dbcv_size;
                public int dbcv_devicetype;
                public int dbcv_reserved;
                public int dbcv_unitmask;
            }
        }
        //protected override void WndProc(ref Message m)
        //{
        //    try
        //    {

        //        base.WndProc(ref m);

        //        if (m.Msg == NativeMethods.WM_DEVICECHANGE)
        //        {
        //            if (mport.IsOpen == true)
        //                mport.Close();
        //            else if (mport.IsOpen == false)
        //                portopendflg = false;
        //            lbl_disp.Text = Communication.portname + " : Closed for communication with device.... Trying to Re-establish Communication with Device Please be Patiance....";
        //            lbl_disp.BackColor = Color.Red;
        //            lbl_disp.ForeColor = Color.White;
        //            int cnt = 0;
        //            System.Threading.Thread.Sleep(2000);
        //            //if (portopendflg == false)
        //            //{
        //            while (cnt < 3)
        //            {
        //                getavailableportnames();
        //                System.Threading.Thread.Sleep(1000);
        //                cnt++;
        //            }
        //            //}


        //        }
        //    }
        //    catch (ObjectDisposedException)
        //    {

        //    }
        //    catch
        //    {

        //    }
        //}

        private string GetDeviceName(IntPtr lParam)
        {
            // Helper method to extract the device name from the lParam
            NativeMethods.DEV_BROADCAST_VOLUME vol;
            vol = (NativeMethods.DEV_BROADCAST_VOLUME)Marshal.PtrToStructure(lParam, typeof(NativeMethods.DEV_BROADCAST_VOLUME));
            return $"{vol.dbcv_unitmask.ToString("X")}:"; // Assumes that the device is a drive (e.g., COM1:)
        }
        #endregion
        private void snd_rcvCmd(int func_code, string m_CmdData)
        {
            if (Communication.isComandInProgress)
                return;
            try
            {
                Application.DoEvents();
                byte[] cmdpkt = new byte[255];
                string resp_data = "", m_Cmdstr = "";

                //Response Variables
                byte[] receivebuff, resp_bytedata; // this variable is used for to receive the information from device
                Boolean retnval = false;  //this variable is used for to return the value for crc checking
                int cmdlen = 0, lncrc = 0;
                int dl = 0, receivecount = 0;
                string st1 = "", st2 = "";
                //Response Variables

                if (Communication.commandQueue.Count > 0)
                    m_Cmdstr = Communication.commandQueue.Dequeue();// Get the next command

                if (!mport.IsOpen)
                    init_port(); //Intializing the port

                //if (mport.IsOpen)
                //    mport.Open();

                if (mport.IsOpen)
                    Communication.portopened = true;
                else
                    Communication.portopened = false;
                m_Cmdstr = "";
                m_Cmdstr = mport.ReadExisting();

                pGotByteFlag = false;
                if (repeatval == 0)
                {
                    //Calling frame command function
                    Communication.frame_command(func_code, m_CmdData, Communication.RA_No, m_Cmdstr);
                    m_Cmdstr = Communication.framed_cmd;
                    framed_Data = m_CmdData;
                    sent_func_code = func_code;
                }
                else if (repeatval > 0)
                {
                    m_Cmdstr = Communication.framed_cmd;
                }

                cmdpkt = new byte[m_Cmdstr.Length];
                cmdpkt = Encoding.Default.GetBytes(m_Cmdstr);
                SetText(CommandName + " - " + m_Cmdstr);
                #region
                if (repeatval >= 3)
                {
                    Communication.writeCommunicationErrorlog("Communication Failed Occured for " + resp_data);
                    MessageBox.Show("Communication Failed with device check the cable connected to the device...", RequiredVariables.Msgtext, MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
                    if (mport.IsOpen)
                        mport.Close();
                    Communication.datastartreceivingflag = false;
                    Communication.isComandInProgress = false;
                    return;
                }
                else
                {
                    //checking the commuication port is open or not 
                    if (mport.IsOpen == false)
                    {
                        mport.Open();  //if comminication port got closed then opening the port.
                    }
                    //////mport.Write(cmdpkt, 0, cmdpkt.Length);  //Sending command to the unit through communication port
                    pGotByteFlag = false;
                    mport.DiscardInBuffer();
                    mport.DiscardOutBuffer();
                    while (cmd_Exec_Comp == true)
                    {
                        mport.Write(cmdpkt, 0, cmdpkt.Length);  //Sending command to the unit through communication port
                        Communication.isComandInProgress = true;// Set flag to avoid overlap
                        Communication.writeCommunicationCommands("Command * " + CommandName + " - " + m_Cmdstr);
                        break;
                    }
                    //Updating Sequence Number
                    Communication.SequnceNo++;
                    DateTime dltime = System.DateTime.Now;
                    dltime = dltime.AddSeconds(5);  // Adding 5 seconds delay 
                    delay(dltime);
                }
                #endregion

                return;
            }
            catch (Exception d3)
            {
                return;
            }
        }


        private void delay(DateTime DelayTime)
        {
            try
            {
                DateTime dltime = System.DateTime.Now;
                while (dltime < DelayTime)
                {
                    dltime = System.DateTime.Now;
                    if (pGotByteFlag == true)
                        break;
                    if (pCancelFlag == true)
                        break;
                }
            }
            catch (Exception e3)
            {

            }
        }
        string tmpval = "";
        private void checkandupdatedatatoscreen(string extractedstr)
        {
            try
            {
                string btntst = "", st1 = "", resp_data = "", cmdres = "";
                //btntst = Encoding.Default.GetString(rcvpkt);
                btntst = extractedstr;
                int funccode = 0;
                string[] Jarr = btntst.Split(',');
                string rtype = "", respval = "", msgdisp = "";
                funccode = Convert.ToInt32(Jarr[1].ToString());

                #region
                ////if (Jarr[1] == func_code.ToString())
                ////{
                resp_data = null;
                resp_data = extractedstr;
                st1 = "";
                st1 = Jarr[2];
                rtype = st1.Substring(0, 1);
                if (Jarr.Length > 3)
                {
                    respval = st1.Substring(1);
                }
                else
                {
                    respval = st1.Substring(1, 3);
                }
                switch (respval)
                {
                    case "000":
                        {
                            msgdisp = "Command Executed Successfully";
                            break;
                        }
                    case "001":
                        {
                            if ((rtype == "F") || (rtype == "I"))
                                msgdisp = "Command Accepted execution Pending";
                            else if (rtype == "N")
                                msgdisp = "Device Reboot Event";
                            break;
                        }
                    case "002":
                        {
                            if ((rtype == "F") || (rtype == "I"))
                                msgdisp = "Unknown Command";
                            else if (rtype == "N")
                                msgdisp = "Loading / Unloading Door Opened/Closed";
                            break;
                        }
                    case "003":
                        {
                            msgdisp = "Insufficient Arguments";
                            break;
                        }
                    case "004":
                        {
                            msgdisp = "Invalid Arguments";
                            break;
                        }
                    case "005":
                        {
                            msgdisp = "Robo ARM is busy";
                            break;
                        }
                    case "006":
                        {
                            msgdisp = "Path may cause collision of ARMS";
                            break;
                        }
                    case "007":
                        {
                            msgdisp = "Command Under Development";
                            break;
                        }
                    case "008":
                        {
                            msgdisp = "Fatal Error";
                            break;
                        }
                    case "009":
                        {
                            msgdisp = "Motor is Busy";
                            break;
                        }
                    case "010":
                        {
                            msgdisp = "Motor Not Rotating";
                            break;
                        }
                    case "011":
                        {
                            msgdisp = "Heater Already Off";
                            break;
                        }
                    case "012":
                        {
                            msgdisp = "Heater Alreay On";
                            break;
                        }
                }
                //New code added to avoid the clash while sending commands to device
                if (rtype == "F")
                    cmd_Exec_Comp = true;
                else
                    cmd_Exec_Comp = false;

                switch (funccode)
                {
                    case 1:  //RA Movement
                        {
                            displayScrData = "";
                            //displayScrData = "RA-" + Jarr[3] + " Movement " + msgdisp;
                            displayScrData = "RA-" + Communication.RA_No.ToString() + " Movement " + msgdisp;
                            cmdres = "";
                            cmdres = displayScrData;
                            SetText(displayScrData);
                            if ((respval == "000") && (rtype == "F"))
                            {
                                rareached = true;
                            }
                            break;
                        }
                    case 2:  //RA Picked
                        {
                            displayScrData = "";
                            //displayScrData = "RA-" + Jarr[3] + " Rack Pick " + msgdisp;
                            displayScrData = "RA-" + Communication.RA_No.ToString() + " Rack Pick " + msgdisp;
                            cmdres = "";
                            cmdres = displayScrData;
                            SetText(displayScrData);
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                rareached = true;
                                if (Process_Continued == true)
                                {
                                    ////if (TempReadingStarted == true)
                                    ////    readtemperature();
                                    //if ((Temp_Attained == false) && (incubtime_Temp_start == false))
                                    //{
                                    //    if (tmr_temp.Enabled == false)
                                    //    {
                                    //        tmr_temp.Enabled = true;
                                    //        tmr_temp.Interval = 1000;
                                    //    }
                                    //}
                                    //else if ((Temp_Attained == true) && (incubtime_Temp_start == true))
                                    //{
                                    //    if (tmr_temp_incub.Enabled == false)
                                    //    {
                                    //        tmr_temp_incub.Enabled = true;
                                    //        tmr_temp_incub.Interval = 1000;
                                    //    }
                                    //}
                                }
                            }
                            break;
                        }
                    case 3:  //RA Placed
                        {
                            displayScrData = "";
                            //displayScrData = "RA-" + Jarr[3] + " Rack Placed " + msgdisp;
                            displayScrData = "RA-" + Communication.RA_No.ToString() + " Rack Placed " + msgdisp;
                            cmdres = "";
                            cmdres = displayScrData;
                            SetText(displayScrData);
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                rareached = true;
                                if (Process_Continued == true)
                                {
                                    ////if (TempReadingStarted == true)
                                    ////    readtemperature();
                                    ////if ((Temp_Attained == false) && (incubtime_Temp_start == false))
                                    ////{
                                    ////    if (tmr_temp.Enabled == false)
                                    ////    {
                                    ////        tmr_temp.Enabled = true;
                                    ////        tmr_temp.Interval = 1000;
                                    ////    }
                                    ////}
                                    ////else if ((Temp_Attained == true) && (incubtime_Temp_start == true))
                                    ////{
                                    ////    if (tmr_temp_incub.Enabled == false)
                                    ////    {
                                    ////        tmr_temp_incub.Enabled = true;
                                    ////        tmr_temp_incub.Interval = 1000;
                                    ////    }
                                    ////}
                                }
                            }
                            break;
                        }
                    case 4: //Level Sensing With RA
                        {
                            float lvlval = 0f;
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                string[] lvl = Jarr[3].Split('*');
                                displayScrData = "Level Sense Value : " + lvl[0].ToString();
                                cmdres = "";
                                cmdres = displayScrData;
                                lvlval = (float)Convert.ToDouble(lvl[0].ToString());
                                checkrackval(lvlval);
                                sensed = true;
                                rareached = true;
                                if (protoshortname == "") protoshortname = "Level Sense";
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Liquid Level - " + lvlval.ToString(), 0, m_Runid);
                                Communication.writeCommunicationCommands(JarName + " Value - " + lvlval.ToString());
                            }
                            else
                            {
                                displayScrData = "Level Sense Value  : " + msgdisp;
                            }
                            SetText(displayScrData);
                            break;
                        }
                    case 5: //Home Command
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                if (protoshortname == "") protoshortname = "Home Command";
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Home Reached", 0, m_Runid);
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                if (htr_door_opencmd_intiate == true)
                                {
                                    htr_door_open = true;
                                    displayScrData = "Heater Door Opened";
                                    cmdres = "";
                                    cmdres = displayScrData;
                                    SetText(displayScrData);
                                }
                                else if (htr_door_opencmd_continue_intiate == true)
                                {
                                    htr_door_open = true;
                                    displayScrData = "Heater Door Opened";
                                    cmdres = "";
                                    cmdres = displayScrData;
                                    SetText(displayScrData);
                                }
                                else if (unloadJars_lvlintiated == true)
                                {
                                    Homecmdissued = true;
                                    displayScrData = "All axis Moved to Home";
                                    cmdres = "";
                                    cmdres = displayScrData;
                                    SetText(displayScrData);
                                }
                                else if (moveinitiateflg == true)
                                {
                                    Homecmdissued = true;
                                    displayScrData = "All axis Moved to Home";
                                    cmdres = "";
                                    cmdres = displayScrData;
                                    SetText(displayScrData);
                                }
                                else if (htr_door_open == false)
                                {
                                    Homecmdissued = true;
                                    displayScrData = "All axis Moved to Home";
                                    cmdres = "";
                                    cmdres = displayScrData;
                                    SetText(displayScrData);
                                }
                                else if (Both_Z_Homecmdissued == true)
                                {
                                    Homecmdissued = true;
                                    displayScrData = "Both Z-axis Moved to Home";
                                    cmdres = "";
                                    cmdres = displayScrData;
                                    SetText(displayScrData);
                                }
                            }
                            else
                            {
                                if (htr_door_opencmd_intiate == true)
                                {
                                    displayScrData = "Heater Door Status " + msgdisp;
                                }
                                else if (htr_door_opencmd_continue_intiate == true)
                                {
                                    displayScrData = "Heater Door Status " + msgdisp;
                                }
                                else if (moveinitiateflg == true)
                                {
                                    displayScrData = "All axis Moved to Home" + msgdisp;
                                }
                                else if (htr_door_open == false)
                                {
                                    Homecmdissued = false;
                                    displayScrData = "Home Status " + msgdisp;
                                }
                                else if (Both_Z_Homecmdissued == true)
                                {
                                    displayScrData = "Both Z-axis Home Issued " + msgdisp;
                                }
                                cmdres = "";
                                cmdres = displayScrData;
                                SetText(displayScrData);
                            }
                            ////tmr_Cut.Enabled = true;
                            ////tmr_Cut.Interval = 500;
                            break;
                        }
                    case 6: //Get Home Status
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                if (protoshortname == "") protoshortname = "Home Status";
                                displayScrData = "";
                                if ((respval == "000") && (rtype == "F"))
                                {
                                    gethomestatus_flg = true;  //Added on 22-12-2023
                                    homestatusval = Jarr[3].Substring(0, 8); //Added on 22-12-2023
                                    if (Jarr[3].Substring(0, 8) == "11111111")
                                        displayScrData = "All axis are in Home";
                                    else
                                    {
                                        string st11 = Jarr[3].Substring(0, 8);
                                        for (int k = 0; k < st11.Length; k++)
                                        {
                                            if (st11.Substring(k, 1) == "1")
                                            {
                                                if (k == 0)
                                                {
                                                    displayScrData = "Heater Door Opened";
                                                }
                                                else if (k == 1)
                                                {
                                                    displayScrData = displayScrData + ", Agitation Ok";
                                                }
                                                else if (k == 2)
                                                {
                                                    displayScrData = displayScrData + ", RA-2 Z in Home";
                                                }
                                                else if (k == 3)
                                                {
                                                    displayScrData = displayScrData + ", RA-2 Y in Home";
                                                }
                                                else if (k == 4)
                                                {
                                                    displayScrData = displayScrData + ", RA-2 X in Home";
                                                }
                                                else if (k == 5)
                                                {
                                                    displayScrData = displayScrData + ", RA-1 Z in Home";
                                                }
                                                else if (k == 6)
                                                {
                                                    displayScrData = displayScrData + ", RA-1 Y in Home";
                                                }
                                                else if (k == 7)
                                                {
                                                    displayScrData = displayScrData + ", RA-1 X in Home";
                                                }
                                            }
                                            else if (st11.Substring(k, 1) == "0")
                                            {
                                                if (k == 0)
                                                {
                                                    displayScrData = "Heater Door Failed";
                                                }
                                                else if (k == 1)
                                                {
                                                    displayScrData = displayScrData + ", Agitation Failed";
                                                }
                                                else if (k == 2)
                                                {
                                                    displayScrData = displayScrData + ", RA-2 Z  Failed";
                                                }
                                                else if (k == 3)
                                                {
                                                    displayScrData = displayScrData + ", RA-2 Y Failed";
                                                }
                                                else if (k == 4)
                                                {
                                                    displayScrData = displayScrData + ", RA-2 X Failed";
                                                }
                                                else if (k == 5)
                                                {
                                                    displayScrData = displayScrData + ", RA-1 Z Failed";
                                                }
                                                else if (k == 6)
                                                {
                                                    displayScrData = displayScrData + ", RA-1 Y Failed";
                                                }
                                                else if (k == 7)
                                                {
                                                    displayScrData = displayScrData + ", RA-1 X Failed";
                                                }
                                            }
                                        }
                                        cmdres = "";
                                        cmdres = displayScrData;
                                    }
                                }
                                else
                                {
                                    displayScrData = "Home Status " + msgdisp;
                                }
                                if (protoshortname == "") protoshortname = "Home Status";
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Home Status - " + Jarr[3].Substring(0, 8), 0f, m_Runid);
                            }
                            else
                            {
                                displayScrData = "Home Status " + msgdisp;
                            }
                            SetText(displayScrData);
                            break;
                        }
                    case 7: //Rack Holding Status
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                displayScrData = "Rack Status - " + Jarr[3].ToString().Substring(0, 2);
                                if (protoshortname == "") protoshortname = "Rack Status";
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Rack Hold Status - " + Jarr[3].Substring(0, 2), 0f, m_Runid);
                                if ((Jarr[3].ToString().Substring(0, 2) == "11") || (Jarr[3].ToString().Substring(0, 2) == "01") || (Jarr[3].ToString().Substring(0, 2) == "10"))
                                {
                                    ra_holdtstaus = true;
                                }
                                else
                                {
                                    ra_holdtstaus = false;
                                }
                            }
                            else
                            {
                                displayScrData = "Rack Status " + msgdisp;
                            }
                            SetText(displayScrData);
                            break;
                        }
                    case 8: //Door Control
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                displayScrData = "Heater Door ";
                                if (protoshortname == "") protoshortname = "Door Ctrl";
                                if (htr_door_opencmd_intiate == true)
                                {
                                    displayScrData = displayScrData + "Opened Sucessfully";
                                    htr_door_open = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Heater Door Opened", 0f, m_Runid);
                                }
                                else if (htr_door_opencmd_continue_intiate == true)
                                {
                                    displayScrData = displayScrData + "Opened Sucessfully";
                                    htr_door_open = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Heater Door Opened", 0f, m_Runid);
                                }
                                else if (htr_door_opencmd_toload_Nxtrack == true)
                                {
                                    displayScrData = displayScrData + "Opened Sucessfully";
                                    htr_door_open = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Heater Door Opened", 0f, m_Runid);
                                }
                                else if (htr_door_closecmd_intiate == true)
                                {
                                    displayScrData = displayScrData + "Closed Sucessfully";
                                    htr_door_close = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Heater Door Closed", 0f, m_Runid);
                                }
                            }
                            else
                            {
                                displayScrData = "Doors Status : " + msgdisp;
                            }
                            SetText(displayScrData);
                            break;
                        }
                    case 9: //Door Status
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                string[] lvl = Jarr[3].Split('*');
                                if (protoshortname == "") protoshortname = "Door Status";
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Doors Status" + lvl[0].ToString(), 0f, m_Runid);

                                if ((lvl[0].Substring(0, 1) == "1") && (lvl[0].Substring(1, 1) == "1"))
                                {
                                    displayScrData = "Heater Door : Opened";
                                    door_status_open = true;
                                }
                                else if ((lvl[0].Substring(0, 1) == "1") && (lvl[0].Substring(1, 1) == "0"))
                                {
                                    displayScrData = "Heater Door : Closed";
                                    door_status_close = true;
                                }
                                else if ((lvl[0].Substring(0, 1) == "0") && (lvl[0].Substring(1, 1) == "1"))
                                {
                                    displayScrData = "Loading/Unloading Door : Opened";
                                    door_status_open = true;
                                }
                                else if ((lvl[0].Substring(0, 1) == "0") && (lvl[0].Substring(1, 1) == "0"))
                                {
                                    door_status_close = true;
                                    displayScrData = "Loading/Unloading Door : Closed";
                                }
                                //displayScrData = "Doors Status" + Jarr[3].ToString();
                            }
                            else
                            {
                                displayScrData = "Doors Status " + msgdisp;
                            }
                            SetText(displayScrData);
                            break;
                        }
                    case 10: // Set Temperature
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                displayScrData = " Given Temperature Value Successfully Set to Device";
                                TempSet = true;
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, settemp + " - Temperature set to device", Convert.ToSingle(settemp), m_Runid);

                                ////// New code added on 06112024 1528 as observed by self                
                                ////TempReadingStarted = true;
                                ////temp_restartincub = System.DateTime.Now;
                                ////temp_restartincub = temp_restartincub.AddSeconds(5);
                                ////tmr_tempstart.Enabled = true;
                                ////tmr_tempstart.Interval = 1000;
                                ////// New code added on 06112024 1528 as observed by self                

                            }
                            else
                            {
                                displayScrData = "Temperature Value Not Set " + msgdisp;
                                TempSet = false;
                            }
                            SetText(displayScrData);
                            break;
                        }
                    case 11: //Get Temperature
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                string[] lvl = Jarr[3].Split('*');
                                displayScrData = "Temperature : " + lvl[0].ToString();
                                TempRead = true;
                                tmpval = lvl[0].ToString();
                                if (Convert.ToInt32(tmpval) >= (settemp))
                                {
                                    Temp_Attained = true;
                                }
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, "Device temperature ", Convert.ToSingle(Convert.ToInt32(tmpval)), m_Runid);
                                //txt_readtmp.Text = lvl[0].ToString();
                            }
                            else
                            {
                                displayScrData = "Temperature  : " + msgdisp;
                                tmpval = "--";
                            }
                            SetText(displayScrData);
                            //SetText_txtbox(tmpval);
                            break;
                        }
                    case 12: //Heater Control
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                if (protoshortname == "") protoshortname = "Heater Switch";
                                if (htr_on_intiate == true)
                                {
                                    htr_on = true;
                                    displayScrData = "Heater Switched On ";
                                }
                                else if (htr_off_intiate == true)
                                {
                                    htr_off = true;
                                    displayScrData = "Heater Switched Off ";
                                }
                                cmdres = "";
                                cmdres = displayScrData;
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, cmdres, (float)(0), m_Runid);
                            }
                            else
                            {
                                if (htr_on_intiate == true)
                                {
                                    displayScrData = "Unable to Switch On Heater";
                                }
                                else if (htr_off_intiate == true)
                                {
                                    displayScrData = "Unable to Switch Off Heater";
                                }
                            }
                            SetText(displayScrData);
                            break;
                        }
                    case 13: //Water Valve Control
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                int vlno = 0;
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                if (protoshortname == "") protoshortname = "Water valve";
                                cmdres = "";
                                vlno = Convert.ToInt32(valno);
                                if (valonflg == true)
                                {
                                    valonflg = false;
                                    displayScrData = "Water Valve : " + valno + " is On";
                                    water_valves_on_off_state[vlno - 1] = 1;  //Putting On State in array   -- Added on 13122023 1524
                                    cmdres = displayScrData;
                                    if (valno == "1")
                                        W1_On_State = true;
                                    else if (valno == "2")
                                        W2_On_State = true;
                                    else if (valno == "3")
                                        W3_On_State = true;
                                    else if (valno == "4")
                                        W4_On_State = true;
                                    else if (valno == "5")
                                        W5_On_State = true;
                                    else if (valno == "6")
                                        W6_On_State = true;
                                }
                                else if (valoffflg == true)
                                {
                                    valoffflg = false;
                                    displayScrData = "Water Valve : " + valno + " is Off";
                                    water_valves_on_off_state[vlno - 1] = 0;  //Putting off State in array   -- Added on 13122023 15241
                                    cmdres = displayScrData;
                                    if (valno == "1")
                                        W1_Off_State = true;
                                    else if (valno == "2")
                                        W2_Off_State = true;
                                    else if (valno == "3")
                                        W3_Off_State = true;
                                    else if (valno == "4")
                                        W4_Off_State = true;
                                    else if (valno == "5")
                                        W5_Off_State = true;
                                    else if (valno == "6")
                                        W6_Off_State = true;
                                }
                                string jnm = "";
                                if (valno == "1")
                                    jnm = "W1";
                                else if (valno == "2")
                                    jnm = "W2";
                                else if (valno == "3")
                                    jnm = "W3";
                                else if (valno == "4")
                                    jnm = "W4";
                                else if (valno == "5")
                                    jnm = "W5";
                                else if (valno == "6")
                                    jnm = "W6";

                                //updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), jnm, "R" + washrackno.ToString(), DateTime.Now.ToString(), monVal, cmdres, (float)(0));
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Tap Water", jnm, "--", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, cmdres, (float)(0), m_Runid);
                            }
                            else
                            {
                                displayScrData = "Water Valve Status " + msgdisp;
                            }
                            SetText(displayScrData);
                            break;
                        }
                    case 14: //Water Valve Status
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                string[] lvl = Jarr[3].Split('*');
                                if (protoshortname == "") protoshortname = "Water valve Status";
                                if (lvl[0].ToString() == "000000")
                                {
                                    displayScrData = "All Valves Closed ";
                                }
                                else if (lvl[0].ToString() == "111111")
                                {
                                    displayScrData = "All Valves Opened ";
                                }
                                else
                                {
                                    for (int i = lvl[0].ToString().Length; i >= 0; i--)
                                    {
                                        if (i == 5)
                                        {
                                            if (lvl[0].Substring(i, 1) == "1")
                                                displayScrData = displayScrData + "V1 Opened ";
                                            else
                                                displayScrData = displayScrData + "V1 Closed ";
                                        }
                                        else if (i == 4)
                                        {
                                            if (lvl[0].Substring(i, 1) == "1")
                                                displayScrData = displayScrData + "V2 Opened ";
                                            else
                                                displayScrData = displayScrData + "V2 Closed ";
                                        }
                                        else if (i == 3)
                                        {
                                            if (lvl[0].Substring(i, 1) == "1")
                                                displayScrData = displayScrData + "V3 Opened ";
                                            else
                                                displayScrData = displayScrData + "V3 Closed ";
                                        }
                                        else if (i == 2)
                                        {
                                            if (lvl[0].Substring(i, 1) == "1")
                                                displayScrData = displayScrData + "V4 Opened ";
                                            else
                                                displayScrData = displayScrData + "V4 Closed ";
                                        }
                                        else if (i == 1)
                                        {
                                            if (lvl[0].Substring(i, 1) == "1")
                                                displayScrData = displayScrData + "V5 Opened ";
                                            else
                                                displayScrData = displayScrData + "V5 Closed ";
                                        }
                                        else if (i == 0)
                                        {
                                            if (lvl[0].Substring(i, 1) == "1")
                                                displayScrData = displayScrData + "V6 Opened ";
                                            else
                                                displayScrData = displayScrData + "V6 Closed ";
                                        }
                                    }
                                }
                                cmdres = "";
                                cmdres = displayScrData;
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, cmdres, (float)(0), m_Runid);
                            }
                            else
                            {
                                displayScrData = "Valve Status " + msgdisp;
                            }
                            SetText(displayScrData);
                            break;

                        }
                    case 15: //Poll/Version
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                string[] lvl = Jarr[3].Split('*');
                                displayScrData = "Poll/Version " + lvl[0].ToString();
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, displayScrData, (float)(0), m_Runid);
                            }
                            else
                            {
                                displayScrData = "Poll/Version " + msgdisp;
                            }
                            SetText(displayScrData);
                            break;
                        }
                    case 16: //Agitation Control
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                if (StartHesitateflg == true)
                                    displayScrData = "Agitation Started ";
                                else if (StopHesitateflg == true)
                                    displayScrData = "Agitation Stoped ";
                                cmdres = "";
                                cmdres = displayScrData;
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", "-", "-", DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, cmdres, (float)(0), m_Runid);
                            }
                            else
                            {
                                displayScrData = "Agitation Control " + msgdisp;
                            }
                            SetText(displayScrData);
                            break;
                        }
                    case 17:  //RA Dip
                        {
                            displayScrData = "";
                            if ((respval == "000") && (rtype == "F"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                string[] lvl = Jarr[3].Split('*');
                                displayScrData = "Rack Dipped Successfully With RA : " + lvl[0];
                                RA_Protorun_intiated = false;
                                rack_dip = true;
                                rareached = true;
                                ////if(Process_Continued==true)
                                ////{
                                ////    if ((Temp_Attained == false) && (incubtime_Temp_start == false))
                                ////    {
                                ////        if(tmr_temp.Enabled == false)
                                ////        {
                                ////            tmr_temp.Enabled = true;
                                ////            tmr_temp.Interval = 1000;
                                ////        }                                    
                                ////    }
                                ////    else if ((Temp_Attained == true) && (incubtime_Temp_start == true))
                                ////    {
                                ////        if (tmr_temp_incub.Enabled == false)
                                ////        {
                                ////            tmr_temp_incub.Enabled = true;
                                ////            tmr_temp_incub.Interval = 1000;
                                ////        }                                            
                                ////    }
                                ////}
                            }
                            else if ((respval == "000") && (rtype == "I"))
                            {
                                RA_Protorun_intiated = false; // Added on 22-08-2023
                                string[] lvl = Jarr[3].Split('*');
                                displayScrData = "Rack Dipping Started With RA : " + lvl[0];
                                RA_Protorun_intiated = false;
                                rack_dip_start = true;
                                rareached = true;
                            }
                            else
                            {
                                displayScrData = "RA Dip " + msgdisp;
                            }
                            SetText(displayScrData);
                            break;
                        }
                }

                #endregion
                return;
            }
            catch (Exception d3)
            {

            }
        }

        string targetDeviceDescription = "Silicon Labs CP210x USB to UART Bridge";
        private string GetPortByDescription(string deviceDescription)
        {
            string portName = "";
            using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_PnPEntity WHERE Caption LIKE '%(COM%'"))
            {
                foreach (ManagementObject obj in searcher.Get())
                {
                    string caption = obj["Caption"].ToString();  // e.g., "Silicon Labs CP210x USB to UART Bridge (COM3)"

                    if (caption.Contains(deviceDescription))  // Match device description
                    {
                        int startIndex = caption.LastIndexOf("(COM") + 1;
                        int endIndex = caption.LastIndexOf(")");
                        portName = caption.Substring(startIndex, endIndex - startIndex);  // Extract the COM port name, e.g., "COM3"
                        break;
                    }
                }
            }

            return portName;
        }
        private void getavailableportnames()
        {
            string targetPort = GetPortByDescription(targetDeviceDescription);

            if (!string.IsNullOrEmpty(targetPort))
            {
                Communication.portname = targetPort;  // Use the correct port
                Communication.baudrate = "115200";  // Default baud rate
                if (mport != null)
                {
                    if (mport.IsOpen)
                        mport.Close();
                }
                init_port();

                if (port_avail)
                {
                    ReestablishCommunication();
                }
                else
                {
                    lbl_disp.Text = "Failed to open the Communication port.";
                    lbl_disp.BackColor = System.Drawing.Color.Red;
                }
            }
            else
            {
                lbl_disp.Text = "Device not found.";
                lbl_disp.BackColor = System.Drawing.Color.Red;
            }
        }
        private void ReestablishCommunication()
        {
            if (!mport.IsOpen)
                mport.Open();

            lbl_disp.Text = "Re-establishing communication with the device. Please be patient...";
            lbl_disp.BackColor = System.Drawing.Color.Navy;
            this.Cursor = Cursors.WaitCursor;

            pGotByteFlag = false;
            lbl_disp.Text = "";
            System.Threading.Thread.Sleep(2000);  // Time delay in milliseconds

            lbl_disp.Text = Communication.portname + " : Opened for communication";
            lbl_disp.BackColor = System.Drawing.Color.Green;
            lbl_disp.ForeColor = System.Drawing.Color.White;
            this.Cursor = Cursors.Default;
        }

        private void getavailableportnames_Working()
        {
            string[] portnames = SerialPort.GetPortNames(); //load all names of  com ports to string            
            if (portnames.Length > 0)
            {
                foreach (string s in portnames)                 //add this names to comboboxPort items
                {
                    Communication.portname = s;
                    //Communication.baudrate = "9600";          //Assigning default baud rate as 9600
                    Communication.baudrate = "115200";
                    init_port();
                    if (port_avail == true)
                    {
                        if (mport.IsOpen == false)
                            mport.Open();
                        lbl_disp.Text = "Checking Communication Ports and Re-establsihing Communication with device Please be patiance..";
                        lbl_disp.BackColor = Color.Navy;

                        this.Cursor = Cursors.WaitCursor;

                        Communication.devid = 1;
                        pGotByteFlag = false;
                        Communication.resultvalue = "";

                        lbl_disp.Text = "";
                        ////Making machine to wait for 30 seconds for RA to reach home as port reintiated in PC side or in machine
                        System.Threading.Thread.Sleep(5000);  ////Taken time delay in milli seconds
                                                              ////Sending RA home command to device.
                        lbl_disp.Text = Communication.portname + " : Opened for communication";
                        lbl_disp.BackColor = Color.Green;
                        this.Cursor = Cursors.Default;
                        portopendflg = true;
                        Communication.portopened = true;
                    }
                }
            }
            else
            {
                //lbl_disp.Text = "Communication Failed With Device.... Please check the cable";
                //lbl_disp.BackColor = Color.Red;
                //portopendflg = false;
                //Communication.portopened = false;
                return;
            }
        }
        void init_port()
        {
            try
            {
                port_avail = false;
                mport = new SerialPort();
                mport.PortName = Communication.portname;
                mport.Parity = Parity.None;
                mport.StopBits = StopBits.One;
                mport.DataBits = 8;
                mport.Handshake = Handshake.None;
                mport.BaudRate = int.Parse(Communication.baudrate);
                mport.DataReceived += new SerialDataReceivedEventHandler(DataReceivedHandler);
                if (mport.IsOpen == false)
                    mport.Open();
                //if (cmd_Exec_Comp == false)
                //    cmd_Exec_Comp = true;
                port_avail = true;
                Communication.portopened = true;
            }
            catch (Exception ex)
            {
                port_avail = false;
                Communication.portopened = false;
            }
        }

        private void ComportStatusChanged(object sender, SerialPinChangedEventArgs e)
        {
            if (e.EventType == SerialPinChange.Break)
            {
                lbl_disp.Text = Communication.portname + " : Closed for communication with device.... Trying to Re-establish Communication with Device Please be Patiance....";
                lbl_disp.BackColor = Color.Red;
                lbl_disp.ForeColor = Color.White;
            }
            else if (e.EventType == SerialPinChange.CtsChanged && mport.CtsHolding)
            {
                //Console.WriteLine("Clear To Send (CTS) signal holding. COM port may have been reconnected.");
                getavailableportnames();
            }
            else if (e.EventType == SerialPinChange.DsrChanged && mport.DsrHolding)
            {
                ////Console.WriteLine("Data Set Ready (DSR) signal holding. COM port may have been reconnected.");
                getavailableportnames();
            }
            // Add more conditions as needed
        }

        private void DataReceivedHandler(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {

                byte[] receivebuff, resp_bytedata; // this variable is used for to receive the infrmation from device
                Boolean retnval = false;  //this variable is used for to return the value for crc checking
                int func_code = 0, cmdlen = 0, lncrc = 0;
                int dl = 0, receivecount = 0;
                string resp_data = "", st1 = "", st2 = "";

                #region DataResponse
                ////if (pGotByteFlag == true)
                ////{
                func_code = sent_func_code;
                try
                {
                    System.Threading.Thread.Sleep(100);  //Waiting for 100 ms to get the data from the device
                    //if (mport.ReadBufferSize > 0)
                    if (mport.BytesToRead > 0)
                    {
                        pGotByteFlag = true;
                        receivebuff = new byte[mport.ReadBufferSize];
                        retnval = false;
                        if (Communication.connectionMode == false)
                        {
                            receivecount = mport.Read(receivebuff, 0, mport.ReadBufferSize);
                            if (receivecount <= 0)
                            {
                                repeatval++;
                                snd_rcvCmd(func_code, framed_Data);
                                return;
                            }

                            byte[] rcvpkt = new byte[receivecount];
                            byte[] buff1 = new byte[receivecount];
                            byte[] buff2 = new byte[receivecount];
                            int crc = 0;

                            rcvpkt = new byte[receivecount];
                            func_code = sent_func_code;

                            if (receivecount > 0)
                            {
                                string btntst = "";
                                pGotByteFlag = true;   // Modified on 30-08-2024 1225 prviously this flag is above if statement(if (receivecount > 0)) 
                                Array.Copy(receivebuff, 0, rcvpkt, 0, receivecount);
                                btntst = Encoding.Default.GetString(rcvpkt);
                                if (btntst.Contains("I001")) pGotByteFlag = false;
                                ////////Communication.writeCommunicationCommands("Raw Resp -" + btntst);
                                string[] cmdresp = btntst.Split('\n');
                                if (cmdresp.Length > 0)
                                {
                                    int cnt = 0;
                                    for (cnt = 0; cnt < cmdresp.Length; cnt++)
                                    {
                                        btntst = "";
                                        btntst = cmdresp[cnt];
                                        if (btntst.Contains("Enter string"))
                                            cnt++;
                                        btntst = "";
                                        btntst = cmdresp[cnt];

                                        if (!string.IsNullOrEmpty(btntst))
                                        {
                                            if (btntst.Contains('\r'))
                                                btntst = btntst.Replace("\r", "");

                                            btntst = btntst.Replace("#", "");
                                            btntst = btntst.Replace("!", "");

                                            ////if(btntst.Contains("crc not ok"))
                                            ////{
                                            ////    repeatval += 1;
                                            ////    snd_rcvCmd(func_code, framed_Data);
                                            ////}
                                            ////else
                                            ////{
                                            rcvpkt = Encoding.Default.GetBytes(btntst);
                                            crc = Communication.CRC_Calculation(rcvpkt, 2);
                                            if (crc == 1)
                                            {
                                                repeatval += 1;
                                                snd_rcvCmd(func_code, framed_Data);
                                            }
                                            else
                                            {
                                                Communication.isComandInProgress = false;// Set flag to avoid overlap
                                                Communication.writeCommunicationCommands("CRC-Response  - " + btntst);
                                                checkandupdatedatatoscreen(btntst);
                                            }
                                            ////}
                                        }
                                    }
                                    if (cnt == cmdresp.Length)
                                        return;
                                }
                            }
                        }
                    }
                    else  //Didn't received the data from device
                    {
                        if (func_code == 15)  //Poll command                                              
                        {
                            if (Communication.devid < 255)
                            {
                                Communication.devid++;
                                snd_rcvCmd(func_code, framed_Data);     //Sending the same command for another time to machine
                            }
                            else
                            {
                                //writeCommunicationErrorlog("Communication Failed Occured for - " + Command_Name);
                                MessageBox.Show("Communication Failed with device check the cable connected to the device...", "H & E Communication", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                                if (mport.IsOpen)
                                    mport.Close();
                                return;
                            }
                        }
                    }
                }
                catch (Exception e3)
                {
                    //writeCommunicationErrorlog("Error recived while receiving data from device for command " + Command_Name + " function code - " + func_code + " and command : " + resp_data + "\r\nError String :" + e3.ToString());
                    return;
                }
                #endregion

            }
            catch (Exception d3)
            {

            }

        }
        #endregion

        #region Display Text
        delegate void SetTextCallback(string text);
        private void SetText(string text)
        {
            try
            {
                Application.DoEvents();
                // InvokeRequired required compares the thread ID of the
                // calling thread to the thread ID of the creating thread.
                // If these threads are different, it returns true.
                if (this.lbl_disp.InvokeRequired)
                {
                    SetTextCallback d = new SetTextCallback(SetText);
                    this.Invoke(d, new object[] { text });
                }
                else
                {
                    this.lbl_disp.Text = text;
                }
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString() + "While updating the text file", RequiredVariables.Msgtext, MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
            }
        }
        #endregion

        #region Required Command Functions
        //Unloading racks from heater jars to unloading jars
        private void LoadRacksfrom_HeaterJars_toUnloadJars()
        {
            int pickplace = 0, uninc = 0;
            protocolinitiateflg = false;
            try
            {

                string sndcmdstr = "";
                //string[] UlJars = { "H1", "U1", "H2", "U2", "H3", "U3" };

                string[] UlJars = new string[6]; //= { "H1", "U1", "H2", "U2", "H3", "U3" };

                int cnt = 0;

                cnt = 0;
                for (int i = 0; i < rackinheater.Length; i++)
                {
                    if (rackinheater[i] == 1)
                    {
                        if (i == 0)
                        {
                            cnt++;
                        }
                        else if (i == 1)
                        {
                            cnt++;
                        }
                        else if (i == 2)
                        {
                            cnt++;
                        }
                        for (int j = uninc; j < rackinunloading.Length; j++)
                        {
                            if (rackinunloading[j] == 0)
                            {
                                cnt++;
                                uninc++;
                                break;
                            }
                        }
                    }
                }

                UlJars = new string[cnt];


                //Checking racks in heater jars and placing racks in unloading Jars
                //if(Jarloaddetails == false)
                //{
                cnt = 0;
                uninc = 0;
                for (int i = 0; i < rackinheater.Length; i++)
                {
                    if (rackinheater[i] == 1)
                    {
                        if (i == 0)
                        {
                            UlJars[cnt] = "H1";
                            cnt++;
                        }
                        else if (i == 1)
                        {
                            UlJars[cnt] = "H2";
                            cnt++;
                        }
                        else if (i == 2)
                        {
                            UlJars[cnt] = "H3";
                            cnt++;
                        }

                        for (int j = uninc; j < rackinunloading.Length; j++)
                        {
                            if (rackinunloading[j] == 0)
                            {
                                if (j == 0)
                                {
                                    UlJars[cnt] = "U1";
                                }
                                else if (j == 1)
                                {
                                    UlJars[cnt] = "U2";
                                }
                                else if (j == 2)
                                {
                                    UlJars[cnt] = "U3";
                                }
                                if (j == 3)
                                {
                                    UlJars[cnt] = "U4";
                                }
                                else if (j == 4)
                                {
                                    UlJars[cnt] = "U5";
                                }
                                else if (j == 5)
                                {
                                    UlJars[cnt] = "U6";
                                }
                                cnt++;
                                uninc++;
                                break;
                            }
                        }
                    }
                }
                //}

                incubtime = 0;
                if (inxSlno == 0)
                {
                    Jarloaddetails = true;
                    //inxSlno = fromSlno;
                    topickupflg = true;
                    pickplace = 1;
                    toplaceflg = false;
                    pickedflg = false;
                    placedflg = false;
                }
                else if (inxSlno >= UlJars.Length)
                {
                    topickupflg = false;
                    toplaceflg = false;
                    pickedflg = false;
                    placedflg = false;
                    Communication.writeCommunicationCommands("Protocol End Time");

                    MessageBox.Show("All Racks Loaded to Unloading Jars from Heater Chamber \r\n Please remove the racks from unloading Jars", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    inxSlno = 0;
                    rackinheater[0] = 0;
                    rackinheater[1] = 0;
                    rackinheater[2] = 0;
                    loading_racks = false;
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    protocolinitiateflg = false;
                    protocolcmdintiated = false;
                    sensed = false;
                    move_to_home(0); //movetohome();
                    //Implement or Add code to start Heater command or call heater starte command
                    btn_start.Enabled = true;
                    btn_Continue.Enabled = true;
                    btnClose.Enabled = true;
                    cbo_protocol.Enabled = true;
                    return;
                }
                else if (inxSlno < UlJars.Length)
                {
                    if ((pickedflg == true) || (placedflg == true))
                    {
                        if (pickedflg == true)
                        {
                            pickedflg = false;
                            toplaceflg = true;
                            topickupflg = false;
                            placedflg = false;
                            pickplace = 2;
                        }
                        else if (placedflg == true)
                        {
                            if (inxSlno >= UlJars.Length)
                            {
                                topickupflg = false;
                                toplaceflg = false;
                                pickedflg = false;
                                placedflg = false;
                                Communication.writeCommunicationCommands("Protocol End Time");

                                MessageBox.Show("All Racks Loaded to Unloaded Jars from Heater Jars ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                inxSlno = 0;
                                rackinheater[0] = 0;
                                rackinheater[1] = 0;
                                rackinheater[2] = 0;
                                //Implement or Add code to start Heater command or call heater starte command
                                btn_start.Enabled = true;
                                btn_Continue.Enabled = true;
                                btnClose.Enabled = true;
                                cbo_protocol.Enabled = true;
                                return;
                            }
                            else
                            {
                                toplaceflg = false;
                                pickedflg = false;
                                placedflg = false;
                                topickupflg = true;
                                pickplace = 1;
                            }
                        }
                    }
                }

                DataRow[] resut = JPos.Select("JarNo = '" + UlJars[inxSlno] + "'");
                if (resut.Length > 0)
                {
                    //x1Pos, y1Pos, z1Pos, z2Pos
                    JarName = resut[0]["JarNo"].ToString();
                    x1Pos = resut[0]["X-Axis"].ToString();
                    y1Pos = resut[0]["Y-Axis"].ToString();
                    z1Pos = resut[0]["Z1-Axis"].ToString();
                    z2Pos = resut[0]["Z2-Axis"].ToString();
                    sndcmdstr = "";
                    //sndcmdstr = x1Pos + "," + y1Pos + "," + z1Pos + "," + z2Pos + "," + pickplace.ToString();
                    sndcmdstr = x1Pos + "," + y1Pos + ",0";
                }

                if (pickplace == 2)
                {
                    switch (JarName)
                    {
                        case "U1":
                            {
                                U1.Text = JarName;
                                U1.JarRack = true;
                                break;
                            }
                        case "U2":
                            {
                                U2.Text = JarName;
                                U2.JarRack = true;
                                break;
                            }
                        case "U3":
                            {
                                U3.Text = JarName;
                                U3.JarRack = true;
                                break;
                            }
                        case "U4":
                            {
                                U4.Text = JarName;
                                U4.JarRack = true;
                                break;
                            }
                        case "U5":
                            {
                                U5.Text = JarName;
                                U5.JarRack = true;
                                break;
                            }
                        case "U6":
                            {
                                U6.Text = JarName;
                                U6.JarRack = true;
                                break;
                            }
                        case "H1":
                            {
                                H1.Text = JarName;
                                H1.JarRack = true;
                                break;
                            }
                        case "H2":
                            {
                                H2.Text = JarName;
                                H2.JarRack = true;
                                break;
                            }
                        case "H3":
                            {
                                H3.Text = JarName;
                                H3.JarRack = true;
                                break;
                            }
                    }
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    switch (JarName)
                    {
                        case "U1":
                            {
                                U1.OnlyJar = true;
                                break;
                            }
                        case "U2":
                            {
                                U2.OnlyJar = true;
                                break;
                            }
                        case "U3":
                            {
                                U3.OnlyJar = true;
                                break;
                            }
                        case "U4":
                            {
                                U4.OnlyJar = true;
                                break;
                            }
                        case "U5":
                            {
                                U5.OnlyJar = true;
                                break;
                            }
                        case "U6":
                            {
                                U6.OnlyJar = true;
                                break;
                            }
                        case "H1":
                            {
                                H1.OnlyJar = true;
                                break;
                            }
                        case "H2":
                            {
                                H2.OnlyJar = true;
                                break;
                            }
                        case "H3":
                            {
                                H3.OnlyJar = true;
                                break;
                            }
                    }
                }

                if (sndcmdstr == "")
                    return;

                rareached = false;
                repeatval = 0;
                if (pickplace == 0)
                    functioncode = 1;
                else if (pickplace == 1)
                    functioncode = 2;
                else if (pickplace == 2)
                    functioncode = 3;

                if ((JarName.Contains("J")) || (JarName.Contains("W")) || (JarName.Contains("U")) || (JarName.Contains("L")))      //For Normal Jars Moving Parameter                    
                {
                    sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                    Communication.RA_No = 1;
                }
                else if (JarName.Contains("H"))  //For Heater Jars Moving parameter                    
                {
                    sndcmdstr = sndcmdstr + ",1"; //functioncode = 2;
                    Communication.RA_No = 1;
                }
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                CommandName = JarName;
                if (functioncode == 2)
                    CommandName = CommandName + " - Picked";
                else if (functioncode == 3)
                    CommandName = CommandName + " - Placed";
                sensed = false;
                snd_rcvCmd(functioncode, sndcmdstr);
                tmr_Cut.Enabled = true;
                tmr_Cut.Interval = 500;
                cmdsnt++;
                inxSlno++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        //Unloading racks from Normal jars to unloading jars
        private void LoadRacksfrom_NormalJars_toUnloadJars()
        {
            int pickplace = 0, uninc = 0, uljarcnt = 0;
            protocolinitiateflg = false;
            try
            {

                string sndcmdstr = "";
                //string[] UlJars = { "H1", "U1", "H2", "U2", "H3", "U3" };

                string[] UlJars = new string[40]; //= { "H1", "U1", "H2", "U2", "H3", "U3" };
                int cnt = 0;
                //Checking racks in heater jars and placing racks in unloading Jars
                //if (Jarloaddetails == false)
                //{
                uninc = 0;
                uljarcnt = 0;
                for (int i = 0; i < rackinjars.Length; i++)
                {
                    if (rackinjars[i] == 1)
                    {
                        //Below Wash Jar added on 15-12-2023 13:15
                        if (i == 9)
                            UlJars[cnt] = "W1";
                        else if (i == 10)
                            UlJars[cnt] = "W2";
                        else if (i == 11)
                            UlJars[cnt] = "W3";
                        else if (i == 20)
                            UlJars[cnt] = "W4";
                        else if (i == 21)
                            UlJars[cnt] = "W5";
                        else if (i == 22)
                            UlJars[cnt] = "W6";
                        else  //Above code added on 15-12-2023 to unload racks from water jars
                        {
                            if (i < 9)
                                UlJars[cnt] = "J" + (i + 1).ToString();
                            else if ((i > 11) && (i <= 19))
                                UlJars[cnt] = "J" + (i - 2).ToString();
                            else if (i > 22)
                                UlJars[cnt] = "J" + (i - 5).ToString();
                        }
                        cnt++;
                        uljarcnt++;
                        for (int j = uninc; j < rackinunloading.Length; j++)
                        {
                            if (rackinunloading[j] == 0)
                            {
                                UlJars[cnt] = "U" + (uninc + 1).ToString();
                                cnt++;
                                uninc++;
                                uljarcnt++;
                                if (uninc == 6)
                                    uninc = 0;
                                break;
                            }
                        }
                    }
                }
                //}

                incubtime = 0;
                if (inxSlno == 0)
                {
                    Jarloaddetails = true;
                    //inxSlno = fromSlno;
                    topickupflg = true;
                    pickplace = 1;
                    toplaceflg = false;
                    pickedflg = false;
                    placedflg = false;
                }
                else if (inxSlno >= uljarcnt)
                {
                    topickupflg = false;
                    toplaceflg = false;
                    pickedflg = false;
                    placedflg = false;
                    Communication.writeCommunicationCommands("Unloaded Racks from Normal Jars Completed");

                    MessageBox.Show("All Racks Loaded to Unloading Jars from Normal Jars \r\n Please remove the racks from unloading Jars", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    inxSlno = 0;
                    loading_racks = false;
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    protocolinitiateflg = false;
                    protocolcmdintiated = false;
                    sensed = false;
                    move_to_home(0); //movetohome();
                    //Implement or Add code to start Heater command or call heater starte command
                    btn_start.Enabled = true;
                    btn_Continue.Enabled = true;
                    btnClose.Enabled = true;
                    cbo_protocol.Enabled = true;
                    return;
                }
                else if (inxSlno < uljarcnt)
                {
                    if ((pickedflg == true) || (placedflg == true))
                    {
                        if (pickedflg == true)
                        {
                            pickedflg = false;
                            toplaceflg = true;
                            topickupflg = false;
                            placedflg = false;
                            pickplace = 2;
                        }
                        else if (placedflg == true)
                        {
                            if (inxSlno >= uljarcnt)
                            {
                                topickupflg = false;
                                toplaceflg = false;
                                pickedflg = false;
                                placedflg = false;
                                Communication.writeCommunicationCommands("Protocol End Time");

                                MessageBox.Show("All Racks Loaded to Unloaded Jars from Normal & Wash Jars ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                inxSlno = 0;
                                btn_start.Enabled = true;
                                btn_Continue.Enabled = true;
                                btnClose.Enabled = true;
                                cbo_protocol.Enabled = true;
                                //Implement or Add code to start Heater command or call heater starte command
                                return;
                            }
                            else
                            {
                                toplaceflg = false;
                                pickedflg = false;
                                placedflg = false;
                                topickupflg = true;
                                pickplace = 1;
                            }
                        }
                    }
                }

                DataRow[] resut = JPos.Select("JarNo = '" + UlJars[inxSlno] + "'");
                if (resut.Length > 0)
                {
                    //x1Pos, y1Pos, z1Pos, z2Pos
                    JarName = resut[0]["JarNo"].ToString();
                    x1Pos = resut[0]["X-Axis"].ToString();
                    y1Pos = resut[0]["Y-Axis"].ToString();
                    z1Pos = resut[0]["Z1-Axis"].ToString();
                    z2Pos = resut[0]["Z2-Axis"].ToString();
                    sndcmdstr = "";
                    //sndcmdstr = x1Pos + "," + y1Pos + "," + z1Pos + "," + z2Pos + "," + pickplace.ToString();
                    sndcmdstr = x1Pos + "," + y1Pos + ",0";
                }

                if (pickplace == 2)
                {
                    switch (JarName)
                    {
                        case "U1":
                            {
                                U1.Text = JarName;
                                U1.JarRack = true;
                                break;
                            }
                        case "U2":
                            {
                                U2.Text = JarName;
                                U2.JarRack = true;
                                break;
                            }
                        case "U3":
                            {
                                U3.Text = JarName;
                                U3.JarRack = true;
                                break;
                            }
                        case "U4":
                            {
                                U4.Text = JarName;
                                U4.JarRack = true;
                                break;
                            }
                        case "U5":
                            {
                                U5.Text = JarName;
                                U5.JarRack = true;
                                break;
                            }
                        case "U6":
                            {
                                U6.Text = JarName;
                                U6.JarRack = true;
                                break;
                            }
                        case "H1":
                            {
                                H1.Text = JarName;
                                H1.JarRack = true;
                                break;
                            }
                        case "H2":
                            {
                                H2.Text = JarName;
                                H2.JarRack = true;
                                break;
                            }
                        case "H3":
                            {
                                H3.Text = JarName;
                                H3.JarRack = true;
                                break;
                            }
                    }
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {

                    switch (JarName)
                    {
                        case "U1":
                            {
                                U1.OnlyJar = true;
                                break;
                            }
                        case "U2":
                            {
                                U2.OnlyJar = true;
                                break;
                            }
                        case "U3":
                            {
                                U3.OnlyJar = true;
                                break;
                            }
                        case "U4":
                            {
                                U4.OnlyJar = true;
                                break;
                            }
                        case "U5":
                            {
                                U5.OnlyJar = true;
                                break;
                            }
                        case "U6":
                            {
                                U6.OnlyJar = true;
                                break;
                            }
                        case "H1":
                            {
                                H1.OnlyJar = true;
                                break;
                            }
                        case "H2":
                            {
                                H2.OnlyJar = true;
                                break;
                            }
                        case "H3":
                            {
                                H3.OnlyJar = true;
                                break;
                            }
                    }
                }

                if (sndcmdstr == "")
                    return;

                rareached = false;
                repeatval = 0;
                if (pickplace == 0)
                    functioncode = 1;
                else if (pickplace == 1)
                    functioncode = 2;
                else if (pickplace == 2)
                    functioncode = 3;

                if ((JarName.Contains("J")) || (JarName.Contains("W")) || (JarName.Contains("U")) || (JarName.Contains("L")))      //For Normal Jars Moving Parameter                    
                {
                    sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                    Communication.RA_No = 1;
                }
                else if (JarName.Contains("H"))  //For Heater Jars Moving parameter                    
                {
                    sndcmdstr = sndcmdstr + ",1"; //functioncode = 2;
                    Communication.RA_No = 1;
                }
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                CommandName = JarName;
                if (functioncode == 2)
                    CommandName = CommandName + " - Picked";
                else if (functioncode == 3)
                    CommandName = CommandName + " - Placed";
                sensed = false;
                snd_rcvCmd(functioncode, sndcmdstr);
                tmr_Cut.Enabled = true;
                tmr_Cut.Interval = 500;
                cmdsnt++;
                inxSlno++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        //Loading Racks to Heater Jars
        private void Load_Rack_to_HeaterJar(int LoadingPoint)
        {
            int pickplace = 0;
            protocolinitiateflg = false;
            try
            {
                string sndcmdstr = "";
                string[] UlJars = new string[2];
                int uninc = 0, cnt = 0;
                cnt = 0;
                if (LoadingPoint == 1)
                {
                    UlJars[0] = "L1";
                    UlJars[1] = "H1";
                }
                else if (LoadingPoint == 2)
                {
                    UlJars[0] = "L2";
                    UlJars[1] = "H2";
                }
                if (LoadingPoint == 3)
                {
                    UlJars[0] = "L3";
                    UlJars[1] = "H3";
                }
                uninc = 0;
                //}
                incubtime = 0;
                if (inxSlno == 0)
                {
                    Jarloaddetails = true;
                    topickupflg = true;
                    pickplace = 1;
                    toplaceflg = false;
                    pickedflg = false;
                    placedflg = false;
                    rackloadingtoJar = true; //Added on 19082024 1055 as getting conflicts as loading jar to heater jar or normal jar
                }
                else if (inxSlno >= UlJars.Length)
                {
                    if (JarName == "H1")
                        rackinheater[0] = 1;
                    else if (JarName == "H2")
                        rackinheater[1] = 1;
                    else if (JarName == "H3")
                        rackinheater[2] = 1;
                    topickupflg = false;
                    toplaceflg = false;
                    pickedflg = false;
                    placedflg = false;
                    Communication.writeCommunicationCommands("Racks Loaded to Heater");

                    if (continuetestflg == false)
                    {
                        if (inxSlno == 1)
                        {
                            if (R1_protostart == false)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R1_cnt.ToString() + " - Placed In H1", 0f, m_Runid);
                            else if (R1_protostart == true)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R7_cnt.ToString() + " - Placed In H1", 0f, m_Runid);
                        }
                        else if (inxSlno == 3)
                        {
                            if (R2_protostart == false)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R2_cnt.ToString() + " - Placed In H2", 0f, m_Runid);
                            else if (R2_protostart == true)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R8_cnt.ToString() + " - Placed In H2", 0f, m_Runid);
                        }
                        else if (inxSlno == 5)
                        {
                            if (R3_protostart == false)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R3_cnt.ToString() + " - Placed In H3", 0f, m_Runid);
                            else if (R3_protostart == true)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R9_cnt.ToString() + " - Placed In H3", 0f, m_Runid);
                        }
                    }
                    else
                    {
                        if (inxSlno == 1)
                            updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R4_cnt.ToString() + " - Placed In H1", 0f, m_Runid);
                        else if (inxSlno == 3)
                            updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R5_cnt.ToString() + " - Placed In H2", 0f, m_Runid);
                        else if (inxSlno == 5)
                            updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R6_cnt.ToString() + " - Placed In H3", 0f, m_Runid);
                    }
                    inxSlno = 0;
                    loading_racks = false;
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    protocolinitiateflg = false;
                    protocolcmdintiated = false;
                    sensed = false;
                    //Below code modified on 27-11-2023 1546
                    ////htrdoorintiate = true;
                    ////movetohome();
                    //Above code modified on 27-11-2023 1546

                    //Below code added on 17-08-2023 to test the rack  Previously this code in commented and revoked on 27112023 1549
                    if (Process_Continued == false)
                        disable_allflags();
                    ulcnt = 0;
                    htrdoorintiate = false;
                    proto_htrclose_intiate = false;
                    close_htrdoor();
                    //Implement or Add code to start Heater command or call heater starte command
                    return;
                }
                else if (inxSlno < UlJars.Length)
                {
                    if ((pickedflg == true) || (placedflg == true))
                    {
                        if (pickedflg == true)
                        {
                            pickedflg = false;
                            toplaceflg = true;
                            topickupflg = false;
                            placedflg = false;
                            pickplace = 2;
                            //Updating to database


                            if (continuetestflg == false)
                            {
                                if (LoadingPoint == 1)    //0
                                {
                                    h1_cnt = RackIncremantVal;
                                    if (R1_protostart == false)
                                    {
                                        //R1_cnt = RackIncremantVal;
                                        R1_cnt = h1_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R1_cnt.ToString() + " Picked From L1", 0f, m_Runid);
                                    }
                                    else if (R1_protostart == true)
                                    {
                                        //R7_cnt = RackIncremantVal;
                                        R7_cnt = h1_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R7_cnt.ToString() + " Picked From L1", 0f, m_Runid);
                                    }

                                }
                                else if (LoadingPoint == 2)  //2
                                {
                                    h2_cnt = RackIncremantVal;
                                    if (R2_protostart == false)
                                    {
                                        //R2_cnt = RackIncremantVal;
                                        R2_cnt = h2_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R2_cnt.ToString() + " Picked From L2", 0f, m_Runid);
                                    }
                                    else if (R2_protostart == true)
                                    {
                                        //R8_cnt = RackIncremantVal;
                                        R8_cnt = h2_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R8_cnt.ToString() + " Picked From L2", 0f, m_Runid);
                                    }
                                }
                                else if (LoadingPoint == 3)   //4
                                {
                                    h3_cnt = RackIncremantVal;
                                    if (R3_protostart == false)
                                    {
                                        //R3_cnt = RackIncremantVal;
                                        R3_cnt = h3_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R3_cnt.ToString() + " Picked From L3", 0f, m_Runid);
                                    }
                                    else if (R3_protostart == true)
                                    {
                                        //R9_cnt = RackIncremantVal;
                                        R9_cnt = h3_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R3_cnt.ToString() + " Picked From L3", 0f, m_Runid);
                                    }
                                }
                                RackIncremantVal++;
                            }
                            else
                            {
                                if (LoadingPoint == 1)  //0
                                {
                                    h1_cnt = RackIncremantVal;
                                    if (R4_protostart == false)
                                        R4_cnt = h1_cnt;
                                    else
                                        R10_cnt = h1_cnt;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R4_cnt.ToString() + " Picked From L1", 0f, m_Runid);
                                }
                                else if (LoadingPoint == 2)   //2
                                {
                                    h2_cnt = RackIncremantVal;
                                    if (R5_protostart == false)
                                        R5_cnt = h2_cnt;
                                    else
                                        R11_cnt = h2_cnt;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R5_cnt.ToString() + " Picked From L2", 0f, m_Runid);
                                }
                                else if (LoadingPoint == 3)  //4
                                {
                                    h3_cnt = RackIncremantVal;
                                    if (R6_protostart == false)
                                        R6_cnt = h3_cnt;
                                    else
                                        R12_cnt = h3_cnt;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R6_cnt.ToString() + " Picked From L3", 0f, m_Runid);
                                }
                                RackIncremantVal++;
                            }
                            /** Above code is commented on 21-08-2024 as getting clash with 7th rack**/
                        }
                        else if (placedflg == true)
                        {
                            rackloadingtoJar = false; //Added on 19082024 1055 as getting conflicts as loading jar to heater jar or normal jar
                            if (JarName == "H1")
                                rackinheater[0] = 1;
                            else if (JarName == "H2")
                                rackinheater[1] = 1;
                            else if (JarName == "H3")
                                rackinheater[2] = 1;

                            if (LoadingPoint == 1)
                            {
                                if (R1_protostart == false)
                                {
                                    R1_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R1_cnt.ToString() + " Placed In H1", 0f, m_Runid);
                                }
                                else if (R4_protostart == false)
                                {
                                    R4_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R4_cnt.ToString() + " Placed In H1", 0f, m_Runid);
                                }
                                else if (R7_protostart == false)
                                {
                                    R7_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R7_cnt.ToString() + " Placed In H1", 0f, m_Runid);
                                }
                                else if (R10_protostart == false)
                                {
                                    R10_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R10_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R10_cnt.ToString() + " Placed In H1", 0f, m_Runid);
                                }
                            }
                            else if (LoadingPoint == 2)
                            {
                                if (R2_protostart == false)
                                {
                                    R2_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R2_cnt.ToString() + " Placed In H2", 0f, m_Runid);
                                }
                                else if (R5_protostart == false)
                                {
                                    R5_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R5_cnt.ToString() + " Placed In H2", 0f, m_Runid);
                                }
                                else if (R8_protostart == false)
                                {
                                    R8_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R8_cnt.ToString() + " Placed In H2", 0f, m_Runid);
                                }
                                else if (R11_protostart == false)
                                {
                                    R11_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R11_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R11_cnt.ToString() + " Placed In H2", 0f, m_Runid);
                                }
                            }
                            else if (LoadingPoint == 3)
                            {
                                if (R3_protostart == false)
                                {
                                    R3_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R3_cnt.ToString() + " Placed In H3", 0f, m_Runid);
                                }
                                else if (R6_protostart == false)
                                {
                                    R6_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R6_cnt.ToString() + " Placed In H3", 0f, m_Runid);
                                }
                                else if (R9_protostart == false)
                                {
                                    R9_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R9_cnt.ToString() + " Placed In H3", 0f, m_Runid);
                                }
                                else if (R12_protostart == false)
                                {
                                    R12_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R12_cnt.ToString() + " Placed In H3", 0f, m_Runid);
                                }
                            }

                            if (inxSlno >= UlJars.Length)
                            {
                                topickupflg = false;
                                toplaceflg = false;
                                pickedflg = false;
                                placedflg = false;
                                Communication.writeCommunicationCommands("Racks Loaded to Heater");

                                MessageBox.Show("Rack Loaded to Heater Jar from Loading Jar ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                inxSlno = 0;
                                //Implement or Add code to start Heater command or call heater starte command
                                return;
                            }
                            else
                            {
                                toplaceflg = false;
                                pickedflg = false;
                                placedflg = false;
                                topickupflg = true;
                                pickplace = 1;
                                rackloadingtoJar = true; //Added on 19082024 1055 as getting conflicts as loading jar to heater jar or normal jar
                            }
                        }
                    }
                }

                DataRow[] resut = JPos.Select("JarNo = '" + UlJars[inxSlno] + "'");
                if (resut.Length > 0)
                {
                    //x1Pos, y1Pos, z1Pos, z2Pos
                    JarName = resut[0]["JarNo"].ToString();
                    x1Pos = resut[0]["X-Axis"].ToString();
                    y1Pos = resut[0]["Y-Axis"].ToString();
                    z1Pos = resut[0]["Z1-Axis"].ToString();
                    z2Pos = resut[0]["Z2-Axis"].ToString();
                    //Assigned_RANo = resut[0]["RA_No"].ToString();
                    Assigned_RANo = "1";
                    sndcmdstr = "";
                    //sndcmdstr = x1Pos + "," + y1Pos + "," + z1Pos + "," + z2Pos + "," + pickplace.ToString();
                    sndcmdstr = x1Pos + "," + y1Pos + ",0";
                }

                if (pickplace == 2)
                {

                    switch (JarName)
                    {
                        case "L1":
                            {
                                L1.Text = JarName;
                                L1.JarRack = true;
                                break;
                            }
                        case "L2":
                            {
                                L2.Text = JarName;
                                L2.JarRack = true;
                                break;
                            }
                        case "L3":
                            {
                                L3.Text = JarName;
                                L3.JarRack = true;
                                break;
                            }
                        case "H1":
                            {
                                H1.Text = JarName;
                                H1.JarRack = true;
                                H1.BackgroundColor = Color.FromArgb(255, 0, 0);
                                H1.BackColor = Color.FromArgb(255, 0, 0);
                                break;
                            }
                        case "H2":
                            {
                                H2.Text = JarName;
                                H2.JarRack = true;
                                H2.BackgroundColor = Color.FromArgb(255, 0, 0);
                                H2.BackColor = Color.FromArgb(255, 0, 0);
                                break;
                            }
                        case "H3":
                            {
                                H3.Text = JarName;
                                H3.JarRack = true;
                                H3.BackgroundColor = Color.FromArgb(255, 0, 0);
                                H3.BackColor = Color.FromArgb(255, 0, 0);
                                break;
                            }
                    }
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    switch (JarName)
                    {
                        case "L1":
                            {
                                L1.OnlyJar = true;
                                break;
                            }
                        case "L2":
                            {
                                L2.OnlyJar = true;
                                break;
                            }
                        case "L3":
                            {
                                L3.OnlyJar = true;
                                break;
                            }
                        case "H1":
                            {
                                H1.OnlyJar = true;
                                break;
                            }
                        case "H2":
                            {
                                H2.OnlyJar = true;
                                break;
                            }
                        case "H3":
                            {
                                H3.OnlyJar = true;
                                break;
                            }
                    }
                }

                if (sndcmdstr == "")
                    return;

                rareached = false;
                repeatval = 0;
                if (pickplace == 0)
                    functioncode = 1;
                else if (pickplace == 1)
                    functioncode = 2;
                else if (pickplace == 2)
                    functioncode = 3;

                if ((JarName.Contains("J")) || (JarName.Contains("W")) || (JarName.Contains("U")) || (JarName.Contains("L")))      //For Normal Jars Moving Parameter                    
                {
                    sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                    //Communication.RA_No = 1;
                }
                else if (JarName.Contains("H"))  //For Heater Jars Moving parameter                    
                {
                    sndcmdstr = sndcmdstr + ",1"; //functioncode = 2;
                    //Communication.RA_No = 1;
                }
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                Communication.RA_No = Convert.ToInt32(Assigned_RANo);
                CommandName = JarName;
                if (functioncode == 2)
                    CommandName = CommandName + " - Picked";
                else if (functioncode == 3)
                    CommandName = CommandName + " - Placed";
                sensed = false;
                snd_rcvCmd(functioncode, sndcmdstr);
                tmr_Cut.Enabled = true;
                tmr_Cut.Interval = 500;
                cmdsnt++;
                inxSlno++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        private void LoadRackstoHeaterJars()
        {
            int pickplace = 0;
            protocolinitiateflg = false;
            try
            {
                string sndcmdstr = "";
                //string[] UlJars = { "L1", "H1", "L2", "H2", "L3", "H3" };
                //string[] UlJars = { "L1", "H1", "L2", "H2" };
                string[] UlJars = new string[6];
                int uninc = 0, cnt = 0;
                //if (Jarloaddetails == false)
                //{

                cnt = 0;
                for (int i = 0; i < rackinloading.Length; i++)
                {
                    if (rackinloading[i] == 1)
                    {
                        if (i == 0)
                        {
                            cnt++;
                        }
                        else if (i == 1)
                        {
                            cnt++;
                        }
                        else if (i == 2)
                        {
                            cnt++;
                        }
                        for (int j = uninc; j < rackinheater.Length; j++)
                        {
                            if (rackinheater[j] == 0)
                            {
                                cnt++;
                                uninc++;
                                break;
                            }
                        }
                    }
                }

                UlJars = new string[cnt];

                uninc = 0;
                cnt = 0;
                for (int i = 0; i < rackinloading.Length; i++)
                {
                    if (rackinloading[i] == 1)
                    {
                        if (i == 0)
                        {
                            UlJars[cnt] = "L1";
                            cnt++;
                        }
                        else if (i == 1)
                        {
                            UlJars[cnt] = "L2";
                            cnt++;
                        }
                        else if (i == 2)
                        {
                            UlJars[cnt] = "L3";
                            cnt++;
                        }
                        for (int j = uninc; j < rackinheater.Length; j++)
                        {
                            if (rackinheater[j] == 0)
                            {
                                if (j == 0)
                                {
                                    UlJars[cnt] = "H1";
                                }
                                else if (j == 1)
                                {
                                    UlJars[cnt] = "H2";
                                }
                                else if (j == 2)
                                {
                                    UlJars[cnt] = "H3";
                                }
                                cnt++;
                                uninc++;
                                break;
                            }
                        }
                    }
                }
                //}
                incubtime = 0;
                if (inxSlno == 0)
                {
                    Jarloaddetails = true;
                    //inxSlno = fromSlno;
                    topickupflg = true;
                    pickplace = 1;
                    toplaceflg = false;
                    pickedflg = false;
                    placedflg = false;
                    rackloadingtoJar = true; //Added on 19082024 1055 as getting conflicts as loading jar to heater jar or normal jar
                }
                else if (inxSlno >= UlJars.Length)
                {
                    if (JarName == "H1")
                        rackinheater[0] = 1;
                    else if (JarName == "H2")
                        rackinheater[1] = 1;
                    else if (JarName == "H3")
                        rackinheater[2] = 1;
                    topickupflg = false;
                    toplaceflg = false;
                    pickedflg = false;
                    placedflg = false;
                    Communication.writeCommunicationCommands("Racks Loaded to Heater");

                    if (continuetestflg == false)
                    {
                        if (inxSlno == 1)
                        {
                            if (R1_protostart == false)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R1_cnt.ToString() + " - Placed In H1", 0f, m_Runid);
                            else if (R1_protostart == true)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R7_cnt.ToString() + " - Placed In H1", 0f, m_Runid);
                        }
                        else if (inxSlno == 3)
                        {
                            if (R2_protostart == false)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R2_cnt.ToString() + " - Placed In H2", 0f, m_Runid);
                            else if (R2_protostart == true)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R8_cnt.ToString() + " - Placed In H2", 0f, m_Runid);
                        }
                        else if (inxSlno == 5)
                        {
                            if (R3_protostart == false)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R3_cnt.ToString() + " - Placed In H3", 0f, m_Runid);
                            else if (R3_protostart == true)
                                updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R9_cnt.ToString() + " - Placed In H3", 0f, m_Runid);
                        }
                    }
                    else
                    {
                        if (inxSlno == 1)
                            updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R4_cnt.ToString() + " - Placed In H1", 0f, m_Runid);
                        else if (inxSlno == 3)
                            updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R5_cnt.ToString() + " - Placed In H2", 0f, m_Runid);
                        else if (inxSlno == 5)
                            updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "-", JarName, R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R6_cnt.ToString() + " - Placed In H3", 0f, m_Runid);
                    }

                    ////Below code commented on 20-11-2023
                    //////if (Process_Continued == false)  //Added on 14-08-2023
                    //////    MessageBox.Show("All Racks Loaded to Heater Jars from Loading Jars ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    ////Above code commented on 20-11-2023

                    ////////////if (inxSlno == 2)
                    ////////////{
                    ////////////    if (R1_protostart == false)
                    ////////////    {
                    ////////////        R1_heating = true;
                    ////////////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R1_cnt.ToString() + " Placed In H1", 0f, m_Runid);
                    ////////////    }
                    ////////////    else if (R4_protostart == false)
                    ////////////    {
                    ////////////        R4_heating = true;
                    ////////////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R4_cnt.ToString() + " Placed In H1", 0f, m_Runid);
                    ////////////    }
                    ////////////    else if (R7_protostart == false)
                    ////////////    {
                    ////////////        R7_heating = true;
                    ////////////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R7_cnt.ToString() + " Placed In H1", 0f, m_Runid);
                    ////////////    }
                    ////////////}
                    ////////////else if (inxSlno == 4)
                    ////////////{
                    ////////////    if (R2_protostart == false)
                    ////////////    {
                    ////////////        R2_heating = true;
                    ////////////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R2_cnt.ToString() + " Placed In H2", 0f, m_Runid);
                    ////////////    }
                    ////////////    else if (R5_protostart == false)
                    ////////////    {
                    ////////////        R5_heating = true;
                    ////////////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R5_cnt.ToString() + " Placed In H2", 0f, m_Runid);
                    ////////////    }
                    ////////////    else if (R8_protostart == false)
                    ////////////    {
                    ////////////        R8_heating = true;
                    ////////////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R8_cnt.ToString() + " Placed In H2", 0f, m_Runid);
                    ////////////    }
                    ////////////}
                    ////////////else if (inxSlno == 6)
                    ////////////{
                    ////////////    if (R3_protostart == false)
                    ////////////    {
                    ////////////        R3_heating = true;
                    ////////////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R3_cnt.ToString() + " Placed In H3", 0f, m_Runid);
                    ////////////    }
                    ////////////    else if (R6_protostart == false)
                    ////////////    {
                    ////////////        R6_heating = true;
                    ////////////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R6_cnt.ToString() + " Placed In H3", 0f, m_Runid);
                    ////////////    }
                    ////////////    else if (R9_protostart == false)
                    ////////////    {
                    ////////////        R9_heating = true;
                    ////////////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R9_cnt.ToString() + " Placed In H3", 0f, m_Runid);
                    ////////////    }
                    ////////////}



                    inxSlno = 0;
                    loading_racks = false;
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    protocolinitiateflg = false;
                    protocolcmdintiated = false;
                    sensed = false;
                    //Below code modified on 27-11-2023 1546
                    ////htrdoorintiate = true;
                    ////movetohome();
                    //Above code modified on 27-11-2023 1546

                    //Below code added on 17-08-2023 to test the rack  Previously this code in commented and revoked on 27112023 1549
                    if (Process_Continued == false)
                        disable_allflags();
                    ulcnt = 0;
                    htrdoorintiate = false;
                    proto_htrclose_intiate = false;
                    close_htrdoor();
                    //Implement or Add code to start Heater command or call heater starte command
                    return;
                }
                else if (inxSlno < UlJars.Length)
                {
                    if ((pickedflg == true) || (placedflg == true))
                    {
                        if (pickedflg == true)
                        {
                            pickedflg = false;
                            toplaceflg = true;
                            topickupflg = false;
                            placedflg = false;
                            pickplace = 2;
                            //Updating to database

                            //New code updated on 21-08-2024 to avoid clash with rack7,rack 8 & rack 9

                            //////if(inxSlno == 1)
                            //////{
                            //////    if (R1_protostart == false)
                            //////    {
                            //////        R1_cnt = RackIncremantVal;
                            //////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R1_cnt.ToString() + " Picked From L1", 0f, m_Runid);
                            //////    }
                            //////    else if (R4_protostart == false)
                            //////    {
                            //////        R4_cnt = RackIncremantVal;
                            //////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R4_cnt.ToString() + " Picked From L1", 0f, m_Runid);
                            //////    }
                            //////    else if (R7_protostart == false)
                            //////    {
                            //////        R7_cnt = RackIncremantVal;
                            //////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R7_cnt.ToString() + " Picked From L1", 0f, m_Runid);
                            //////    }
                            //////    RackIncremantVal++;
                            //////}
                            //////else if(inxSlno == 3)
                            //////{
                            //////    if (R2_protostart == false)
                            //////    {
                            //////        R2_cnt = RackIncremantVal;
                            //////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R2_cnt.ToString() + " Picked From L2", 0f, m_Runid);
                            //////    }
                            //////    else if (R5_protostart == false)
                            //////    {
                            //////        R5_cnt = RackIncremantVal;
                            //////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R5_cnt.ToString() + " Picked From L2", 0f, m_Runid);
                            //////    }
                            //////    else if (R8_protostart == false)
                            //////    {
                            //////        R8_cnt = RackIncremantVal;
                            //////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R8_cnt.ToString() + " Picked From L2", 0f, m_Runid);
                            //////    }
                            //////    RackIncremantVal++;
                            //////}
                            //////else if (inxSlno == 5)
                            //////{
                            //////    if (R3_protostart == false)
                            //////    {
                            //////        R3_cnt = RackIncremantVal;
                            //////        R3_heating = true;
                            //////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R3_cnt.ToString() + " Picked From L3", 0f, m_Runid);
                            //////    }
                            //////    else if (R6_protostart == false)
                            //////    {
                            //////        R6_cnt = RackIncremantVal;
                            //////        R6_heating = true;
                            //////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R6_cnt.ToString() + " Picked From L3", 0f, m_Runid);
                            //////    }
                            //////    else if (R9_protostart == false)
                            //////    {
                            //////        R9_cnt = RackIncremantVal;
                            //////        R9_heating = true;
                            //////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R9_cnt.ToString() + " Picked From L3", 0f, m_Runid);
                            //////    }
                            //////    RackIncremantVal++;
                            //////}
                            /** Below code is commented on 21-08-2024 as getting clash with 7th rack**/
                            if (continuetestflg == false)
                            {
                                if (inxSlno == 1)    //0
                                {
                                    h1_cnt = RackIncremantVal;
                                    if (R1_protostart == false)
                                    {
                                        //R1_cnt = RackIncremantVal;
                                        R1_cnt = h1_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R1_cnt.ToString() + " Picked From L1", 0f, m_Runid);
                                    }
                                    else if (R1_protostart == true)
                                    {
                                        //R7_cnt = RackIncremantVal;
                                        R7_cnt = h1_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R7_cnt.ToString() + " Picked From L1", 0f, m_Runid);
                                    }

                                }
                                else if (inxSlno == 3)  //2
                                {
                                    h2_cnt = RackIncremantVal;
                                    if (R2_protostart == false)
                                    {
                                        //R2_cnt = RackIncremantVal;
                                        R2_cnt = h2_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R2_cnt.ToString() + " Picked From L2", 0f, m_Runid);
                                    }
                                    else if (R2_protostart == true)
                                    {
                                        //R8_cnt = RackIncremantVal;
                                        R8_cnt = h2_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R8_cnt.ToString() + " Picked From L2", 0f, m_Runid);
                                    }
                                }
                                else if (inxSlno == 5)   //4
                                {
                                    h3_cnt = RackIncremantVal;
                                    if (R3_protostart == false)
                                    {
                                        //R3_cnt = RackIncremantVal;
                                        R3_cnt = h3_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R3_cnt.ToString() + " Picked From L3", 0f, m_Runid);
                                    }
                                    else if (R3_protostart == true)
                                    {
                                        //R9_cnt = RackIncremantVal;
                                        R9_cnt = h3_cnt;
                                        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R3_cnt.ToString() + " Picked From L3", 0f, m_Runid);
                                    }
                                }
                                RackIncremantVal++;
                            }
                            else
                            {
                                if (inxSlno == 1)  //0
                                {
                                    h1_cnt = RackIncremantVal;
                                    //R4_cnt = RackIncremantVal;
                                    //R4_cnt = h1_cnt;
                                    //R5_cnt = h2_cnt;
                                    if (R4_protostart == false)
                                        R4_cnt = h1_cnt;
                                    else
                                        R10_cnt = h1_cnt;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R4_cnt.ToString() + " Picked From L1", 0f, m_Runid);
                                }
                                else if (inxSlno == 3)   //2
                                {
                                    h2_cnt = RackIncremantVal;
                                    //R5_cnt = RackIncremantVal;
                                    //R5_cnt = h2_cnt;
                                    if (R5_protostart == false)
                                        R5_cnt = h2_cnt;
                                    else
                                        R11_cnt = h2_cnt;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R5_cnt.ToString() + " Picked From L2", 0f, m_Runid);
                                }
                                else if (inxSlno == 5)  //4
                                {
                                    h3_cnt = RackIncremantVal;
                                    //R6_cnt = RackIncremantVal;
                                    //R6_cnt = h3_cnt;
                                    if (R6_protostart == false)
                                        R6_cnt = h3_cnt;
                                    else
                                        R12_cnt = h3_cnt;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R6_cnt.ToString() + " Picked From L3", 0f, m_Runid);
                                }
                                RackIncremantVal++;
                            }
                            /** Above code is commented on 21-08-2024 as getting clash with 7th rack**/
                        }
                        else if (placedflg == true)
                        {
                            rackloadingtoJar = false; //Added on 19082024 1055 as getting conflicts as loading jar to heater jar or normal jar
                            if (JarName == "H1")
                                rackinheater[0] = 1;
                            else if (JarName == "H2")
                                rackinheater[1] = 1;
                            else if (JarName == "H3")
                                rackinheater[2] = 1;

                            if (inxSlno == 2)
                            {
                                if (R1_protostart == false)
                                {
                                    R1_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R1_cnt.ToString() + " Placed In H1", 0f, m_Runid);
                                }
                                else if (R4_protostart == false)
                                {
                                    R4_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R4_cnt.ToString() + " Placed In H1", 0f, m_Runid);
                                }
                                else if (R7_protostart == false)
                                {
                                    R7_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R7_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R7_cnt.ToString() + " Placed In H1", 0f, m_Runid);
                                }
                                else if (R10_protostart == false)
                                {
                                    R10_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R10_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R10_cnt.ToString() + " Placed In H1", 0f, m_Runid);
                                }
                            }
                            else if (inxSlno == 4)
                            {
                                if (R2_protostart == false)
                                {
                                    R2_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R2_cnt.ToString() + " Placed In H2", 0f, m_Runid);
                                }
                                else if (R5_protostart == false)
                                {
                                    R5_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R5_cnt.ToString() + " Placed In H2", 0f, m_Runid);
                                }
                                else if (R8_protostart == false)
                                {
                                    R8_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R8_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R8_cnt.ToString() + " Placed In H2", 0f, m_Runid);
                                }
                                else if (R11_protostart == false)
                                {
                                    R11_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R11_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R11_cnt.ToString() + " Placed In H2", 0f, m_Runid);
                                }
                            }
                            else if (inxSlno == 6)
                            {
                                if (R3_protostart == false)
                                {
                                    R3_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R3_cnt.ToString() + " Placed In H3", 0f, m_Runid);
                                }
                                else if (R6_protostart == false)
                                {
                                    R6_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R6_cnt.ToString() + " Placed In H3", 0f, m_Runid);
                                }
                                else if (R9_protostart == false)
                                {
                                    R9_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R9_cnt.ToString() + " Placed In H3", 0f, m_Runid);
                                }
                                else if (R12_protostart == false)
                                {
                                    R12_heating = true;
                                    updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R9_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R12_cnt.ToString() + " Placed In H3", 0f, m_Runid);
                                }
                            }
                            /** Below code is commented on 21-08-2024 as getting clash with 7th rack**/
                            ////if (continuetestflg == false)
                            ////{
                            ////    if (inxSlno == 1)
                            ////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R1_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R1_cnt.ToString() + " - Placed From H1",0f, m_Runid);
                            ////    else if (inxSlno == 3)
                            ////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R2_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R2_cnt.ToString() + " - Placed From H2",0f, m_Runid);
                            ////    else if (inxSlno == 5)
                            ////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R3_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R3_cnt.ToString() + " - Placed From H3",0f, m_Runid);
                            ////}
                            ////else
                            ////{
                            ////    if (inxSlno == 1)
                            ////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R4_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R4_cnt.ToString() + " - Placed From H1",0f, m_Runid);
                            ////    else if (inxSlno == 3)
                            ////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R5_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R5_cnt.ToString() + " - Placed From H2",0f, m_Runid);
                            ////    else if (inxSlno == 5)
                            ////        updateprotorun(protoshortname, RequiredVariables.UserName, DateTime.Now.ToShortDateString(), "Heating", JarName, R6_cnt.ToString(), DateTime.Now.ToString() + "." + System.DateTime.Now.Millisecond.ToString().PadLeft(3, '0'), monVal, R6_cnt.ToString() + " - Placed From H3",0f, m_Runid);
                            ////}

                            if (inxSlno >= UlJars.Length)
                            {
                                topickupflg = false;
                                toplaceflg = false;
                                pickedflg = false;
                                placedflg = false;
                                Communication.writeCommunicationCommands("Racks Loaded to Heater");

                                MessageBox.Show("All Racks Loaded to Heater Jars from Loading Jars ", "H&E Communication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                inxSlno = 0;
                                //Implement or Add code to start Heater command or call heater starte command
                                return;
                            }
                            else
                            {
                                toplaceflg = false;
                                pickedflg = false;
                                placedflg = false;
                                topickupflg = true;
                                pickplace = 1;
                                rackloadingtoJar = true; //Added on 19082024 1055 as getting conflicts as loading jar to heater jar or normal jar
                            }
                        }
                    }
                }

                DataRow[] resut = JPos.Select("JarNo = '" + UlJars[inxSlno] + "'");
                if (resut.Length > 0)
                {
                    //x1Pos, y1Pos, z1Pos, z2Pos
                    JarName = resut[0]["JarNo"].ToString();
                    x1Pos = resut[0]["X-Axis"].ToString();
                    y1Pos = resut[0]["Y-Axis"].ToString();
                    z1Pos = resut[0]["Z1-Axis"].ToString();
                    z2Pos = resut[0]["Z2-Axis"].ToString();
                    //Assigned_RANo = resut[0]["RA_No"].ToString();
                    Assigned_RANo = "1";
                    sndcmdstr = "";
                    //sndcmdstr = x1Pos + "," + y1Pos + "," + z1Pos + "," + z2Pos + "," + pickplace.ToString();
                    sndcmdstr = x1Pos + "," + y1Pos + ",0";
                }

                if (pickplace == 2)
                {

                    switch (JarName)
                    {
                        case "L1":
                            {
                                L1.Text = JarName;
                                L1.JarRack = true;
                                break;
                            }
                        case "L2":
                            {
                                L2.Text = JarName;
                                L2.JarRack = true;
                                break;
                            }
                        case "L3":
                            {
                                L3.Text = JarName;
                                L3.JarRack = true;
                                break;
                            }
                        case "H1":
                            {
                                H1.Text = JarName;
                                H1.JarRack = true;
                                H1.BackgroundColor = Color.FromArgb(255, 0, 0);
                                H1.BackColor = Color.FromArgb(255, 0, 0);
                                break;
                            }
                        case "H2":
                            {
                                H2.Text = JarName;
                                H2.JarRack = true;
                                H2.BackgroundColor = Color.FromArgb(255, 0, 0);
                                H2.BackColor = Color.FromArgb(255, 0, 0);
                                break;
                            }
                        case "H3":
                            {
                                H3.Text = JarName;
                                H3.JarRack = true;
                                H3.BackgroundColor = Color.FromArgb(255, 0, 0);
                                H3.BackColor = Color.FromArgb(255, 0, 0);
                                break;
                            }
                    }
                }
                else if ((pickplace == 1) || (pickplace == 0))
                {
                    switch (JarName)
                    {
                        case "L1":
                            {
                                L1.OnlyJar = true;
                                break;
                            }
                        case "L2":
                            {
                                L2.OnlyJar = true;
                                break;
                            }
                        case "L3":
                            {
                                L3.OnlyJar = true;
                                break;
                            }
                        case "H1":
                            {
                                H1.OnlyJar = true;
                                break;
                            }
                        case "H2":
                            {
                                H2.OnlyJar = true;
                                break;
                            }
                        case "H3":
                            {
                                H3.OnlyJar = true;
                                break;
                            }
                    }
                }

                if (sndcmdstr == "")
                    return;

                rareached = false;
                repeatval = 0;
                if (pickplace == 0)
                    functioncode = 1;
                else if (pickplace == 1)
                    functioncode = 2;
                else if (pickplace == 2)
                    functioncode = 3;

                if ((JarName.Contains("J")) || (JarName.Contains("W")) || (JarName.Contains("U")) || (JarName.Contains("L")))      //For Normal Jars Moving Parameter                    
                {
                    sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;
                    //Communication.RA_No = 1;
                }
                else if (JarName.Contains("H"))  //For Heater Jars Moving parameter                    
                {
                    sndcmdstr = sndcmdstr + ",1"; //functioncode = 2;
                    //Communication.RA_No = 1;
                }
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                Communication.RA_No = Convert.ToInt32(Assigned_RANo);
                CommandName = JarName;
                if (functioncode == 2)
                    CommandName = CommandName + " - Picked";
                else if (functioncode == 3)
                    CommandName = CommandName + " - Placed";
                sensed = false;
                snd_rcvCmd(functioncode, sndcmdstr);
                tmr_Cut.Enabled = true;
                tmr_Cut.Interval = 500;
                cmdsnt++;
                inxSlno++;
            }
            catch (Exception d3)
            {
                MessageBox.Show(d3.ToString());
            }
        }
        private void startheaters()  //Switch On Heaters
        {
            CommandName = "HEATER ON";
            htr_on = true;
            htr_on_intiate = true;
            htr_off = false;
            Communication.RA_No = 0;
            snd_rcvCmd(Communication.HTR_CTRL, "1");
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        private void stopheaters()  //Switch On Heaters
        {
            CommandName = "HEATER OFF";
            htr_on = false;
            htr_on_intiate = false;
            htr_off = false;
            htr_off_intiate = true;
            Communication.RA_No = 0;
            tmr_temp.Enabled = false;
            snd_rcvCmd(Communication.HTR_CTRL, "0");
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;

            //tmr_temp.Interval = 5000;
            //tmr_temp.Enabled = true;
        }
        private void readtemperature()
        {
            //Below code updated ob 27112023 1233 to stop reading temperature reading from device in order to avoid clash
            //if ((r2priority == 1) || (r2priority == 1) || (r3priority == 1) || (r4priority == 1) || (r5priority == 1) || (r6priority == 1))               
            //{
            //    tmr_temp.Enabled = false;
            //    tmr_temp_incub.Enabled = false;
            //    tmr_tempstart.Enabled = true;
            //    temp_restartincub = System.DateTime.Now;
            //    temp_restartincub = temp_restartincub.AddSeconds(10);
            //    System.Threading.Thread.Sleep(1000);
            //    return;
            //}


            ////////if ((Temp_Attained == false) && (incubtime_Temp_start == false) && (Process_Continued==false))
            ////////{
            ////////    disable_allflags();
            ////////}
            CommandName = "READ TEMPERATURE";
            Communication.RA_No = 0;
            Readtmpintiated = true;
            TempRead = false;
            if (!mport.IsOpen)
                init_port();
            snd_rcvCmd(Communication.GET_TEMP, "");
            tmr_Cut.Enabled = false;
            tmr_temp.Enabled = true;
            tmr_temp.Interval = 5000;

            /*Below code commented on 07-01-2025 to chec the temperature reading*/
            ////if (((Temp_Attained == false) || (Temp_Attained == true)) && (incubtime_Temp_start == false))
            ////{
            ////    tmr_temp.Enabled = true;
            ////    tmr_temp.Interval = 5000;
            ////}
            ////else if ((Temp_Attained == true) && (incubtime_Temp_start == true))
            ////{
            ////    tmr_temp_incub.Enabled = true;
            ////    tmr_temp_incub.Interval = 5000;
            ////}
            /*Above code commented on 07-01-2025 to chec the temperature reading*/

        }
        private void settemperature()
        {
            int tempval = 0;
            tempval = settemp + 2;
            CommandName = "SET TEMPERATURE";
            Communication.RA_No = 0;
            Settmpintiated = true;
            TempSet = false;
            snd_rcvCmd(Communication.SET_TEMP, tempval.ToString());  // Setting Temperature
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 1000;
        }
        private void open_htrdoor_toload_Nxtrack()
        {
            htr_door_open = false;
            htr_door_close = false;
            htr_door_opencmd_intiate = false;
            htr_door_opencmd_continue_intiate = false;
            htr_door_opencmd_toload_Nxtrack = true;
            CommandName = "HEATER DOOR OPEN";
            Communication.RA_No = 0;
            snd_rcvCmd(Communication.DOOR_CTRL, "1,1");
            tmr_opencmd_toload_Nxtrack.Enabled = true;
            tmr_opencmd_toload_Nxtrack.Interval = 500;

        }
        private void open_htrdoor_continuemode()
        {
            htr_door_open = false;
            htr_door_close = false;
            htr_door_opencmd_continue_intiate = true;
            htr_door_opencmd_toload_Nxtrack = false;
            CommandName = "HEATER DOOR OPEN";
            Communication.RA_No = 0;
            snd_rcvCmd(Communication.DOOR_CTRL, "1,1");
            //snd_rcvCmd(Communication.RA_HOME, "01000000");
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        private void open_htrdoor()
        {
            htr_door_open = false;
            htr_door_close = false;
            htr_door_opencmd_intiate = true;
            htr_door_opencmd_toload_Nxtrack = false;
            CommandName = "HEATER DOOR OPEN";
            Communication.RA_No = 0;
            snd_rcvCmd(Communication.DOOR_CTRL, "1,1");
            //snd_rcvCmd(Communication.RA_HOME, "01000000");            
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        private void close_htrdoor()
        {
            htr_door_open = false;
            htr_door_close = false;
            htr_door_closecmd_intiate = true;
            CommandName = "HEATER DOOR CLOSE";
            Communication.RA_No = 0;
            snd_rcvCmd(Communication.DOOR_CTRL, "1,0");
            if (proto_htrclose_intiate == false)
            {
                tmr_Cut.Enabled = true;
                tmr_Cut.Start();
                tmr_Cut.Interval = 500;
            }
            else if (proto_htrclose_intiate == true)
            {
                if ((protocolinitiateflg_R1 == true) && (protocolStartedflg_R1 == false) && (R1_pickcmdissue==true))
                {
                    protocolStartedflg_R1 = true;
                    tmr_r1.Enabled = true;
                    tmr_r1.Interval = 500;
                }
                else if ((protocolinitiateflg_R2 == true) && (protocolStartedflg_R2 == false) && (R2_pickcmdissue == true))
                {
                    protocolStartedflg_R2 = true;
                    tmr_r2.Enabled = true;
                    tmr_r2.Interval = 500;
                }
                else if ((protocolinitiateflg_R3 == true) && (protocolStartedflg_R3 == false) && (R3_pickcmdissue == true))
                {
                    protocolStartedflg_R3 = true;
                    tmr_r3.Enabled = true;
                    tmr_r3.Interval = 500;
                }
                else if ((protocolinitiateflg_R4 == true) && (protocolStartedflg_R4 == false) && (R4_pickcmdissue == true))
                {
                    protocolStartedflg_R4 = true;
                    tmr_r4.Enabled = true;
                    tmr_r4.Interval = 500;
                }
                else if ((protocolinitiateflg_R5 == true) && (protocolStartedflg_R5 == false) && (R5_pickcmdissue == true))
                {
                    protocolStartedflg_R5 = true;
                    tmr_r5.Enabled = true;
                    tmr_r5.Interval = 500;
                }
                else if ((protocolinitiateflg_R6 == true) && (protocolStartedflg_R6 == false) && (R6_pickcmdissue == true))
                {
                    protocolStartedflg_R6 = true;
                    tmr_r6.Enabled = true;
                    tmr_r6.Interval = 500;
                }
                else if ((protocolinitiateflg_R7 == true) && (protocolStartedflg_R7 == false) && (R7_pickcmdissue == true))
                {
                    protocolStartedflg_R7 = true;
                    tmr_r7.Enabled = true;
                    tmr_r7.Interval = 500;
                }
                else if ((protocolinitiateflg_R8 == true) && (protocolStartedflg_R8 == false) && (R8_pickcmdissue == true))
                {
                    protocolStartedflg_R8 = true;
                    tmr_r8.Enabled = true;
                    tmr_r8.Interval = 500;
                }
                else if ((protocolinitiateflg_R9 == true) && (protocolStartedflg_R9 == false) && (R9_pickcmdissue == true))
                {
                    protocolStartedflg_R9 = true;
                    tmr_r9.Enabled = true;
                    tmr_r9.Interval = 500;
                }
            }
        }
        private void ra_holding_racks()
        {
            CommandName = "RACK HOLDING STATUS";
            Communication.RA_No = 0; //0
            ra_holdtstaus = false;
            ra_holdcmdsent = true;
            snd_rcvCmd(Communication.RACK_HOLD, "");
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        private void check_doors_status()
        {
            CommandName = "DOOR STATUS";
            Communication.RA_No = 0;
            door_status_intiate = true;
            door_status_close = false;
            door_status_open = false;
            snd_rcvCmd(Communication.DOOR_STATUS, "");
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        #region Only Homes Commands Issuing
        private void gethome_status()  //Getting Home Status of machine
        {
            CommandName = "HOME STATUS";
            gethomeissued_flg = true;
            gethomestatus_flg = false;
            repeatval = 0;
            if (repeatval == 0)
            {
                Communication.framed_cmd = "";
            }
            Communication.RA_No = 0;
            functioncode = Communication.HOME_STATUS;
            snd_rcvCmd(Communication.HOME_STATUS, "");
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        private void move_to_home(int hometype)
        {
            try
            {
                string home_Cmd = "";
                repeatval = 0;
                Homecmdissued = false;
                rareached = false;
                if (repeatval == 0)
                {
                    Communication.framed_cmd = "";
                }
                Communication.RA_No = 0;
                CommandName = "Home Command";
                functioncode = Communication.RA_HOME;
                if (hometype == 0)  //All axis to home
                    home_Cmd = "01111111";
                else if (hometype == 1)  //RA1 axis to home
                {
                    RA1_Homecmdissued = true;
                    home_Cmd = "00000111";
                }
                else if (hometype == 2)  //RA2 axis to home
                {
                    RA2_Homecmdissued = true;
                    home_Cmd = "00111000";
                }
                else if (hometype == 3)  //Both Z axis
                {
                    Both_Z_Homecmdissued = true;
                    home_Cmd = "00100100";
                }
                else if (hometype == 4)  //Both Y axis
                {
                    Both_Y_Homecmdissued = true;
                    home_Cmd = "00010010";
                }
                else if (hometype == 5)  //Both X axis
                {
                    Both_X_Homecmdissued = true;
                    home_Cmd = "00001001";  //00110110
                }
                else if (hometype == 6)  //Both YZ axis
                {
                    Both_YZ_Homecmdissued = true;
                    home_Cmd = "00110110";  //00110110
                }
                snd_rcvCmd(Communication.RA_HOME, home_Cmd);
                tmr_Cut.Enabled = true;
                tmr_Cut.Interval = 500;

            }
            catch (Exception d3)
            {

            }
        }
        private void movetohome()
        {
            repeatval = 0;
            Homecmdissued = false;
            rareached = false;
            if (repeatval == 0)
            {
                Communication.framed_cmd = "";
            }
            Communication.RA_No = 0;
            CommandName = "Home Command";
            functioncode = Communication.RA_HOME;
            //snd_rcvCmd(Communication.RA_HOME, "11111111");
            snd_rcvCmd(Communication.RA_HOME, "01111111");  //Modified on 08102024 1137 as getting issue with agitation response
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        private void moveRA1tohome()
        {
            repeatval = 0;
            Homecmdissued = false;
            RA1_Homecmdissued = true;
            rareached = false;
            if (repeatval == 0)
            {
                Communication.framed_cmd = "";
            }
            Communication.RA_No = 0;
            CommandName = "RA1 Home Command";
            functioncode = Communication.RA_HOME;
            snd_rcvCmd(Communication.RA_HOME, "00000111");
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        private void moveRA2tohome()
        {
            repeatval = 0;
            Homecmdissued = false;
            RA2_Homecmdissued = true;
            rareached = false;
            if (repeatval == 0)
            {
                Communication.framed_cmd = "";
            }
            Communication.RA_No = 0;
            CommandName = "RA2 Home Command";
            functioncode = Communication.RA_HOME;
            snd_rcvCmd(Communication.RA_HOME, "00111000");
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        private void BothZaxistohome()
        {
            repeatval = 0;
            Homecmdissued = false;
            Both_Z_Homecmdissued = true;
            rareached = false;
            if (repeatval == 0)
            {
                Communication.framed_cmd = "";
            }
            Communication.RA_No = 0;
            CommandName = "Both Z Axis Home Command";
            functioncode = Communication.RA_HOME;
            snd_rcvCmd(Communication.RA_HOME, "00100100");  //00100100
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        private void BothYaxistohome()
        {
            repeatval = 0;
            Homecmdissued = false;
            Both_Y_Homecmdissued = true;
            rareached = false;
            if (repeatval == 0)
            {
                Communication.framed_cmd = "";
            }
            Communication.RA_No = 0;
            CommandName = "Bot Y Axis Home Command";
            functioncode = Communication.RA_HOME;
            snd_rcvCmd(Communication.RA_HOME, "00010010");
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        private void BothXaxistohome()
        {
            repeatval = 0;
            Homecmdissued = false;
            Both_X_Homecmdissued = true;
            rareached = false;
            if (repeatval == 0)
            {
                Communication.framed_cmd = "";
            }
            Communication.RA_No = 0;
            CommandName = "Bot Y Axis Home Command";
            functioncode = Communication.RA_HOME;
            snd_rcvCmd(Communication.RA_HOME, "00001001");
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        private void BothYZaxistohome()
        {
            repeatval = 0;
            Homecmdissued = false;
            Both_YZ_Homecmdissued = true;
            rareached = false;
            if (repeatval == 0)
            {
                Communication.framed_cmd = "";
            }
            Communication.RA_No = 0;
            CommandName = "Both Y & Z Axis Home Command";
            functioncode = Communication.RA_HOME;
            snd_rcvCmd(Communication.RA_HOME, "00110110");
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
        }
        #endregion

        private void disable_allflags()
        {
            pickedflg = false; placedflg = false; topickupflg = false; toplaceflg = false; StartHesitateflg = false; StopHesitateflg = false;
            tosense = false; sensed = false; lowlevel = false; no_jar = false; abvnormallvl = false; normallvl = false; blwnormallvl = false; blw_adglvl = false; abovednglvl = false;
            protocolinitiateflg = false; protocolcmdintiated = false; Jarloaddetails = false;
            moveinitiateflg = false; lvlcmdintiated = false;

            r1stat = false; r2stat = false; r3stat = false; unloadjar_racksensed = false; heaterjar_racksensed = false; loadingjar_racksensed = false; normaljar_racksensed = false;
            unloadJars_lvlintiated = false; heaterjar_lvlintiated = false; loadingjar_lvlintiated = false; normaljar_lvlintiated = false; loading_racks = false; HtrRacks_ULJars = false;
            htrstartintiate = false; htrdoorintiate = false;

            port_avail = false; pGotByteFlag = false; rareached = false; polled = false; pCancelFlag = false; Homecmdissued = false; protorun = false;

            m_ProcessStoped = false; swpause = false; swresume = false; hwresume = false; hwpause = false; cmdprocesscmp = true;
            //valonflg = false; valoffflg = false;
            htr_door_open = false; htr_door_opencmd_intiate = false; htr_door_close = false; htr_door_closecmd_intiate = false; htr_on = false; htr_on_intiate = false; htr_off = false; htr_off_intiate = false; ra_holdtstaus = false; ra_holdcmdsent = false;
            Temp_Attained = false; Settmpintiated = false; TempSet = false; Readtmpintiated = false; TempRead = false;
            door_status_open = false; door_status_close = false; door_status_intiate = false;
            tstproto = false;
        }
        private void intiateunloadjars()
        {
            if (Process_Continued == false)
                disable_allflags();
            ////Communication.writeCommunicationCommands("Device Intialization started");
            unloadJars_lvlintiated = true;
            //moveinitiateflg = true;
            homecnt = 0;
            ////movetohome();
            move_to_home(3); //BothZaxistohome();
        }
        //Level Sensing        
        private void check_racks_using_lvlsence(string lvlchktype)
        {
            string[] UlJars = { "U1", "U2", "U3", "U4", "U5", "U6" };
            string[] LdJars = { "L1", "L2", "L3" };
            string[] HtrJars = { "H1", "H2", "H3" };
            string[] WtrJars = { "W1", "W2", "W3", "W4", "W5", "W6" };
            string[] NomJars = new string[39];
            //string[] NomJars = new string[33];
            int UlJarln = 0, LdJarln = 0, HtrJarln = 0, Jarlens = 0, NomJarlen = 0, WtrJarlen = 0;
            //Feteching the Details of Jar positions and Moving RA for sensing the rack
            string sndcmdstr = "", JarName_Value = "";

            for (int i = 0; i < 39; i++)
            {
                if (i < 33)
                    NomJars[i] = "J" + (i + 1).ToString();  //(i + 1).ToString();
                else if (i == 33)
                    NomJars[i] = "W1";
                else if (i == 34)
                    NomJars[i] = "W2";
                else if (i == 35)
                    NomJars[i] = "W3";
                else if (i == 36)
                    NomJars[i] = "W4";
                else if (i == 37)
                    NomJars[i] = "W5";
                else if (i == 38)
                    NomJars[i] = "W6";
            }
            UlJarln = UlJars.Length;
            LdJarln = LdJars.Length;
            HtrJarln = HtrJars.Length;
            NomJarlen = NomJars.Length;
            WtrJarlen = WtrJars.Length;

            if (lvlchktype == "H")
                Jarlens = HtrJarln;
            else if (lvlchktype == "U")
                Jarlens = UlJarln;
            else if (lvlchktype == "L")
                Jarlens = LdJarln;
            else if (lvlchktype == "N")
                Jarlens = NomJarlen;
            else if (lvlchktype == "W")
                Jarlens = WtrJarlen;

            incubtime = 0;
            if (ulcnt >= Jarlens)   //Call the moment Loading of racks to heater function
            {
                ulcnt = 0;
                if ((unloadjar_racksensed == true) && (unloadJars_lvlintiated == true))
                {
                    Waterjar_racksensed = false;
                    Washjar_lvlintiated = false;
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    heaterjar_lvlintiated = false;
                    heaterjar_racksensed = false;
                    loadingjar_lvlintiated = false;
                    loadingjar_racksensed = false;
                    normaljar_lvlintiated = false;
                    normaljar_racksensed = false;
                    MessageBox.Show("Remove the Racks from the Unloading Jars", "H & E Communication", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                else if ((unloadjar_racksensed == false) && (unloadJars_lvlintiated == true))
                {
                    Waterjar_racksensed = false;
                    Washjar_lvlintiated = false;
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    loadingjar_lvlintiated = false;
                    loadingjar_racksensed = false;
                    heaterjar_racksensed = false;
                    heaterjar_lvlintiated = false;
                    normaljar_lvlintiated = true;
                    normaljar_racksensed = false;
                    ulcnt = 0;
                    check_racks_using_lvlsence("N");
                }
                else if ((normaljar_lvlintiated == true) && (normaljar_racksensed == false))
                {
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    loadingjar_lvlintiated = false;
                    loadingjar_racksensed = false;
                    heaterjar_racksensed = false;
                    heaterjar_lvlintiated = true;
                    normaljar_lvlintiated = false;
                    normaljar_racksensed = false;
                    ulcnt = 0;
                    check_racks_using_lvlsence("H");
                    ////if (Waterjar_Levelsensed==true)
                    ////    check_racks_using_lvlsence("H");
                    ////else
                    ////{
                    ////    string wTr_Txt = "";
                    ////    wTr_Txt = "Water Valves Not functioning Please check these Valve ";
                    ////    for (int i=0;i<6;i++)
                    ////    {
                    ////        if(waterlvlinwaterjars[i]==0)
                    ////        {                                
                    ////             wTr_Txt = wTr_Txt + "W" + (i+1).ToString() + "  ";
                    ////        }                           
                    ////    }
                    ////    wTr_Txt = wTr_Txt + "start the proto run";
                    ////    sp.SpeakAsync(wTr_Txt);
                    ////    movetohome();                        
                    ////    MessageBox.Show(wTr_Txt, "H & E Communication", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    ////    cbo_protocol.Enabled = false;
                    ////    btn_start.Enabled = false;
                    ////    btn_stop.Enabled = false;
                    ////    btn_Continue.Enabled = false;
                    ////}
                }
                else if ((normaljar_lvlintiated == true) && (normaljar_racksensed == true))
                {
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    loadingjar_lvlintiated = false;
                    loadingjar_racksensed = false;
                    heaterjar_racksensed = false;
                    heaterjar_lvlintiated = false;
                    normaljar_lvlintiated = false;
                    ////normaljar_racksensed = false;  // -- Commented on 05122023 1432 as dissusion with bhasker for level sensing racks in Jars
                    HtrRacks_ULJars = false;
                    NMRacks_ULJars = true;
                    inxSlno = 0;
                    Jarloaddetails = false;

                    //movetohome();
                    move_to_home(6);//BothYZaxistohome();

                    ////LoadRacksfrom_NormalJars_toUnloadJars();
                }
                else if ((heaterjar_racksensed == true) && (heaterjar_lvlintiated == true)) // Calling unloading racks function from Heater chambers
                {
                    loadingjar_lvlintiated = false;
                    loadingjar_racksensed = false;
                    normaljar_lvlintiated = false;
                    normaljar_racksensed = false;
                    //heaterjar_racksensed = false;  // -- Commented on 05122023 1432 as dissusion with bhasker for level sensing racks in Jars
                    heaterjar_lvlintiated = false;
                    HtrRacks_ULJars = true;
                    inxSlno = 0;
                    Jarloaddetails = false;

                    //movetohome();
                    move_to_home(6);//BothYZaxistohome();

                    //////LoadRacksfrom_HeaterJars_toUnloadJars();   //--Commeneted on 05122023 sa discussion with bhasker for level sensing racksin jars
                }
                else if ((heaterjar_racksensed == false) && (heaterjar_lvlintiated == true))
                {
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    heaterjar_racksensed = false;
                    heaterjar_lvlintiated = false;
                    loadingjar_lvlintiated = true;
                    loadingjar_racksensed = false;
                    normaljar_lvlintiated = false;
                    normaljar_racksensed = false;
                    ulcnt = 0;
                    if (DeviceIntialize == true)
                    {
                        DeviceIntialize = false;
                        only_homeissued = true;
                        //New code added on 16092024 1802
                        btn_start.Enabled = true;
                        btn_stop.Enabled = true;
                        btn_Continue.Enabled = true;
                        cbo_protocol.Enabled = true;
                        btnClose.Enabled = true;
                        //New code added on 16092024 1802
                        move_to_home(0); //movetohome();
                    }
                    else
                    {
                        check_racks_using_lvlsence("L");
                    }

                }
                else if ((recheck_Racks_Loaded == false) && (loadingjar_racksensed == true) && (loadingjar_lvlintiated == true)) // Calling unloading racks function from Heater chambers
                {
                    heaterjar_racksensed = false;
                    heaterjar_lvlintiated = false;
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    protocolinitiateflg = false;
                    protocolcmdintiated = false;
                    normaljar_lvlintiated = false;
                    normaljar_racksensed = false;
                    move_to_home(0); //movetohome();
                    ////BothYZaxistohome();                    
                }
                else if ((recheck_Racks_Loaded == true) && (loadingjar_racksensed == true) && (loadingjar_lvlintiated == true)) // Calling unloading racks function from Heater chambers
                {
                    heaterjar_racksensed = false;
                    heaterjar_lvlintiated = false;
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    protocolinitiateflg = false;
                    protocolcmdintiated = false;
                    normaljar_lvlintiated = false;
                    normaljar_racksensed = false;
                    Racks_Reloadedto_Loadingjars = true;
                    Recheck_Rack_Sensing_Started = false;
                    if (TempReadingStarted == true)
                    {
                        tmr_temp.Enabled = false;
                        tmr_temp_incub.Enabled = false;
                        tmr_tempstart.Enabled = true;
                        temp_restartincub = System.DateTime.Now;
                        temp_restartincub = temp_restartincub.AddSeconds(10);
                        //System.Threading.Thread.Sleep(1000);
                    }
                    move_to_home(3); //BothZaxistohome();                    
                }
                else if ((recheck_Racks_Loaded == true) && (loadingjar_racksensed == false) && (loadingjar_lvlintiated == true)) // Calling unloading racks function from Heater chambers
                {
                    heaterjar_racksensed = false;
                    heaterjar_lvlintiated = false;
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    protocolinitiateflg = false;
                    protocolcmdintiated = false;
                    normaljar_lvlintiated = false;
                    normaljar_racksensed = false;
                    if (TempReadingStarted == true)
                    {
                        tmr_temp.Enabled = false;
                        tmr_temp_incub.Enabled = false;
                        tmr_tempstart.Enabled = true;
                        temp_restartincub = System.DateTime.Now;
                        temp_restartincub = temp_restartincub.AddSeconds(10);
                        //System.Threading.Thread.Sleep(1000);
                    }
                    //BothZaxistohome();
                    Both_Z_Homecmdissued = true;
                    move_to_home(0); //movetohome();
                }
                else if ((loadingjar_racksensed == false) && (loadingjar_lvlintiated == true)) // Calling unloading racks function from Heater chambers
                {
                    loadingjar_lvlintiated = false;
                    loadingjar_racksensed = false;
                    heaterjar_racksensed = false;
                    heaterjar_lvlintiated = false;
                    unloadJars_lvlintiated = false;
                    unloadjar_racksensed = false;
                    protocolinitiateflg = false;
                    protocolcmdintiated = false;
                    sensed = false;
                    HtrRacks_ULJars = false;
                    inxSlno = 0;
                    loading_racks = false;
                    //Both_Z_Homecmdissued = true;
                    //BothZaxistohome();  //New code added on 08-12-2023
                    //MessageBox.Show("Load the Racks to Loading Jars and start the proto run", "H & E Communication", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    sp.SpeakAsync("Load the Racks to Loading Jars and start the proto run");
                    noracksin_loadingjars = true;
                    move_to_home(0); //movetohome();
                    //if (continuetestflg == true)
                    //{
                    btn_Continue.Enabled = true;
                    //    continuetestflg = false;
                    //}
                    return;
                }
                //ulcnt = 0;
                return;
            }

            if (lvlchktype == "U")
                JarName_Value = UlJars[ulcnt];
            else if (lvlchktype == "H")
                JarName_Value = HtrJars[ulcnt];
            else if (lvlchktype == "L")
                JarName_Value = LdJars[ulcnt];
            else if (lvlchktype == "N")
                JarName_Value = NomJars[ulcnt];

            DataRow[] resut = JPos.Select("JarNo ='" + JarName_Value + "'");
            if (resut.Length > 0)
            {
                //x1Pos, y1Pos, z1Pos, z2Pos
                JarName = resut[0]["JarNo"].ToString();
                x1Pos = resut[0]["X-Axis"].ToString();
                y1Pos = resut[0]["Y-Axis"].ToString();
                z1Pos = resut[0]["Z1-Axis"].ToString();
                z2Pos = resut[0]["Z2-Axis"].ToString();
                sndcmdstr = "";
                sndcmdstr = x1Pos + "," + y1Pos + ",0";
            }

            if (sndcmdstr == "")
                return;

            rareached = false;
            repeatval = 0;
            functioncode = Communication.LEVEL_SENSE;

            if ((JarName.Contains("J")) || (JarName.Contains("W")) || (JarName.Contains("U")) || (JarName.Contains("L")))      //For Normal Jars Moving Parameter                    
            {
                sndcmdstr = sndcmdstr + ",0";  //functioncode = 1;                   
            }
            else if (JarName.Contains("H"))  //For Heater Jars Moving parameter                    
            {
                sndcmdstr = sndcmdstr + ",1"; //functioncode = 2;                   
            }
            Communication.RA_No = 0;

            if (repeatval == 0)
            {
                Communication.framed_cmd = "";
            }
            CommandName = "Level Sensing For " + JarName;
            if (!mport.IsOpen)
                init_port();
            sensed = false;
            rareached = false;
            snd_rcvCmd(functioncode, sndcmdstr);
            tmr_Cut.Enabled = true;
            tmr_Cut.Interval = 500;
            cmdsnt++;
            ulcnt++;
        }
        private void checkrackval(float lvlsnsval)
        {
            float[] minval = new float[20]; float[] maxval = new float[20];
            string jtype = ""; int jno = 0;
            minval[0] = 190;    //Rack Min
            minval[1] = 792;    //300 ml
            minval[2] = 910;    //290 ml
            minval[3] = 1026;   //260 ml
            minval[4] = 1100;   //250 ml
            minval[5] = 1170;   //230 ml
            minval[6] = 1270;   //200 ml
            minval[7] = 1385;   //180 ml
            minval[8] = 1401;   //170 ml
            minval[9] = 1509;   //150 ml
            minval[10] = 1731;  //100 ml
            minval[11] = 1946;  //50 ml
            minval[12] = 2117;  //0 ml
            minval[13] = 3016;  // No-Jar

            maxval[0] = 220;    //Rack Max
            maxval[1] = 900;    //300 ml
            maxval[2] = 1025;    //290 ml
            maxval[3] = 1099;    //260 ml
            maxval[4] = 1168;   //250 ml
            maxval[5] = 1265;    //230 ml
            maxval[6] = 1384;   //200 ml
            maxval[7] = 1400;    //180 ml
            maxval[8] = 1508;    //170 ml
            maxval[9] = 1556;   //150 ml
            maxval[10] = 1945;  //100 ml
            maxval[11] = 2116;  //50 ml
            maxval[12] = 2229;  //0 ml
            maxval[13] = 3138;  // No-jar75*3

            jtype = JarName.Substring(0, 1);
            //jno = Convert.ToInt32(JarName.Substring(1));  // old working code works to lift racks from normal jars commented on 15-12-2023 to remove rack from wash jar
            jno = Convert.ToInt32(JarName.Substring(1));
            if (JarName.Contains("J"))
            {
                //if (jno >= 18)
                //    jno = jno + 6;
                //else if((jno>=10) && (jno<=17))
                //    jno = jno + 3;
            }
            else if (JarName.Contains("W"))
            {
                if (JarName == "W1")
                    jno = 33;
                else if (JarName == "W2")
                    jno = 34;
                else if (JarName == "W3")
                    jno = 35;
                else if (JarName == "W4")
                    jno = 36;
                else if (JarName == "W5")
                    jno = 37;
                else if (JarName == "W6")
                    jno = 38;
            }

            if ((lvlsnsval <= minval[0]) || ((lvlsnsval >= minval[0]) && (lvlsnsval <= maxval[0])))  // Only Rack
            {
                SetText("Rack is in Jar of " + JarName);
                JarFillColor = Color.FromArgb(0x330000);
                JartxtforeColor = Color.FromArgb(30, 80, 150);

                if (JarName.Contains("U"))
                {
                    unloadjar_racksensed = true;
                    rackinunloading[jno - 1] = 1;
                }
                else if (JarName.Contains("H"))
                {
                    heaterjar_racksensed = true;
                    rackinheater[jno - 1] = 1;
                }
                else if (JarName.Contains("L"))
                {
                    loadingjar_racksensed = true;
                    rackinloading[jno - 1] = 1;
                    if (JarName == "L1")
                        L1.JarRack = true;
                    else if (JarName == "L2")
                        L2.JarRack = true;
                    else if (JarName == "L3")
                        L3.JarRack = true;
                }
                else if (JarName.Contains("J"))
                {
                    normaljar_racksensed = true;
                    rackinjars[jno - 1] = 1;
                }
                else if (JarName.Contains("W"))
                {
                    normaljar_racksensed = true;
                    rackinjars[jno - 1] = 1;
                }
            }
            else if ((lvlsnsval > maxval[0]) && (lvlsnsval < minval[1]))  //Between Rack & 300 ml
            {
                SetText("Sensing Area is above 300ml & Below Rack");
                JarFillColor = Color.FromArgb(0x660000);
                JartxtforeColor = Color.FromArgb(30, 80, 150); //Color.White;

                if (JarName.Contains("U"))
                {
                    unloadjar_racksensed = true;
                    rackinunloading[jno - 1] = 1;
                }
                else if (JarName.Contains("H"))
                {
                    heaterjar_racksensed = true;
                    rackinheater[jno - 1] = 1;
                }
                else if (JarName.Contains("L"))
                {
                    loadingjar_racksensed = true;
                    rackinloading[jno - 1] = 1;
                    if (JarName == "L1")
                        L1.JarRack = true;
                    else if (JarName == "L2")
                        L2.JarRack = true;
                    else if (JarName == "L3")
                        L3.JarRack = true;
                }
                else if (JarName.Contains("J"))
                {
                    normaljar_racksensed = true;
                    rackinjars[jno - 1] = 1;
                }
                else if (JarName.Contains("W"))
                {
                    normaljar_racksensed = true;
                    rackinjars[jno - 1] = 1;
                }
            }
            else if ((lvlsnsval >= minval[1]) && (lvlsnsval <= maxval[1]))  //Only 300 ml
            {
                SetText(JarName + " Contains 300ml of Reagent in it");
                JarFillColor = Color.FromArgb(0x006600);
                JartxtforeColor = Color.FromArgb(30, 80, 150); //Color.White;
                JarliquidValue = "100%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 1);
                }

            }
            else if ((lvlsnsval > maxval[1]) && (lvlsnsval < minval[2])) //Between 290ml & 300 ml
            {
                SetText(JarName + " Contains Reagent of between 290ml to 300ml in it");
                JarFillColor = Color.FromArgb(0x336633);
                JartxtforeColor = Color.FromArgb(30, 80, 150); //Color.White;
                JarliquidValue = "98%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 1);
                }
            }
            else if ((lvlsnsval >= minval[2]) && (lvlsnsval <= maxval[2])) //Only 290 ml
            {
                SetText(JarName + " Contains 290ml of Reagent in it");
                JarFillColor = Color.FromArgb(0x339900);
                JartxtforeColor = Color.FromArgb(30, 80, 150); //Color.White;
                JarliquidValue = "97%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 1);
                }
            }
            else if ((lvlsnsval > maxval[2]) && (lvlsnsval < minval[3])) //Between 260ml & 290 ml
            {
                SetText(JarName + " Contains Reagent of between 260ml to 290ml in it");
                JarFillColor = Color.FromArgb(0x00FF99);
                JartxtforeColor = Color.DarkSlateGray;
                JarliquidValue = "89%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval >= minval[3]) && (lvlsnsval <= maxval[3]))  //Only 260 ml
            {
                SetText(JarName + " Contains 260ml of Reagent in it");
                JarFillColor = Color.FromArgb(0xCC0000);
                JartxtforeColor = Color.White;
                JarliquidValue = "87%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval > maxval[3]) && (lvlsnsval < minval[4])) //Between 250ml & 260 ml
            {
                SetText(JarName + " Contains Reagent of between 230ml to 260ml in it");
                JarFillColor = Color.FromArgb(245, 171, 93);
                JartxtforeColor = Color.FromArgb(79, 74, 70);
                JarliquidValue = "85%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval >= minval[4]) && (lvlsnsval <= maxval[4]))  //Only 250 ml
            {
                SetText(JarName + " Contains 250ml of Reagent in it");
                JarFillColor = Color.Yellow;
                JartxtforeColor = Color.Red;
                JarliquidValue = "83%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval > maxval[4]) && (lvlsnsval < minval[5])) //Between 230ml & 250 ml
            {
                SetText(JarName + " Contains Reagent of between 230ml to 250ml in it");
                JarFillColor = Color.LightYellow;
                JartxtforeColor = Color.Red;
                JarliquidValue = "79%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }

            }
            else if ((lvlsnsval >= minval[5]) && (lvlsnsval <= maxval[5]))  //Only 230 ml
            {
                SetText(JarName + " Contains 230ml of Reagent in it");
                JarFillColor = Color.LightCoral;
                JartxtforeColor = Color.SlateBlue;
                JarliquidValue = "77%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval > maxval[5]) && (lvlsnsval < minval[6])) //Between 200ml & 230ml
            {
                SetText(JarName + " Contains Reagent of between 200ml to 230ml in it");
                JarFillColor = Color.Crimson;
                JartxtforeColor = Color.White;
                JarliquidValue = "70%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval >= minval[6]) && (lvlsnsval <= maxval[6])) //Only 200 ml
            {
                SetText(JarName + " Contains 200ml of Reagent in it");
                JarFillColor = Color.Crimson;
                JartxtforeColor = Color.White;
                JarliquidValue = "67%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval > maxval[6]) && (lvlsnsval < minval[7])) //Between 180ml & 200ml
            {
                SetText(JarName + " Contains Reagent of between 180ml to 200ml in it");
                JarFillColor = Color.Red;
                JartxtforeColor = Color.White;
                JarliquidValue = "64%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }

            }
            else if ((lvlsnsval >= minval[7]) && (lvlsnsval <= maxval[7]))  //Only 180 ml
            {
                SetText(JarName + " Contains 180ml of Reagent in it");
                JarFillColor = Color.FromArgb(173, 69, 49);
                JartxtforeColor = Color.White;
                JarliquidValue = "60%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval > maxval[7]) && (lvlsnsval < minval[8])) //Between 170ml  & 180ml
            {
                //SetText(" No Jar in Machine Please check  Without Jar process cann't be done");
                SetText(JarName + " Contains Reagent of between 170ml to 180ml in it");
                JarFillColor = Color.FromArgb(252, 108, 106);
                JartxtforeColor = Color.White;
                JarliquidValue = "58%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval >= minval[8]) && (lvlsnsval <= maxval[8])) ////Only 170 ml
            {
                //SetText(" No Jar in Machine Please check  Without Jar process cann't be done");
                SetText(JarName + " Contains 180ml of Reagent in it");
                JarFillColor = Color.Red;
                JartxtforeColor = Color.White;
                JarliquidValue = "57%";
                lowlevel = true;
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval > maxval[8]) && (lvlsnsval < minval[9])) //Between 150ml  & 170ml
            {
                SetText(JarName + " Contains Reagent of between 150ml to 170ml in it");
                JarFillColor = Color.DarkRed;
                JartxtforeColor = Color.White;
                JarliquidValue = "52%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval >= minval[9]) && (lvlsnsval <= maxval[9])) ////Only 150 ml
            {
                SetText(JarName + " Contains 150ml of Reagent in it");
                JarFillColor = Color.DarkRed;
                JartxtforeColor = Color.White;
                JarliquidValue = "50%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval > maxval[9]) && (lvlsnsval < minval[10])) //Between 100ml  & 150ml
            {
                SetText(JarName + " Contains Reagent of between 100ml to 150ml in it");
                JarFillColor = Color.DarkRed;
                JartxtforeColor = Color.White;
                JarliquidValue = "40%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval >= minval[10]) && (lvlsnsval <= maxval[10])) ////Only 100 ml
            {
                SetText(JarName + " Contains 100ml of Reagent in it");
                JarFillColor = Color.DarkRed;
                JartxtforeColor = Color.White;
                JarliquidValue = "33%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }
            }
            else if ((lvlsnsval > maxval[10]) && (lvlsnsval < minval[11])) //Between 50ml  & 100ml
            {
                SetText(JarName + " Contains Reagent of between 50ml to 100ml in it");
                JarFillColor = Color.DarkRed;
                JartxtforeColor = Color.White;
                JarliquidValue = "27%";
                if (JarName.Contains("W"))
                {
                    update_water_Level_Status(JarName, 0);
                }

            }
            else if ((lvlsnsval >= minval[11]) && (lvlsnsval <= maxval[11])) ////Only 50 ml
            {
                JarFillColor = Color.DarkRed;
                JartxtforeColor = Color.White;
                JarliquidValue = "17%";
                if (JarName.Contains("W"))
                {
                    SetText("No Water in " + JarName + " Please check the water valve to run the test");
                    update_water_Level_Status(JarName, 0);
                }
                else
                    SetText("No Reagent in " + JarName + " Please fill reagent to run the test");
            }
            else if ((lvlsnsval > maxval[11]) && (lvlsnsval < minval[12])) //Between 0ml  & 50ml
            {
                JarFillColor = Color.DarkRed;
                JartxtforeColor = Color.White;
                JarliquidValue = "10%";
                if (JarName.Contains("W"))
                {
                    SetText("No Water in " + JarName + " Please check the water valve to run the test");
                    update_water_Level_Status(JarName, 0);
                }
                else
                    SetText("No Reagent in " + JarName + " Please fill reagent to run the test");
            }
            else if ((lvlsnsval >= minval[12]) && (lvlsnsval <= maxval[12])) ////Only 0 ml
            {
                JarFillColor = Color.DarkRed;
                JartxtforeColor = Color.White;
                JarliquidValue = "0%";
                if (JarName.Contains("W"))
                {
                    SetText("No Water in " + JarName + " Please check the water valve to run the test");
                    update_water_Level_Status(JarName, 0);
                }
                else
                    SetText("No Reagent in " + JarName + " Please fill reagent to run the test");
            }
            else if ((lvlsnsval > maxval[12]) && (lvlsnsval < minval[13])) //Between 0ml & No Jar value
            {
                SetText(" No Jar in Machine Please check  Without Jar process cann't be done");
                JarFillColor = Color.White;
                JartxtforeColor = Color.DarkSlateGray;
                JarliquidValue = "0%";
            }
            else if ((lvlsnsval >= minval[13]) && (lvlsnsval <= maxval[13])) ////No Jar Value
            {
                SetText(" No Jar in Machine Please check  Without Jar process cann't be done");
                JarFillColor = Color.White;
                JartxtforeColor = Color.DarkSlateGray;
                JarliquidValue = "0%";
            }
            else if ((lvlsnsval > maxval[13])) //No Jar Value
            {
                SetText(" No Jar in Machine Please check  Without Jar process cann't be done");
                JarFillColor = Color.White;
                JartxtforeColor = Color.DarkSlateGray;
                JarliquidValue = "0%";
            }
            BdrColor = JarFillColor;

            //Updating the level colors to jars
            switch (JarName)
            {
                case "J1":
                    {
                        J1.BackColor = BdrColor;
                        J1.TextColor = JartxtforeColor;
                        J1.BorderSize = 3;
                        J1.OnlyJar = true;
                        J1.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J2":
                    {
                        J2.BackColor = BdrColor;
                        J2.TextColor = JartxtforeColor;
                        J2.BorderSize = 3;
                        J2.OnlyJar = true;
                        J2.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J3":
                    {
                        J3.BackColor = BdrColor;
                        J3.TextColor = JartxtforeColor;
                        J3.BorderSize = 3;
                        J3.OnlyJar = true;
                        J3.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J4":
                    {
                        J4.BackColor = BdrColor;
                        J4.TextColor = JartxtforeColor;
                        J4.BorderSize = 3;
                        J4.OnlyJar = true;
                        J4.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J5":
                    {
                        J5.BackColor = BdrColor;
                        J5.TextColor = JartxtforeColor;
                        J5.BorderSize = 3;
                        J5.OnlyJar = true;
                        J5.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J6":
                    {
                        J6.BackColor = BdrColor;
                        J6.TextColor = JartxtforeColor;
                        J6.BorderSize = 3;
                        J6.OnlyJar = true;
                        J6.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J7":
                    {
                        J7.BackColor = BdrColor;
                        J7.TextColor = JartxtforeColor;
                        J7.BorderSize = 3;
                        J7.OnlyJar = true;
                        J7.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J8":
                    {
                        J8.BackColor = BdrColor;
                        J8.TextColor = JartxtforeColor;
                        J8.BorderSize = 3;
                        J8.OnlyJar = true;
                        J8.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J9":
                    {
                        J9.BackColor = BdrColor;
                        J9.TextColor = JartxtforeColor;
                        J9.BorderSize = 3;
                        J9.OnlyJar = true;
                        J9.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J10":
                    {
                        J10.BackColor = BdrColor;
                        J10.TextColor = JartxtforeColor;
                        J10.BorderSize = 3;
                        J10.OnlyJar = true;
                        J10.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J11":
                    {
                        J11.BackColor = BdrColor;
                        J11.TextColor = JartxtforeColor;
                        J11.BorderSize = 3;
                        J11.OnlyJar = true;
                        J11.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J12":
                    {
                        J12.BackColor = BdrColor;
                        J12.TextColor = JartxtforeColor;
                        J12.BorderSize = 3;
                        J12.OnlyJar = true;
                        J12.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J13":
                    {
                        J13.BackColor = BdrColor;
                        J13.TextColor = JartxtforeColor;
                        J13.BorderSize = 3;
                        J13.OnlyJar = true;
                        J13.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J14":
                    {
                        J14.BackColor = BdrColor;
                        J14.TextColor = JartxtforeColor;
                        J14.BorderSize = 3;
                        J14.OnlyJar = true;
                        J14.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J15":
                    {
                        J15.BackColor = BdrColor;
                        J15.TextColor = JartxtforeColor;
                        J15.BorderSize = 3;
                        J15.OnlyJar = true;
                        J15.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J16":
                    {
                        J16.BackColor = BdrColor;
                        J16.TextColor = JartxtforeColor;
                        J16.BorderSize = 3;
                        J16.OnlyJar = true;
                        J16.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J17":
                    {
                        J17.BackColor = BdrColor;
                        J17.TextColor = JartxtforeColor;
                        J17.BorderSize = 3;
                        J17.OnlyJar = true;
                        J17.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J18":
                    {
                        J18.BackColor = BdrColor;
                        J18.TextColor = JartxtforeColor;
                        J18.BorderSize = 3;
                        J18.OnlyJar = true;
                        J18.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J19":
                    {
                        J19.BackColor = BdrColor;
                        J19.TextColor = JartxtforeColor;
                        J19.BorderSize = 3;
                        J19.OnlyJar = true;
                        J19.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J20":
                    {
                        J20.BackColor = BdrColor;
                        J20.TextColor = JartxtforeColor;
                        J20.BorderSize = 3;
                        J20.OnlyJar = true;
                        J20.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J21":
                    {
                        J21.BackColor = BdrColor;
                        J21.TextColor = JartxtforeColor;
                        J21.BorderSize = 3;
                        J21.OnlyJar = true;
                        J21.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J22":
                    {
                        J22.BackColor = BdrColor;
                        J22.TextColor = JartxtforeColor;
                        J22.BorderSize = 3;
                        J22.OnlyJar = true;
                        J22.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J23":
                    {
                        J23.BackColor = BdrColor;
                        J23.TextColor = JartxtforeColor;
                        J23.BorderSize = 3;
                        J23.OnlyJar = true;
                        J25.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J24":
                    {
                        J24.BackColor = BdrColor;
                        J24.TextColor = JartxtforeColor;
                        J24.BorderSize = 3;
                        J24.OnlyJar = true;
                        J24.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J25":
                    {
                        J25.BackColor = BdrColor;
                        J25.TextColor = JartxtforeColor;
                        J25.BorderSize = 3;
                        J25.OnlyJar = true;
                        J25.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J26":
                    {
                        J26.BackColor = BdrColor;
                        J26.TextColor = JartxtforeColor;
                        J26.BorderSize = 3;
                        J26.OnlyJar = true;
                        J26.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J27":
                    {
                        J27.BackColor = BdrColor;
                        J27.TextColor = JartxtforeColor;
                        J27.BorderSize = 3;
                        J27.OnlyJar = true;
                        J27.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J28":
                    {
                        J28.BackColor = BdrColor;
                        J28.TextColor = JartxtforeColor;
                        J28.BorderSize = 3;
                        J28.OnlyJar = true;
                        J28.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J29":
                    {
                        J29.BackColor = BdrColor;
                        J29.TextColor = JartxtforeColor;
                        J29.BorderSize = 3;
                        J29.OnlyJar = true;
                        J29.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J30":
                    {
                        J30.BackColor = BdrColor;
                        J30.TextColor = JartxtforeColor;
                        J30.BorderSize = 3;
                        J30.OnlyJar = true;
                        J30.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J31":
                    {
                        J31.BackColor = BdrColor;
                        J31.TextColor = JartxtforeColor;
                        J31.BorderSize = 3;
                        J31.OnlyJar = true;
                        J31.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J32":
                    {
                        J32.BackColor = BdrColor;
                        J32.TextColor = JartxtforeColor;
                        J32.BorderSize = 3;
                        J32.OnlyJar = true;
                        J32.TaskProcess = JarliquidValue;
                        break;
                    }
                case "J33":
                    {
                        J33.BackColor = BdrColor;
                        J33.TextColor = JartxtforeColor;
                        J33.BorderSize = 3;
                        J33.OnlyJar = true;
                        J33.TaskProcess = JarliquidValue;
                        break;
                    }
                case "W1":
                    {
                        W1.BackColor = Color.FromArgb(185, 224, 255);
                        W1.TextColor = JartxtforeColor;
                        W1.BorderSize = 3;
                        W1.OnlyJar = true;
                        break;
                    }
                case "W2":
                    {
                        W2.BackColor = Color.FromArgb(185, 224, 255);
                        W2.TextColor = JartxtforeColor;
                        W2.BorderSize = 3;
                        W2.OnlyJar = true;
                        break;
                    }
                case "W3":
                    {
                        W3.BackColor = Color.FromArgb(185, 224, 255);
                        W3.TextColor = JartxtforeColor;
                        W3.BorderSize = 3;
                        W3.OnlyJar = true;
                        break;
                    }
                case "W4":
                    {
                        W4.BackColor = Color.FromArgb(185, 224, 255);
                        W4.TextColor = JartxtforeColor;
                        W4.BorderSize = 3;
                        W4.OnlyJar = true;
                        break;
                    }
                case "W5":
                    {
                        W5.BackColor = Color.FromArgb(185, 224, 255);
                        W5.TextColor = JartxtforeColor;
                        W5.BorderSize = 3;
                        W5.OnlyJar = true;
                        break;
                    }
                case "W6":
                    {
                        W6.BackColor = Color.FromArgb(185, 224, 255);
                        W6.TextColor = JartxtforeColor;
                        W6.BorderSize = 3;
                        W6.OnlyJar = true;
                        break;
                    }
            }
        }
        private void update_water_Level_Status(string jName, int lvlval)
        {
            if (jName.Contains("W"))
            {
                if (lvlval == 0)
                {
                    Waterjar_Levelsensed = false;
                    if (jName == "W1")
                        waterlvlinwaterjars[0] = 0;
                    else if (jName == "W2")
                        waterlvlinwaterjars[1] = 0;
                    else if (jName == "W3")
                        waterlvlinwaterjars[2] = 0;
                    else if (jName == "W4")
                        waterlvlinwaterjars[3] = 0;
                    else if (jName == "W5")
                        waterlvlinwaterjars[4] = 0;
                    else if (jName == "W6")
                        waterlvlinwaterjars[5] = 0;
                }
                else if (lvlval == 1)
                {
                    Waterjar_Levelsensed = true;
                    if (jName == "W1")
                        waterlvlinwaterjars[0] = 1;
                    else if (jName == "W2")
                        waterlvlinwaterjars[1] = 1;
                    else if (jName == "W3")
                        waterlvlinwaterjars[2] = 1;
                    else if (jName == "W4")
                        waterlvlinwaterjars[3] = 1;
                    else if (jName == "W5")
                        waterlvlinwaterjars[4] = 1;
                    else if (jName == "W6")
                        waterlvlinwaterjars[5] = 1;
                }

            }
        }
        private void WaterValvesOnOff(int ValveState)
        {
            watervalveonpff("W1", ValveState);
        }
        #endregion

        #region Updating timing values to View
        private void updatetiming(string jarname, string rackNo, int timno)
        {
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1;
            string str = "", taskcomptime = "";

            string dt = "";
            switch (timno)
            {
                case 1:
                    {
                        //ts1 = r1_taskcomp.Subtract(d1);  //Totaltime - current time
                        ts1 = r1_incub.Subtract(d1);  //Only rack incub time
                        taskcomptime = r1_taskcomp.ToString().Substring(10);
                        dt = ts1.Hours.ToString().Length < 2 ? "0" + ts1.Hours.ToString() : ts1.Hours.ToString();
                        str = dt + ":";
                        dt = ts1.Minutes.ToString().Length < 2 ? "0" + ts1.Minutes.ToString() : ts1.Minutes.ToString();// + ":";
                        //str = str + dt;
                        str = dt + ":";
                        dt = ts1.Seconds.ToString().Length < 2 ? "0" + ts1.Seconds.ToString() : ts1.Seconds.ToString();
                        str = str + dt;
                        break;
                    }
                case 2:
                    {
                        //ts1 = r2_taskcomp.Subtract(d1);
                        ts1 = r2_incub.Subtract(d1);  //Only rack incub time
                        taskcomptime = r2_taskcomp.ToString().Substring(10);
                        dt = ts1.Hours.ToString().Length < 2 ? "0" + ts1.Hours.ToString() : ts1.Hours.ToString();
                        str = dt + ":";
                        dt = ts1.Minutes.ToString().Length < 2 ? "0" + ts1.Minutes.ToString() : ts1.Minutes.ToString();// + ":";
                        //str = str + dt;
                        str = dt + ":";
                        dt = ts1.Seconds.ToString().Length < 2 ? "0" + ts1.Seconds.ToString() : ts1.Seconds.ToString();
                        str = str + dt;
                        break;
                    }
                case 3:
                    {
                        //ts1 = r3_taskcomp.Subtract(d1);
                        ts1 = r3_incub.Subtract(d1);  //Only rack incub time
                        taskcomptime = r3_taskcomp.ToString().Substring(10);
                        dt = ts1.Hours.ToString().Length < 2 ? "0" + ts1.Hours.ToString() : ts1.Hours.ToString();
                        str = dt + ":";
                        dt = ts1.Minutes.ToString().Length < 2 ? "0" + ts1.Minutes.ToString() : ts1.Minutes.ToString();// + ":";
                        //str = str + dt;
                        str = dt + ":";
                        dt = ts1.Seconds.ToString().Length < 2 ? "0" + ts1.Seconds.ToString() : ts1.Seconds.ToString();
                        str = str + dt;
                        break;
                    }
                case 4:
                    {
                        //ts1 = r4_taskcomp.Subtract(d1);
                        ts1 = r4_incub.Subtract(d1);  //Only rack incub time
                        taskcomptime = r4_taskcomp.ToString().Substring(10);
                        dt = ts1.Hours.ToString().Length < 2 ? "0" + ts1.Hours.ToString() : ts1.Hours.ToString();
                        str = dt + ":";
                        dt = ts1.Minutes.ToString().Length < 2 ? "0" + ts1.Minutes.ToString() : ts1.Minutes.ToString();// + ":";
                        //str = str + dt;
                        str = dt + ":";
                        dt = ts1.Seconds.ToString().Length < 2 ? "0" + ts1.Seconds.ToString() : ts1.Seconds.ToString();
                        str = str + dt;
                        break;
                    }
                case 5:
                    {
                        //ts1 = r5_taskcomp.Subtract(d1);
                        ts1 = r5_incub.Subtract(d1);  //Only rack incub time
                        taskcomptime = r5_taskcomp.ToString().Substring(10);
                        dt = ts1.Hours.ToString().Length < 2 ? "0" + ts1.Hours.ToString() : ts1.Hours.ToString();
                        str = dt + ":";
                        dt = ts1.Minutes.ToString().Length < 2 ? "0" + ts1.Minutes.ToString() : ts1.Minutes.ToString();// + ":";
                        //str = str + dt;
                        str = dt + ":";
                        dt = ts1.Seconds.ToString().Length < 2 ? "0" + ts1.Seconds.ToString() : ts1.Seconds.ToString();
                        str = str + dt;
                        break;
                    }
                case 6:
                    {
                        //ts1 = r6_taskcomp.Subtract(d1);
                        ts1 = r6_incub.Subtract(d1);  //Only rack incub time
                        taskcomptime = r6_taskcomp.ToString().Substring(10);
                        dt = ts1.Hours.ToString().Length < 2 ? "0" + ts1.Hours.ToString() : ts1.Hours.ToString();
                        str = dt + ":";
                        dt = ts1.Minutes.ToString().Length < 2 ? "0" + ts1.Minutes.ToString() : ts1.Minutes.ToString();// + ":";
                        //str = str + dt;
                        str = dt + ":";
                        dt = ts1.Seconds.ToString().Length < 2 ? "0" + ts1.Seconds.ToString() : ts1.Seconds.ToString();
                        str = str + dt;
                        break;
                    }
                case 7:
                    {
                        //ts1 = r6_taskcomp.Subtract(d1);
                        ts1 = r7_incub.Subtract(d1);  //Only rack incub time
                        taskcomptime = r7_taskcomp.ToString().Substring(10);
                        dt = ts1.Hours.ToString().Length < 2 ? "0" + ts1.Hours.ToString() : ts1.Hours.ToString();
                        str = dt + ":";
                        dt = ts1.Minutes.ToString().Length < 2 ? "0" + ts1.Minutes.ToString() : ts1.Minutes.ToString();// + ":";
                        //str = str + dt;
                        str = dt + ":";
                        dt = ts1.Seconds.ToString().Length < 2 ? "0" + ts1.Seconds.ToString() : ts1.Seconds.ToString();
                        str = str + dt;
                        break;
                    }
                case 8:
                    {
                        //ts1 = r6_taskcomp.Subtract(d1);
                        ts1 = r8_incub.Subtract(d1);  //Only rack incub time
                        taskcomptime = r8_taskcomp.ToString().Substring(10);
                        dt = ts1.Hours.ToString().Length < 2 ? "0" + ts1.Hours.ToString() : ts1.Hours.ToString();
                        str = dt + ":";
                        dt = ts1.Minutes.ToString().Length < 2 ? "0" + ts1.Minutes.ToString() : ts1.Minutes.ToString();// + ":";
                        //str = str + dt;
                        str = dt + ":";
                        dt = ts1.Seconds.ToString().Length < 2 ? "0" + ts1.Seconds.ToString() : ts1.Seconds.ToString();
                        str = str + dt;
                        break;
                    }
                case 9:
                    {
                        //ts1 = r6_taskcomp.Subtract(d1);
                        ts1 = r9_incub.Subtract(d1);  //Only rack incub time
                        taskcomptime = r9_taskcomp.ToString().Substring(10);
                        dt = ts1.Hours.ToString().Length < 2 ? "0" + ts1.Hours.ToString() : ts1.Hours.ToString();
                        str = dt + ":";
                        dt = ts1.Minutes.ToString().Length < 2 ? "0" + ts1.Minutes.ToString() : ts1.Minutes.ToString();// + ":";
                        //str = str + dt;
                        str = dt + ":";
                        dt = ts1.Seconds.ToString().Length < 2 ? "0" + ts1.Seconds.ToString() : ts1.Seconds.ToString();
                        str = str + dt;
                        break;
                    }
            }

            switch (jarname)
            {
                case "J1":
                    {
                        J1.ElaspedTime = str;
                        J1.RackNumber = rackNo;
                        J1.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J2":
                    {
                        J2.ElaspedTime = str;
                        J2.RackNumber = rackNo;
                        J2.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J3":
                    {
                        J3.ElaspedTime = str;
                        J3.RackNumber = rackNo;
                        J3.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J4":
                    {
                        J4.ElaspedTime = str;
                        J4.RackNumber = rackNo;
                        J4.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J5":
                    {
                        J5.ElaspedTime = str;
                        J5.RackNumber = rackNo;
                        J5.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J6":
                    {
                        J6.ElaspedTime = str;
                        J6.RackNumber = rackNo;
                        J6.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J7":
                    {
                        J7.ElaspedTime = str;
                        J7.RackNumber = rackNo;
                        J7.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J8":
                    {
                        J8.ElaspedTime = str;
                        J8.RackNumber = rackNo;
                        J8.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J9":
                    {
                        J9.ElaspedTime = str;
                        J9.RackNumber = rackNo;
                        J9.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J10":
                    {
                        J10.ElaspedTime = str;
                        J10.RackNumber = rackNo;
                        J10.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J11":
                    {
                        J11.ElaspedTime = str;
                        J11.RackNumber = rackNo;
                        J11.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J12":
                    {
                        J12.ElaspedTime = str;
                        J12.RackNumber = rackNo;
                        J12.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J13":
                    {
                        J13.ElaspedTime = str;
                        J13.RackNumber = rackNo;
                        J13.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J14":
                    {
                        J14.ElaspedTime = str;
                        J14.RackNumber = rackNo;
                        J14.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J15":
                    {
                        J15.ElaspedTime = str;
                        J15.RackNumber = rackNo;
                        J15.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J16":
                    {
                        J16.ElaspedTime = str;
                        J16.RackNumber = rackNo;
                        J16.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J17":
                    {
                        J17.ElaspedTime = str;
                        J17.RackNumber = rackNo;
                        J17.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J18":
                    {
                        J18.ElaspedTime = str;
                        J18.RackNumber = rackNo;
                        J18.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J19":
                    {
                        J19.ElaspedTime = str;
                        J19.RackNumber = rackNo;
                        J19.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J20":
                    {
                        J20.ElaspedTime = str;
                        J20.RackNumber = rackNo;
                        J20.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J21":
                    {
                        J21.ElaspedTime = str;
                        J21.RackNumber = rackNo;
                        J21.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J22":
                    {
                        J22.ElaspedTime = str;
                        J22.RackNumber = rackNo;
                        J22.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J23":
                    {
                        J23.ElaspedTime = str;
                        J23.RackNumber = rackNo;
                        J23.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J24":
                    {
                        J24.ElaspedTime = str;
                        J24.RackNumber = rackNo;
                        J24.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J25":
                    {
                        J25.ElaspedTime = str;
                        J25.RackNumber = rackNo;
                        J25.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J26":
                    {
                        J26.ElaspedTime = str;
                        J26.RackNumber = rackNo;
                        J26.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J27":
                    {
                        U1.ElaspedTime = str;
                        U1.RackNumber = rackNo;
                        U1.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J28":
                    {
                        J32.ElaspedTime = str;
                        J32.RackNumber = rackNo;
                        J32.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J29":
                    {
                        J31.ElaspedTime = str;
                        J31.RackNumber = rackNo;
                        J31.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J30":
                    {
                        J30.ElaspedTime = str;
                        J30.RackNumber = rackNo;
                        J30.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J31":
                    {
                        J29.ElaspedTime = str;
                        J29.RackNumber = rackNo;
                        J29.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J32":
                    {
                        J28.ElaspedTime = str;
                        J28.RackNumber = rackNo;
                        J28.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "J33":
                    {
                        J27.ElaspedTime = str;
                        J27.RackNumber = rackNo;
                        J27.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "W1":
                    {
                        W1.ElaspedTime = str;
                        W1.RackNumber = rackNo;
                        W1.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "W2":
                    {
                        W2.ElaspedTime = str;
                        W2.RackNumber = rackNo;
                        W2.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "W3":
                    {
                        W3.ElaspedTime = str;
                        W3.RackNumber = rackNo;
                        W3.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "W4":
                    {
                        W4.ElaspedTime = str;
                        W4.RackNumber = rackNo;
                        W4.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "W5":
                    {
                        W5.ElaspedTime = str;
                        W5.RackNumber = rackNo;
                        W5.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "W6":
                    {
                        W6.ElaspedTime = str;
                        W6.RackNumber = rackNo;
                        W6.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "U1":
                    {
                        J33.ElaspedTime = str;
                        J33.RackNumber = rackNo;
                        J33.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "U2":
                    {
                        U2.ElaspedTime = str;
                        U2.RackNumber = rackNo;
                        U2.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "U3":
                    {
                        U3.ElaspedTime = str;
                        U3.RackNumber = rackNo;
                        U3.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "U4":
                    {
                        U4.ElaspedTime = str;
                        U4.RackNumber = rackNo;
                        U4.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "U5":
                    {
                        U5.ElaspedTime = str;
                        U5.RackNumber = rackNo;
                        U5.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "U6":
                    {
                        U6.ElaspedTime = str;
                        U6.RackNumber = rackNo;
                        U6.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "L1":
                    {
                        L1.ElaspedTime = str;
                        L1.RackNumber = rackNo;
                        L1.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "L2":
                    {
                        L2.ElaspedTime = str;
                        L2.RackNumber = rackNo;
                        L2.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "L3":
                    {
                        L3.ElaspedTime = str;
                        L3.RackNumber = rackNo;
                        L3.TaskCompletionTime = taskcomptime;
                        break;
                    }
            }
            return;
        }
        private void updateheatertimings(string jarname, string rackNo, bool tmpflg, int timno)
        {
            DateTime d1 = System.DateTime.Now;
            TimeSpan ts1;
            string str = "", taskcomptime = "";

            string dt = "";
            switch (timno)
            {
                case 1:
                    {
                        temp_incub = r1_incub; break;
                    }
                case 2:
                    {
                        temp_incub = r2_incub; break;
                    }
                case 3:
                    {
                        temp_incub = r3_incub; break;
                    }
                case 4:
                    {
                        temp_incub = r4_incub; break;
                    }
                case 5:
                    {
                        temp_incub = r5_incub; break;
                    }
                case 6:
                    {
                        temp_incub = r6_incub; break;
                    }
                case 7:
                    {
                        temp_incub = r7_incub; break;
                    }
                case 8:
                    {
                        temp_incub = r8_incub; break;
                    }
                case 9:
                    {
                        temp_incub = r9_incub; break;
                    }
            }

            ts1 = temp_incub.Subtract(d1);
            taskcomptime = temp_incub.ToString().Substring(10);
            dt = ts1.Hours.ToString().Length < 2 ? "0" + ts1.Hours.ToString() : ts1.Hours.ToString();
            str = dt + ":";
            dt = ts1.Minutes.ToString().Length < 2 ? "0" + ts1.Minutes.ToString() : ts1.Minutes.ToString();// + ":";
                                                                                                           //str = str + dt;
            str = dt + ":";
            dt = ts1.Seconds.ToString().Length < 2 ? "0" + ts1.Seconds.ToString() : ts1.Seconds.ToString();
            str = str + dt;

            if (tmpflg == false)
            {
                str = ""; taskcomptime = "";
            }

            switch (jarname)
            {
                case "H1":
                    {
                        H1.ElaspedTime = str;
                        H1.RackNumber = rackNo;
                        H1.TaskProcess = tmpval + "°C";
                        H1.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "H2":
                    {
                        H2.ElaspedTime = str;
                        H2.RackNumber = rackNo;
                        H2.TaskProcess = tmpval + "°C";
                        H2.TaskCompletionTime = taskcomptime;
                        break;
                    }
                case "H3":
                    {
                        H3.ElaspedTime = str;
                        H3.RackNumber = rackNo;
                        H3.TaskProcess = tmpval + "°C";
                        H3.TaskCompletionTime = taskcomptime;
                        break;
                    }
            }
            return;
        }
        #endregion

        #region Updating the Names to UI
        private void update_reagentsnames(string Jarnm, string regName)
        {
            switch (Jarnm)
            {
                case "J1":
                    {
                        J1.ProcessName = protoshortname;
                        J1.ReagentName = regName;
                        J1.OnlyJar = true;
                        break;
                    }
                case "J2":
                    {
                        J2.ProcessName = protoshortname;
                        J2.ReagentName = regName;
                        J2.OnlyJar = true;
                        break;
                    }
                case "J3":
                    {
                        J3.ProcessName = protoshortname;
                        J3.ReagentName = regName;
                        J3.OnlyJar = true;
                        break;
                    }
                case "J4":
                    {
                        J4.ProcessName = protoshortname;
                        J4.ReagentName = regName;
                        J4.OnlyJar = true;
                        break;
                    }
                case "J5":
                    {
                        J5.ProcessName = protoshortname;
                        J5.ReagentName = regName;
                        J5.OnlyJar = true;
                        break;
                    }
                case "J6":
                    {
                        J6.ProcessName = protoshortname;
                        J6.ReagentName = regName;
                        J6.OnlyJar = true;
                        break;
                    }
                case "J7":
                    {
                        J7.ProcessName = protoshortname;
                        J7.ReagentName = regName;
                        J7.OnlyJar = true;
                        break;
                    }
                case "J8":
                    {
                        J8.ProcessName = protoshortname;
                        J8.ReagentName = regName;
                        J8.OnlyJar = true;
                        break;
                    }
                case "J9":
                    {
                        J9.ProcessName = protoshortname;
                        J9.ReagentName = regName;
                        J9.OnlyJar = true;
                        break;
                    }
                case "J10":
                    {
                        J10.ProcessName = protoshortname;
                        J10.ReagentName = regName;
                        J10.OnlyJar = true;
                        break;
                    }
                case "J11":
                    {
                        J11.ProcessName = protoshortname;
                        J11.ReagentName = regName;
                        J11.OnlyJar = true;
                        break;
                    }
                case "J12":
                    {
                        J12.ProcessName = protoshortname;
                        J12.ReagentName = regName;
                        J12.OnlyJar = true;
                        break;
                    }
                case "J13":
                    {
                        J13.ProcessName = protoshortname;
                        J13.ReagentName = regName;
                        J13.OnlyJar = true;
                        break;
                    }
                case "J14":
                    {
                        J14.ProcessName = protoshortname;
                        J14.ReagentName = regName;
                        J14.OnlyJar = true;
                        break;
                    }
                case "J15":
                    {
                        J15.ProcessName = protoshortname;
                        J15.ReagentName = regName;
                        J15.OnlyJar = true;
                        break;
                    }
                case "J16":
                    {
                        J16.ProcessName = protoshortname;
                        J16.ReagentName = regName;
                        J16.OnlyJar = true;
                        break;
                    }
                case "J17":
                    {
                        J17.ProcessName = protoshortname;
                        J17.ReagentName = regName;
                        J17.OnlyJar = true;
                        break;
                    }
                case "J18":
                    {
                        J18.ProcessName = protoshortname;
                        J18.ReagentName = regName;
                        J18.OnlyJar = true;
                        break;
                    }
                case "J19":
                    {
                        J19.ProcessName = protoshortname;
                        J19.ReagentName = regName;
                        J19.OnlyJar = true;
                        break;
                    }
                case "J20":
                    {
                        J20.ProcessName = protoshortname;
                        J20.ReagentName = regName;
                        J20.OnlyJar = true;
                        break;
                    }
                case "J21":
                    {
                        J21.ProcessName = protoshortname;
                        J21.ReagentName = regName;
                        J21.OnlyJar = true;
                        break;
                    }
                case "J22":
                    {
                        J22.ProcessName = protoshortname;
                        J22.ReagentName = regName;
                        J22.OnlyJar = true;
                        break;
                    }
                case "J23":
                    {
                        J23.ProcessName = protoshortname;
                        J23.ReagentName = regName;
                        J23.OnlyJar = true;
                        break;
                    }
                case "J24":
                    {
                        J24.ProcessName = protoshortname;
                        J24.ReagentName = regName;
                        J24.OnlyJar = true;
                        break;
                    }
                case "J25":
                    {
                        J25.ProcessName = protoshortname;
                        J25.ReagentName = regName;
                        J25.OnlyJar = true;
                        break;
                    }
                case "J26":
                    {
                        J26.ProcessName = protoshortname;
                        J26.ReagentName = regName;
                        J26.OnlyJar = true;
                        break;
                    }
                case "J27":
                    {
                        U1.ProcessName = protoshortname;
                        U1.ReagentName = regName;
                        U1.OnlyJar = true;
                        break;
                    }
                case "J28":
                    {
                        J32.ProcessName = protoshortname;
                        J32.ReagentName = regName;
                        J32.OnlyJar = true;
                        break;
                    }
                case "J29":
                    {
                        J31.ProcessName = protoshortname;
                        J31.ReagentName = regName;
                        J31.OnlyJar = true;
                        break;
                    }
                case "J30":
                    {
                        J30.ProcessName = protoshortname;
                        J30.ReagentName = regName;
                        J30.OnlyJar = true;
                        break;
                    }
                case "J31":
                    {
                        J29.ProcessName = protoshortname;
                        J29.ReagentName = regName;
                        J29.OnlyJar = true;
                        break;
                    }
                case "J32":
                    {
                        J28.ProcessName = protoshortname;
                        J28.ReagentName = regName;
                        J28.OnlyJar = true;
                        break;
                    }
                case "J33":
                    {
                        J27.ProcessName = protoshortname;
                        J27.ReagentName = regName;
                        J27.OnlyJar = true;
                        break;
                    }
                case "W1":
                    {
                        W1.ProcessName = protoshortname;
                        W1.ReagentName = regName;
                        W1.OnlyJar = true;
                        break;
                    }
                case "W2":
                    {
                        W2.ProcessName = protoshortname;
                        W2.ReagentName = regName;
                        W2.OnlyJar = true;
                        break;
                    }
                case "W3":
                    {
                        W3.ProcessName = protoshortname;
                        W3.ReagentName = regName;
                        W3.OnlyJar = true;
                        break;
                    }
                case "W4":
                    {
                        W4.ProcessName = protoshortname;
                        W4.ReagentName = regName;
                        W4.OnlyJar = true;
                        break;
                    }
                case "W5":
                    {
                        W5.ProcessName = protoshortname;
                        W5.ReagentName = regName;
                        W5.OnlyJar = true;
                        break;
                    }
                case "W6":
                    {
                        W6.ProcessName = protoshortname;
                        W6.ReagentName = regName;
                        W6.OnlyJar = true;
                        break;
                    }
                case "U1":
                    {
                        J33.ProcessName = protoshortname;
                        J33.ReagentName = regName;
                        J33.OnlyJar = true;
                        break;
                    }
                case "U2":
                    {
                        U2.ProcessName = protoshortname;
                        U2.ReagentName = regName;
                        U2.OnlyJar = true;
                        break;
                    }
                case "U3":
                    {
                        U3.ProcessName = protoshortname;
                        U3.ReagentName = regName;
                        U3.OnlyJar = true;
                        break;
                    }
                case "U4":
                    {
                        U4.ProcessName = protoshortname;
                        U4.ReagentName = regName;
                        U4.OnlyJar = true;
                        break;
                    }
                case "U5":
                    {
                        U5.ProcessName = protoshortname;
                        U5.ReagentName = regName;
                        U5.OnlyJar = true;
                        break;
                    }
                case "U6":
                    {
                        U6.ProcessName = protoshortname;
                        U6.ReagentName = regName;
                        U6.OnlyJar = true;
                        break;
                    }
                case "L1":
                    {
                        L1.ReagentName = regName;
                        L1.OnlyJar = true;
                        break;
                    }
                case "L2":
                    {
                        L2.ReagentName = regName;
                        L2.OnlyJar = true;
                        break;
                    }
                case "L3":
                    {
                        L3.ReagentName = regName;
                        L3.OnlyJar = true;
                        break;
                    }
            }
            System.Threading.Thread.Sleep(500);
            return;
        }
        private void refresh_UI(string refjarname, string regName)
        {
            string prtname = " ";
            switch (refjarname)
            {
                case "J1":
                    {
                        J1.ProcessName = prtname;
                        J1.ReagentName = regName;
                        J1.OnlyJar = true;
                        J1.BorderSize = 3;
                        break;
                    }
                case "J2":
                    {
                        J2.ProcessName = prtname;
                        J2.ReagentName = regName;
                        J2.OnlyJar = true;
                        J2.BorderSize = 3;
                        break;
                    }
                case "J3":
                    {
                        J3.ProcessName = prtname;
                        J3.ReagentName = regName;
                        J3.OnlyJar = true;
                        J3.BorderSize = 3;
                        break;
                    }
                case "J4":
                    {
                        J4.ProcessName = prtname;
                        J4.ReagentName = regName;
                        J4.BorderSize = 3;
                        J4.OnlyJar = true;
                        break;
                    }
                case "J5":
                    {
                        J5.ProcessName = prtname;
                        J5.ReagentName = regName;
                        J5.OnlyJar = true;
                        J5.BorderSize = 3;
                        break;
                    }
                case "J6":
                    {
                        J6.ProcessName = prtname;
                        J6.ReagentName = regName;
                        J6.OnlyJar = true;
                        J6.BorderSize = 3;
                        break;
                    }
                case "J7":
                    {
                        J7.ProcessName = prtname;
                        J7.ReagentName = regName;
                        J7.OnlyJar = true; J7.BorderSize = 3;
                        break;
                    }
                case "J8":
                    {
                        J8.ProcessName = prtname;
                        J8.ReagentName = regName;
                        J8.OnlyJar = true; J8.BorderSize = 3;
                        break;
                    }
                case "J9":
                    {
                        J9.ProcessName = prtname;
                        J9.ReagentName = regName;
                        J9.OnlyJar = true; J9.BorderSize = 3;
                        break;
                    }
                case "J10":
                    {
                        J10.ProcessName = prtname;
                        J10.ReagentName = regName;
                        J10.OnlyJar = true; J10.BorderSize = 3;
                        break;
                    }
                case "J11":
                    {
                        J11.ProcessName = prtname;
                        J11.ReagentName = regName;
                        J11.OnlyJar = true; J11.BorderSize = 3;
                        break;
                    }
                case "J12":
                    {
                        J12.ProcessName = prtname;
                        J12.ReagentName = regName;
                        J12.OnlyJar = true; J12.BorderSize = 3;
                        break;
                    }
                case "J13":
                    {
                        J13.ProcessName = prtname;
                        J13.ReagentName = regName;
                        J13.OnlyJar = true; J13.BorderSize = 3;
                        break;
                    }
                case "J14":
                    {
                        J14.ProcessName = prtname;
                        J14.ReagentName = regName;
                        J14.OnlyJar = true; J14.BorderSize = 3;
                        break;
                    }
                case "J15":
                    {
                        J15.ProcessName = prtname;
                        J15.ReagentName = regName;
                        J15.OnlyJar = true; J15.BorderSize = 3;
                        break;
                    }
                case "J16":
                    {
                        J16.ProcessName = prtname;
                        J16.ReagentName = regName;
                        J16.OnlyJar = true; J16.BorderSize = 3;
                        break;
                    }
                case "J17":
                    {
                        J17.ProcessName = prtname;
                        J17.ReagentName = regName;
                        J17.OnlyJar = true; J17.BorderSize = 3;
                        break;
                    }
                case "J18":
                    {
                        J18.ProcessName = prtname;
                        J18.ReagentName = regName;
                        J18.OnlyJar = true; J18.BorderSize = 3;
                        break;
                    }
                case "J19":
                    {
                        J19.ProcessName = prtname;
                        J19.ReagentName = regName;
                        J19.OnlyJar = true; J19.BorderSize = 3;
                        break;
                    }
                case "J20":
                    {
                        J20.ProcessName = prtname;
                        J20.ReagentName = regName;
                        J20.OnlyJar = true; J20.BorderSize = 3;
                        break;
                    }
                case "J21":
                    {
                        J21.ProcessName = prtname;
                        J21.ReagentName = regName;
                        J21.OnlyJar = true; J21.BorderSize = 3;
                        break;
                    }
                case "J22":
                    {
                        J22.ProcessName = prtname;
                        J22.ReagentName = regName;
                        J22.OnlyJar = true; J22.BorderSize = 3;
                        break;
                    }
                case "J23":
                    {
                        J23.ProcessName = prtname;
                        J23.ReagentName = regName;
                        J23.OnlyJar = true; J23.BorderSize = 3;
                        break;
                    }
                case "J24":
                    {
                        J24.ProcessName = prtname;
                        J24.ReagentName = regName;
                        J24.OnlyJar = true; J24.BorderSize = 3;
                        break;
                    }
                case "J25":
                    {
                        J25.ProcessName = prtname;
                        J25.ReagentName = regName;
                        J25.OnlyJar = true; J25.BorderSize = 3;
                        break;
                    }
                case "J26":
                    {
                        J26.ProcessName = prtname;
                        J26.ReagentName = regName;
                        J26.OnlyJar = true; J26.BorderSize = 3;
                        break;
                    }
                case "J27":
                    {
                        U1.ProcessName = prtname;
                        U1.ReagentName = regName;
                        U1.OnlyJar = true; U1.BorderSize = 3;
                        break;
                    }
                case "J28":
                    {
                        J32.ProcessName = prtname;
                        J32.ReagentName = regName;
                        J32.OnlyJar = true; J32.BorderSize = 3;
                        break;
                    }
                case "J29":
                    {
                        J31.ProcessName = prtname;
                        J31.ReagentName = regName;
                        J31.OnlyJar = true; J31.BorderSize = 3;
                        break;
                    }
                case "J30":
                    {
                        J30.ProcessName = prtname;
                        J30.ReagentName = regName;
                        J30.OnlyJar = true; J30.BorderSize = 3;
                        break;
                    }
                case "J31":
                    {
                        J29.ProcessName = prtname;
                        J29.ReagentName = regName;
                        J29.OnlyJar = true; J29.BorderSize = 3;
                        break;
                    }
                case "J32":
                    {
                        J28.ProcessName = prtname;
                        J28.ReagentName = regName;
                        J28.OnlyJar = true; J28.BorderSize = 3;
                        break;
                    }
                case "J33":
                    {
                        J27.ProcessName = prtname;
                        J27.ReagentName = regName;
                        J27.OnlyJar = true; J27.BorderSize = 3;
                        break;
                    }
                case "W1":
                    {
                        W1.ProcessName = prtname;
                        W1.ReagentName = regName;
                        W1.OnlyJar = true; W1.BorderSize = 3;
                        break;
                    }
                case "W2":
                    {
                        W2.ProcessName = prtname;
                        W2.ReagentName = regName;
                        W2.OnlyJar = true; W2.BorderSize = 3;
                        break;
                    }
                case "W3":
                    {
                        W3.ProcessName = prtname;
                        W3.ReagentName = regName;
                        W3.OnlyJar = true; W3.BorderSize = 3;
                        break;
                    }
                case "W4":
                    {
                        W4.ProcessName = prtname;
                        W4.ReagentName = regName;
                        W4.OnlyJar = true; W4.BorderSize = 3;
                        break;
                    }
                case "W5":
                    {
                        W5.ProcessName = prtname;
                        W5.ReagentName = regName;
                        W5.OnlyJar = true; W5.BorderSize = 3;
                        break;
                    }
                case "W6":
                    {
                        W6.ProcessName = prtname;
                        W6.ReagentName = regName;
                        W6.OnlyJar = true; W6.BorderSize = 3;
                        break;
                    }
                case "U1":
                    {
                        J33.ProcessName = prtname;
                        J33.ReagentName = regName;
                        J33.OnlyJar = true; J33.BorderSize = 3;
                        break;
                    }
                case "U2":
                    {
                        U2.ProcessName = prtname;
                        U2.ReagentName = regName;
                        U2.OnlyJar = true; U2.BorderSize = 3;
                        break;
                    }
                case "U3":
                    {
                        U3.ProcessName = prtname;
                        U3.ReagentName = regName;
                        U3.OnlyJar = true; U3.BorderSize = 3;
                        break;
                    }
                case "U4":
                    {
                        U4.ProcessName = prtname;
                        U4.ReagentName = regName;
                        U4.OnlyJar = true; U4.BorderSize = 3;
                        break;
                    }
                case "U5":
                    {
                        U5.ProcessName = prtname;
                        U5.ReagentName = regName;
                        U5.OnlyJar = true; U5.BorderSize = 3;
                        break;
                    }
                case "U6":
                    {
                        U6.ProcessName = prtname;
                        U6.ReagentName = regName;
                        U6.OnlyJar = true; U6.BorderSize = 3;
                        break;
                    }
                case "L1":
                    {
                        L1.ReagentName = regName;
                        L1.OnlyJar = true; L1.BorderSize = 3;
                        break;
                    }
                case "L2":
                    {
                        L2.ReagentName = regName;
                        L2.OnlyJar = true; L2.BorderSize = 3;
                        break;
                    }
                case "L3":
                    {
                        L3.ReagentName = regName;
                        L3.OnlyJar = true; L3.BorderSize = 3;
                        break;
                    }
                case "H1":
                    {
                        H1.ReagentName = regName;
                        H1.OnlyJar = true; H1.BorderSize = 3;
                        break;
                    }
                case "H2":
                    {
                        H2.ReagentName = regName;
                        H2.OnlyJar = true; H2.BorderSize = 3;
                        break;
                    }
                case "H3":
                    {
                        H3.ReagentName = regName;
                        H3.OnlyJar = true; H3.BorderSize = 3;
                        break;
                    }
            }
        }
        #endregion

        #region Updating test run Data to Database
        //private async void updateprotorun(string protoname,string prefby, string prefon, string rname, string jname, string rackno,string arrv, string month, string status, float tempval)
        private async void updateprotorun(string protoname, string prefby, string prefon, string rname, string jname, string rackno, string arrv, string month, string status, float tempval, int runid)
        {
            try
            {
                Communication.writeprotorundata(protoname, prefby, prefon, jname, rname, rackno, arrv, month, status, tempval, runid);
                int cnt = 0;
                //Updating data to datarow
                ProtoRunStatus.Rows.Add();
                cnt = ProtoRunStatus.Rows.Count;

                ProtoRunStatus.Rows[cnt - 1]["SlNo"] = cnt;
                ProtoRunStatus.Rows[cnt - 1]["ProtocolName"] = protoname;
                ProtoRunStatus.Rows[cnt - 1]["PerformedBy"] = prefby;
                ProtoRunStatus.Rows[cnt - 1]["PerformedOn"] = prefon;
                ProtoRunStatus.Rows[cnt - 1]["JarName"] = jname;
                ProtoRunStatus.Rows[cnt - 1]["RegName"] = rname;
                ProtoRunStatus.Rows[cnt - 1]["RackNo"] = rackno;
                ProtoRunStatus.Rows[cnt - 1]["ArrivedTime"] = arrv;
                ProtoRunStatus.Rows[cnt - 1]["Month"] = month;
                ProtoRunStatus.Rows[cnt - 1]["Status"] = status;
                ProtoRunStatus.Rows[cnt - 1]["Temp"] = tempval;
                ProtoRunStatus.Rows[cnt - 1]["RunId"] = runid;
                await updateprotorun_thread();
            }
            catch (Exception d3)
            {
                RequiredVariables.writeerrorlogfile(protoname + ", " + jname + ", " + rackno + ", " + status + " Not updated to database\r\n" + d3.ToString(), "In Updateprotorun() fucntion in Form_Protorunfucntion");
            }
        }
        delegate void Setupdatedb(string protoname, string prefby, string prefon, string jname, string rackno, string arrv, string month, string status, float tempval);
        private async Task updateprotorun_thread()
        {
            try
            {
                if (ProtoRunStatus.Rows.Count > 0)
                {
                    saveDataTable("ProtocolRun"); //New function calling to save the data to server using bulk copy added on 18-12-2023
                }
            }
            catch (Exception d3)
            {

            }
        }
        ////Working function directly inserting into database
        private void updateprotorun_working(string protoname, string prefby, string prefon, string jname, string rackno, DateTime arrv, string month, string status, float tempval)
        {
            try
            {
                string mon = DateTime.Now.Month.ToString();
                sqlstr = "";
                sqlstr = "Insert into ProtocolRun(ProtocolName,PerformedBy,PerformedOn,JarName,RackNo,ArrivedTime,Month,Status,Temp) values('" + protoname + "','";
                sqlstr = sqlstr + prefby + "','" + prefon + "','" + jname + "','" + rackno + "','" + arrv + "','" + month + "','" + status + "'," + tempval + ")";
                if (con.State == ConnectionState.Closed)
                    con.Open();
                cmd = new SqlCommand(sqlstr, con);
                cmd.ExecuteNonQuery();
                cmd.Dispose();
                con.Close();
            }
            catch (Exception d3)
            {
                RequiredVariables.writeerrorlogfile(protoname + ", " + jname + ", " + rackno + ", " + status + " Not updated to database\r\n" + d3.ToString(), "In Updateprotorun() fucntion in Form_Protorunfucntion");
            }
        }
        public bool isCopyInProgess = false;//not necessary - just part of my code
        public void saveDataTable(string tableName)
        {
            try
            {
                if (con.ConnectionString == "") con.ConnectionString = RequiredVariables.DBConnStr;
                if (con1.ConnectionString == "") con1.ConnectionString = RequiredVariables.DBConnStr;
                using (SqlConnection conn = con)
                {
                    SqlCommand cmd_update = new SqlCommand();

                    if (conn.State == ConnectionState.Closed)
                        conn.Open();

                    for (int cnt = 0; cnt < ProtoRunStatus.Rows.Count; cnt++)
                    {
                        sqlstr = "";
                        sqlstr = "Insert into ProtocolRun(ProtocolName,PerformedBy,PerformedOn,JarName,ReagentName,RackNo,ArrivedTime,Month,Status,RunId,Temp) values('";
                        sqlstr = sqlstr + ProtoRunStatus.Rows[cnt]["ProtocolName"] + "','" + ProtoRunStatus.Rows[cnt]["PerformedBy"] + "','" + ProtoRunStatus.Rows[cnt]["PerformedOn"] + "','" + ProtoRunStatus.Rows[cnt]["JarName"] + "','" + ProtoRunStatus.Rows[cnt]["RegName"] + "','";
                        sqlstr = sqlstr + ProtoRunStatus.Rows[cnt]["RackNo"] + "','" + ProtoRunStatus.Rows[cnt]["ArrivedTime"] + "','" + ProtoRunStatus.Rows[cnt]["Month"] + "','" + ProtoRunStatus.Rows[cnt]["Status"] + "'," + (int)ProtoRunStatus.Rows[cnt]["RunID"] + "," + (float)ProtoRunStatus.Rows[cnt]["Temp"] + ")";
                        if (conn.State == ConnectionState.Closed)
                            conn.Open();
                        cmd_update = new SqlCommand(sqlstr, conn);
                        cmd_update.ExecuteNonQuery();
                        cmd_update.Dispose();
                    }
                    conn.Close();
                    //Below code to truncate the protorunstatus datatable.
                    tmr_update_flg = false;  //updating flag to false to insert the next record updated to datatable.
                    if (ProtoRunStatus.Rows.Count > 0)
                        ProtoRunStatus.Rows.Clear();
                    if (con.ConnectionString == "") con.ConnectionString = RequiredVariables.DBConnStr;
                    if (con1.ConnectionString == "") con1.ConnectionString = RequiredVariables.DBConnStr;
                }
            }
            catch (Exception d3)
            {
                tmr_update_flg = false;  //updating flag to false to insert the next record updated to datatable.
                if (con.ConnectionString == "") con.ConnectionString = RequiredVariables.DBConnStr;
                if (con1.ConnectionString == "") con1.ConnectionString = RequiredVariables.DBConnStr;
                RequiredVariables.writeerrorlogfile("While inserting data to protoruntable \n" + d3.ToString(), "In function saveDataTable of Form_RunProto");
            }
        }
        #endregion
    }
}